[{"title": "How to take screenshot with Selenium WebDriver", "question_body": "<p>Does anyone know if it's possible to take a screenshot using Selenium WebDriver? (Note: Not Selenium RC)</p>\n", "link": "https://stackoverflow.com/questions/3422262/how-to-take-screenshot-with-selenium-webdriver", "question_id": 3422262, "accepted_answer_id": 3423347, "answer_body": "<h1>Java</h1>\n\n<p>Yes, it is possible. The following example is in Java:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>WebDriver driver = new FirefoxDriver();\ndriver.get(\"http://www.google.com/\");\nFile scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n// Now you can do whatever you need to do with it, for example copy somewhere\nFileUtils.copyFile(scrFile, new File(\"c:\\\\tmp\\\\screenshot.png\"));\n</code></pre>\n"}, {"title": "Get HTML Source of WebElement in Selenium WebDriver using Python", "question_body": "<p>I'm using the Python bindings to run Selenium WebDriver.</p>\n\n<pre><code>from selenium import webdriver\nwd = webdriver.Firefox()\n</code></pre>\n\n<p>I know I can grab a webelement like so...</p>\n\n<pre><code>elem = wd.find_element_by_css_selector('#my-id')\n</code></pre>\n\n<p>And I know I can get the full page source with...</p>\n\n<pre><code>wd.page_source\n</code></pre>\n\n<p>But is there anyway to get the \"element source\"?</p>\n\n<pre><code>elem.source   # &lt;-- returns the HTML as a string\n</code></pre>\n\n<p>The selenium webdriver docs for Python are basically non-existent and I don't see anything in the code that seems to enable that functionality.</p>\n\n<p>Any thoughts on the best way to access the HTML of an element (and its children)?</p>\n", "link": "https://stackoverflow.com/questions/7263824/get-html-source-of-webelement-in-selenium-webdriver-using-python", "question_id": 7263824, "accepted_answer_id": 8575709, "answer_body": "<p>You can read <code>innerHTML</code> attribute to get source of the <em>content</em> of the element or <code>outerHTML</code> for source <em>with</em> the current element.</p>\n\n<p>Python:</p>\n\n<pre><code>element.get_attribute('innerHTML')\n</code></pre>\n\n<p>Java:</p>\n\n<pre><code>elem.getAttribute(\"innerHTML\");\n</code></pre>\n\n<p>C#:</p>\n\n<pre><code>element.GetAttribute(\"innerHTML\");\n</code></pre>\n\n<p>Ruby:</p>\n\n<pre><code>element.attribute(\"innerHTML\")\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>element.getAttribute('innerHTML');\n</code></pre>\n\n<p>PHP:</p>\n\n<pre><code>$element-&gt;getAttribute('innerHTML');\n</code></pre>\n\n<p>Tested and works with the <code>ChromeDriver</code>.</p>\n"}, {"title": "Selenium using Python - Geckodriver executable needs to be in PATH", "question_body": "<p>I'm new to programming and started with <code>Python</code> about 2 months ago and am going over Sweigart's <em>Automate the Boring Stuff with Python</em> text. I'm using IDLE and already installed the selenium module and the Firefox browser.\nWhenever I tried to run the webdriver function, I get this:</p>\n\n<pre><code>from selenium import webdriver\nbrowser = webdriver.Firefox()\n</code></pre>\n\n<p>Exception :-</p>\n\n<pre><code>Exception ignored in: &lt;bound method Service.__del__ of &lt;selenium.webdriver.firefox.service.Service object at 0x00000249C0DA1080&gt;&gt;\nTraceback (most recent call last):\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 163, in __del__\n    self.stop()\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 135, in stop\n    if self.process is None:\nAttributeError: 'Service' object has no attribute 'process'\nException ignored in: &lt;bound method Service.__del__ of &lt;selenium.webdriver.firefox.service.Service object at 0x00000249C0E08128&gt;&gt;\nTraceback (most recent call last):\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 163, in __del__\n    self.stop()\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 135, in stop\n    if self.process is None:\nAttributeError: 'Service' object has no attribute 'process'\nTraceback (most recent call last):\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 64, in start\n    stdout=self.log_file, stderr=self.log_file)\n  File \"C:\\Python\\Python35\\lib\\subprocess.py\", line 947, in __init__\n    restore_signals, start_new_session)\n  File \"C:\\Python\\Python35\\lib\\subprocess.py\", line 1224, in _execute_child\n    startupinfo)\nFileNotFoundError: [WinError 2] The system cannot find the file specified\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#11&gt;\", line 1, in &lt;module&gt;\n    browser = webdriver.Firefox()\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py\", line 135, in __init__\n    self.service.start()\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 71, in start\n    os.path.basename(self.path), self.start_error_message)\nselenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH. \n</code></pre>\n\n<p>I think I need to set the path for <code>geckodriver</code> but not sure how, so can anyone tell me how would I do this?</p>\n", "link": "https://stackoverflow.com/questions/40208051/selenium-using-python-geckodriver-executable-needs-to-be-in-path", "question_id": 40208051, "accepted_answer_id": 40208762, "answer_body": "<blockquote>\n  <p>selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH. </p>\n</blockquote>\n\n<p><a href=\"https://github.com/mozilla/geckodriver/releases\">First of all you will need to download latest executable geckodriver from here to run latest firefox using selenium</a></p>\n\n<p>Actually The Selenium client bindings tries to locate the <code>geckodriver</code> executable from the system <code>PATH</code>. You will need to add the directory containing the executable to the system path.</p>\n\n<ul>\n<li><p>On Unix systems you can do the following to append it to your system\u2019s search path, if you\u2019re using a bash-compatible shell:</p>\n\n<pre><code>export PATH=$PATH:/path/to/directory/of/executable/downloaded/in/previous/step\n</code></pre></li>\n<li><p>On Windows you will need to update the <strong>Path system variable to add the full directory path to the executable geckodriver</strong> <a href=\"https://www.google.co.in/amp/www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/amp/?client=ms-android-motorola\">manually</a> or <a href=\"https://www.windows-commandline.com/set-path-command-line/\">command line</a><strong>(don't forget to restart your system after adding executable geckodriver into system PATH to take effect)</strong>.  The principle is the same as on Unix. </p></li>\n</ul>\n\n<p>Now you can run your code same as you're doing as below :-</p>\n\n<pre><code>from selenium import webdriver\n\nbrowser = webdriver.Firefox()\n</code></pre>\n\n<blockquote>\n  <p>selenium.common.exceptions.WebDriverException: Message: Expected browser binary location, but unable to find binary in default location, no 'moz:firefoxOptions.binary' capability provided, and no binary flag set on the command line</p>\n</blockquote>\n\n<p>Exception clearly states you have installed firefox some other location while Selenium is trying to find firefox and launch from default location but it couldn't find. You need to provide explicitly firefox installed binary location to launch firefox as below :-</p>\n\n<pre><code>from selenium import webdriver\nfrom selenium.webdriver.firefox.firefox_binary import FirefoxBinary\n\nbinary = FirefoxBinary('path/to/installed firefox binary')\nbrowser = webdriver.Firefox(firefox_binary=binary)\n</code></pre>\n"}, {"title": "Debugging &quot;Element is not clickable at point&quot; error", "question_body": "<p>I see this only in Chrome.</p>\n\n<p>The full error message reads:</p>\n\n<blockquote>\n  <p>\"org.openqa.selenium.WebDriverException: Element is not clickable at point (411, 675). Other element would receive the click: ...\"</p>\n</blockquote>\n\n<p>The element that 'would receive the click' is to the side of the element in question, not on top of it and not overlapping it, not moving around the page.</p>\n\n<p>I have tried adding an offset, but that does not work either.  The item is on the displayed window without any need for scrolling.</p>\n", "link": "https://stackoverflow.com/questions/11908249/debugging-element-is-not-clickable-at-point-error", "question_id": 11908249, "accepted_answer_id": null}, {"title": "Headless Browser and scraping - solutions", "question_body": "<p>I'm trying to put list of possible solutions for browser automatic tests suits and headless browser platforms capable of scraping.</p>\n\n<hr>\n\n<p><strong>BROWSER TESTING / SCRAPING:</strong></p>\n\n<ul>\n<li><a href=\"http://seleniumhq.org\" rel=\"nofollow noreferrer\">Selenium</a> - <strong>polyglot</strong> flagship in browser automation, bindings for Python, Ruby,  JavaScript, C#, Haskell and more, IDE for Firefox (as an extension) for faster test deployment. Can act as a Server and has tons of features.</li>\n</ul>\n\n<p><strong>JAVASCRIPT</strong></p>\n\n<ul>\n<li><a href=\"http://phantomjs.org/\" rel=\"nofollow noreferrer\">PhantomJS</a> - <strong>JavaScript</strong>, headless testing with screen capture and automation, uses <strong>Webkit</strong>. As of version 1.8 Selenium's WebDriver API is implemented, so you can use any WebDriver binding and tests will be compatible with Selenium</li>\n<li><a href=\"http://slimerjs.org/\" rel=\"nofollow noreferrer\">SlimerJS</a> - similar to PhantomJS, uses <strong>Gecko</strong> (Firefox) instead of <strong>WebKit</strong></li>\n<li><a href=\"http://casperjs.org/\" rel=\"nofollow noreferrer\">CasperJS</a> - <strong>JavaScript</strong>, build on both PhantomJS and SlimerJS, has extra features</li>\n<li><a href=\"https://github.com/detro/ghostdriver\" rel=\"nofollow noreferrer\">Ghost Driver</a> - <strong>JavaScript</strong> implementation of the <strong>WebDriver Wire Protocol</strong> for <strong>PhantomJS</strong>. </li>\n<li><strong><em>new</em></strong> <a href=\"https://github.com/Huddle/PhantomCSS\" rel=\"nofollow noreferrer\">PhantomCSS</a> - CSS regression testing. A CasperJS module for automating visual regression testing with PhantomJS and <a href=\"http://huddle.github.io/Resemble.js/\" rel=\"nofollow noreferrer\">Resemble.js</a>.</li>\n<li><strong><em>new</em></strong> <a href=\"https://github.com/webdriverjs/webdrivercss\" rel=\"nofollow noreferrer\">WebdriverCSS</a> - plugin for <a href=\"http://webdriver.io\" rel=\"nofollow noreferrer\">Webdriver.io</a> for automating visual regression testing</li>\n<li><strong><em>new</em></strong> <a href=\"https://github.com/Huddle/PhantomFlow\" rel=\"nofollow noreferrer\">PhantomFlow</a> - Describe and visualize user flows through tests. An experimental approach to Web user interface testing.</li>\n<li><strong><em>new</em></strong> <a href=\"http://triflejs.org/\" rel=\"nofollow noreferrer\">trifleJS</a> - ports the PhantomJS API to use the Internet Explorer engine.</li>\n<li><strong><em>new</em></strong> <a href=\"https://gum.co/casperjside\" rel=\"nofollow noreferrer\">CasperJS IDE</a> <em>(commercial)</em></li>\n</ul>\n\n<p><strong>NODE.JS</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/alexscheelmeyer/node-phantom\" rel=\"nofollow noreferrer\">Node-phantom</a> - bridges the gap between <strong>PhantomJS</strong> and <strong>node.js</strong></li>\n<li><a href=\"https://code.google.com/p/selenium/wiki/WebDriverJs\" rel=\"nofollow noreferrer\">WebDriverJs</a> - Selenium WebDriver bindings for node.js by Selenium Team</li>\n<li><a href=\"https://github.com/admc/wd\" rel=\"nofollow noreferrer\">WD.js</a> - node module for WebDriver/Selenium 2</li>\n<li><a href=\"https://github.com/jlipps/yiewd\" rel=\"nofollow noreferrer\">yiewd</a> - WD.js wrapper using latest Harmony generators! Get rid of the callback pyramid with <strong>yield</strong> </li>\n<li><a href=\"http://zombie.labnotes.org/\" rel=\"nofollow noreferrer\">ZombieJs</a> - Insanely fast, headless full-stack testing using <strong>node.js</strong></li>\n<li><a href=\"http://nightwatchjs.org/\" rel=\"nofollow noreferrer\">NightwatchJs</a> - Node JS based testing solution using Selenium Webdriver</li>\n<li><a href=\"https://github.com/deanmao/node-chimera\" rel=\"nofollow noreferrer\">Chimera</a> - Chimera: can do everything what phantomJS does, but in a full JS environment</li>\n<li><a href=\"http://dalekjs.com\" rel=\"nofollow noreferrer\">Dalek.js</a> - Automated cross browser testing with JavaScript through Selenium Webdriver</li>\n<li><a href=\"http://webdriver.io\" rel=\"nofollow noreferrer\">Webdriver.io</a> - better implementation of WebDriver bindings with predefined 50+ actions</li>\n<li><a href=\"https://github.com/segmentio/nightmare\" rel=\"nofollow noreferrer\">Nightmare</a> - Electron bridge with a high-level API. </li>\n<li><a href=\"https://github.com/tmpvar/jsdom\" rel=\"nofollow noreferrer\">jsdom</a> - Tailored towards web scraping. A very lightweight DOM implemented in Node.js, it supports pages with javascript. </li>\n<li><strong><em>new</em></strong> <a href=\"https://github.com/GoogleChrome/puppeteer\" rel=\"nofollow noreferrer\">Puppeteer</a> - Node library which provides a high-level API to control Chrome or Chromium. Puppeteer runs headless by default.</li>\n</ul>\n\n<p><strong>WEB SCRAPING / MINING</strong></p>\n\n<ul>\n<li><a href=\"http://scrapy.org\" rel=\"nofollow noreferrer\">Scrapy</a> - <strong>Python</strong>, mainly a scraper/miner - fast, well documented and, can be linked with <a href=\"http://django-dynamic-scraper.readthedocs.org/en/latest/\" rel=\"nofollow noreferrer\">Django Dynamic Scraper</a> for nice mining deployments, or <a href=\"http://scrapinghub.com/scrapy-cloud.html\" rel=\"nofollow noreferrer\">Scrapy Cloud</a> for PaaS (server-less) deployment, works in terminal or an server stand-alone proces, can be used with <strong>Celery</strong>, built on top of <strong>Twisted</strong></li>\n<li><a href=\"https://github.com/matthewhudson/snailer\" rel=\"nofollow noreferrer\">Snailer</a> - <strong>node.js</strong> module, untested yet. </li>\n<li><a href=\"https://github.com/sylvinus/node-crawler.git\" rel=\"nofollow noreferrer\">Node-Crawler</a> - <strong>node.js</strong> module, untested yet.</li>\n</ul>\n\n<p><strong>ONLINE TOOLS</strong></p>\n\n<ul>\n<li><p><strong><em>new</em></strong> <a href=\"https://www.npmjs.com/package/wslang\" rel=\"nofollow noreferrer\">Web Scraping Language</a> - Simple syntax to crawl the web</p></li>\n<li><p><strong><em>new</em></strong> <a href=\"https://stackoverflow.com/a/12637452/363573\">Online HTTP client</a> - Dedicated SO answer</p></li>\n<li><p><strong><em>dead</em></strong> <a href=\"https://www.casperbox.com\" rel=\"nofollow noreferrer\">CasperBox</a> - Run <strong>CasperJS</strong> scripts online</p></li>\n</ul>\n\n<hr>\n\n<p><strong>RELATED LINKS &amp; RESOURCES</strong> </p>\n\n<ul>\n<li><a href=\"http://blog.screen-scraper.com/2010/06/28/comparison-of-web-scraping-software/\" rel=\"nofollow noreferrer\">Comparsion of Webscraping software</a></li>\n<li><strong><em>new</em></strong> <a href=\"http://huddle.github.io/Resemble.js/\" rel=\"nofollow noreferrer\">Resemble.js</a> : Image analysis and comparison</li>\n</ul>\n\n<p><strong>Questions:</strong></p>\n\n<ul>\n<li>Any pure Node.js solution or Nodejs to PhanthomJS/CasperJS module that actually works and is documented?</li>\n</ul>\n\n<p><strong>Answer:</strong> Chimera seems to go in that direction, checkout <a href=\"https://github.com/deanmao/node-chimera\" rel=\"nofollow noreferrer\">Chimera</a></p>\n\n<ul>\n<li><p>Other solutions capable of easier JavaScript injection than Selenium?</p></li>\n<li><p>Do you know any pure <strong>ruby</strong> solutions?</p></li>\n</ul>\n\n<p><strong>Answer:</strong> Checkout the list created by rjk with ruby based solutions</p>\n\n<ul>\n<li>Do you know any related tech or solution?</li>\n</ul>\n\n<p><strong>Feel free to edit this question and add content as you wish!</strong> Thank you for your contributions!</p>\n", "link": "https://stackoverflow.com/questions/18539491/headless-browser-and-scraping-solutions", "question_id": 18539491, "accepted_answer_id": null}, {"title": "Can a website detect when you are using selenium with chromedriver?", "question_body": "<p>I've been testing out Selenium with Chromedriver and I noticed that some pages can detect that you're using Selenium even though there's no automation at all. Even when I'm just browsing manually just using chrome through Selenium and Xephyr I often get a page saying that suspicious activity was detected. I've checked my user agent, and my browser fingerprint, and they are all exactly identical to the normal chrome browser.</p>\n\n<p>When I browse to these sites in normal chrome everything works fine, but the moment I use Selenium I'm detected.</p>\n\n<p>In theory chromedriver and chrome should look literally exactly the same to any webserver, but somehow they can detect it. </p>\n\n<p>If you want some testcode try out this:</p>\n\n<pre><code>from pyvirtualdisplay import Display\nfrom selenium import webdriver\n\ndisplay = Display(visible=1, size=(1600, 902))\ndisplay.start()\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument('--disable-extensions')\nchrome_options.add_argument('--profile-directory=Default')\nchrome_options.add_argument(\"--incognito\")\nchrome_options.add_argument(\"--disable-plugins-discovery\");\nchrome_options.add_argument(\"--start-maximized\")\ndriver = webdriver.Chrome(chrome_options=chrome_options)\ndriver.delete_all_cookies()\ndriver.set_window_size(800,800)\ndriver.set_window_position(0,0)\nprint 'arguments done'\ndriver.get('http://stubhub.com')\n</code></pre>\n\n<p>If you browse around stubhub you'll get redirected and 'blocked' within one or two requests. I've been investigating this and I can't figure out how they can tell that a user is using Selenium. </p>\n\n<p>How do they do it?</p>\n\n<p>EDIT UPDATE:</p>\n\n<p>I installed the Selenium IDE plugin in Firefox and I got banned when I went to stubhub.com in the normal firefox browser with only the additional plugin.</p>\n\n<p>EDIT:</p>\n\n<p>When I use Fiddler to view the HTTP requests being sent back and forth I've noticed that the 'fake browser\\'s' requests often have 'no-cache' in the response header.</p>\n\n<p>EDIT:</p>\n\n<p>results like this <a href=\"https://stackoverflow.com/questions/3614472/is-there-a-way-to-detect-that-im-in-a-selenium-webdriver-page-from-javascript\">Is there a way to detect that I&#39;m in a Selenium Webdriver page from Javascript</a> suggest that there should be no way to detect when you are using a webdriver. But this evidence suggests otherwise.</p>\n\n<p>EDIT:</p>\n\n<p>The site uploads a fingerprint to their servers, but I checked and the fingerprint of selenium is identical to the fingerprint when using chrome.</p>\n\n<p>EDIT:</p>\n\n<p>This is one of the fingerprint payloads that they send to their servers</p>\n\n<pre><code>{\"appName\":\"Netscape\",\"platform\":\"Linuxx86_64\",\"cookies\":1,\"syslang\":\"en-US\",\"userlang\":\"en-US\",\"cpu\":\"\",\"productSub\":\"20030107\",\"setTimeout\":1,\"setInterval\":1,\"plugins\":{\"0\":\"ChromePDFViewer\",\"1\":\"ShockwaveFlash\",\"2\":\"WidevineContentDecryptionModule\",\"3\":\"NativeClient\",\"4\":\"ChromePDFViewer\"},\"mimeTypes\":{\"0\":\"application/pdf\",\"1\":\"ShockwaveFlashapplication/x-shockwave-flash\",\"2\":\"FutureSplashPlayerapplication/futuresplash\",\"3\":\"WidevineContentDecryptionModuleapplication/x-ppapi-widevine-cdm\",\"4\":\"NativeClientExecutableapplication/x-nacl\",\"5\":\"PortableNativeClientExecutableapplication/x-pnacl\",\"6\":\"PortableDocumentFormatapplication/x-google-chrome-pdf\"},\"screen\":{\"width\":1600,\"height\":900,\"colorDepth\":24},\"fonts\":{\"0\":\"monospace\",\"1\":\"DejaVuSerif\",\"2\":\"Georgia\",\"3\":\"DejaVuSans\",\"4\":\"TrebuchetMS\",\"5\":\"Verdana\",\"6\":\"AndaleMono\",\"7\":\"DejaVuSansMono\",\"8\":\"LiberationMono\",\"9\":\"NimbusMonoL\",\"10\":\"CourierNew\",\"11\":\"Courier\"}}\n</code></pre>\n\n<p>Its identical in selenium and in chrome</p>\n\n<p>EDIT:</p>\n\n<p>VPNs work for a single use but get detected after I load the first page. Clearly some javascript is being run to detect Selenium.</p>\n", "link": "https://stackoverflow.com/questions/33225947/can-a-website-detect-when-you-are-using-selenium-with-chromedriver", "question_id": 33225947, "accepted_answer_id": 52108199, "answer_body": "<h2><strong>For Mac Users</strong></h2>\n\n<p><strong><em>Replacing <code>cdc_</code> variable using Vim or Perl</em></strong></p>\n\n<p>You can use <code>vim</code>, or as @Vic Seedoubleyew has pointed out in the answer by @Erti-Chris Eelmaa, <code>perl</code>, to replace the <code>cdc_</code> variable in <code>chromedriver</code>(<em>See post by @Erti-Chris Eelmaa to learn more about that variable</em>). Using <code>vim</code> or <code>perl</code> prevents you from having to recompile source code or use a hex-editor. Make sure to make a copy of the original <code>chromedriver</code> before attempting to edit it. Also, the methods below were tested on <code>chromedriver version 2.41.578706</code>.</p>\n\n<hr>\n\n<h2><strong>Using Vim</strong></h2>\n\n<pre><code>vim /path/to/chromedriver\n</code></pre>\n\n<p>After running the line above, you'll probably see a bunch of gibberish. Do the following:</p>\n\n<ol>\n<li>Search for <code>cdc_</code> by typing <code>/cdc_</code> and pressing <code>return</code>.</li>\n<li>Enable editing by pressing <code>a</code>.</li>\n<li>Delete any amount of <code>$cdc_lasutopfhvcZLmcfl</code> and replace what was deleted with an equal amount characters. If you don't, <code>chromedriver</code> will fail.</li>\n<li>After you're done editing, press <code>esc</code>.</li>\n<li>To save the changes and quit, type <code>:wq!</code> and press <code>return</code>.</li>\n<li>If you don't want to save the changes, but you want to quit, type <code>:q!</code> and press <code>return</code>.</li>\n<li>You're done.</li>\n</ol>\n\n<p>Go to the altered <code>chromedriver</code> and double click on it. A <code>terminal</code> window should open up. If you don't see <code>killed</code> in the output, you successfully altered the driver.</p>\n\n<hr>\n\n<h2><strong>Using Perl</strong></h2>\n\n<p>The line below replaces <code>cdc_</code> with <code>dog_</code>:</p>\n\n<pre><code>perl -pi -e 's/cdc_/dog_/g' /path/to/chromedriver\n</code></pre>\n\n<p>Make sure that the replacement string has the same number of characters as the search string, otherwise the <code>chromedriver</code> will fail.</p>\n\n<p><strong><em>Perl Explanation</em></strong></p>\n\n<p><code>s///g</code> denotes that you want to search for a string and replace it globally with another string (replaces all occurrences).</p>\n\n<blockquote>\n  <p>e.g., <code>s/string/replacment/g</code></p>\n</blockquote>\n\n<p>So,</p>\n\n<blockquote>\n  <p><code>s///</code> denotes searching for and replacing a string.</p>\n  \n  <p><code>cdc_</code> is the search string.</p>\n  \n  <p><code>dog_</code> is the replacement string.</p>\n  \n  <p><code>g</code> is the global key, which replaces every occurrence of the string.</p>\n</blockquote>\n\n<p><strong><em>How to check if the Perl replacement worked</em></strong></p>\n\n<p>The following line will print every occurrence of the search string <code>cdc_</code>:</p>\n\n<p><code>perl -ne 'while(/cdc_/g){print \"$&amp;\\n\";}' /path/to/chromedriver</code></p>\n\n<p>If this returns nothing, then <code>cdc_</code> has been replaced. </p>\n\n<p>Conversely, you can use the this:</p>\n\n<p><code>perl -ne 'while(/dog_/g){print \"$&amp;\\n\";}' /path/to/chromedriver</code></p>\n\n<p>to see if your replacement string, <code>dog_</code>, is now in the <code>chromedriver</code> binary. If it is, the replacement string will be printed to the console.</p>\n\n<p>Go to the altered <code>chromedriver</code> and double click on it. A <code>terminal</code> window should open up. If you don't see <code>killed</code> in the output, you successfully altered the driver.</p>\n\n<hr>\n\n<h2><strong><em>Wrapping Up</em></strong></h2>\n\n<p>After altering the <code>chromedriver</code> binary, make sure that the name of the altered <code>chromedriver</code> binary is <code>chromedriver</code>, and that the original binary is either moved from its original location or renamed.</p>\n\n<hr>\n\n<h2><strong><em>My Experience With This Method</em></strong></h2>\n\n<p>I was previously being detected on a website while trying to log in, but after replacing <code>cdc_</code> with an equal sized string, I was able to log in. Like others have said though, if you've already been detected, you might get blocked for a plethora of other reasons even after using this method. So you may have to try accessing the site that was detecting you using a VPN, different network, or what have you.</p>\n"}, {"title": "Typing Enter/Return key in Selenium", "question_body": "<p>I'm looking for a quick way to type and Enter or Return key in Selenium. Unfortunately the form I'm trying to test (not my own code so I can't modify) doesn't have a Submit button. When working with it manually, I just type <kbd>ENTER</kbd> or <kbd>RETURN</kbd>. I need to know how to do that with the Selenium <code>type</code> command as there is no button to click.</p>\n", "link": "https://stackoverflow.com/questions/1629053/typing-enter-return-key-in-selenium", "question_id": 1629053, "accepted_answer_id": null}, {"title": "What would be an alternate to [TearDown] and [SetUp] in MSTest?", "question_body": "<p>When I use MSTest Framework, and copy the code that Selenium IDE generated for me, MSTest doesn't recognize <code>[TearDown]</code> and <code>[SetUp]</code>. What is the alternative to this?</p>\n", "link": "https://stackoverflow.com/questions/6193744/what-would-be-an-alternate-to-teardown-and-setup-in-mstest", "question_id": 6193744, "accepted_answer_id": 6193761, "answer_body": "<p>You would use <code>[TestCleanup]</code> and <code>[TestInitialize]</code> respectively. </p>\n"}, {"title": "Wait for page load in Selenium", "question_body": "<p>How do you make <a href=\"http://en.wikipedia.org/wiki/Selenium_%28software%29\" rel=\"noreferrer\">Selenium</a> 2.0 wait for the page to load?</p>\n", "link": "https://stackoverflow.com/questions/5868439/wait-for-page-load-in-selenium", "question_id": 5868439, "accepted_answer_id": null}, {"title": "How do I find an element that contains specific text in Selenium Webdriver (Python)?", "question_body": "<p>I'm trying to test a complicated javascript interface with Selenium (using the Python interface, and across multiple browsers).  I have a number of buttons of the form:</p>\n\n<pre><code>&lt;div&gt;My Button&lt;/div&gt;\n</code></pre>\n\n<p>I'd like to be able to search for buttons based on \"My Button\" (or non-case-sensitive, partial matches such as \"my button\" or \"button\")</p>\n\n<p>I'm finding this amazingly difficult, to the extent to which I feel like I'm missing something obvious.  The best thing I have so far is:</p>\n\n<pre><code>driver.find_elements_by_xpath('//div[contains(text(), \"' + text + '\")]')\n</code></pre>\n\n<p>This is case-sensitive, however.  The other thing I've tried is iterating through all the divs on the page, and checking the element.text property.  However, every time you get a situation of the form:</p>\n\n<pre><code>&lt;div class=\"outer\"&gt;&lt;div class=\"inner\"&gt;My Button&lt;/div&gt;&lt;/div&gt;\n</code></pre>\n\n<p>div.outer also has \"My Button\" as the text.  To fix THAT, I've tried looking to see if div.outer is the parent of div.inner, but couldn't figure out how to do that (element.get_element_by_xpath('..') returns an element's parent, but it tests not equal to div.outer).  Also, iterating through all the elements on the page seems to be really slow, at least using the Chrome webdriver.</p>\n\n<p>Ideas?</p>\n\n<p>Edit: This question came out a little vague.  Asked (and answered) a more specific version here: <a href=\"https://stackoverflow.com/questions/12325454/how-to-get-text-of-an-element-in-selenium-webdriver-via-the-python-api-without/12325461#12325461\">How to get text of an element in Selenium WebDriver (via the Python api) without including child element text?</a></p>\n", "link": "https://stackoverflow.com/questions/12323403/how-do-i-find-an-element-that-contains-specific-text-in-selenium-webdriver-pyth", "question_id": 12323403, "accepted_answer_id": null}, {"title": "Scroll Element into View with Selenium", "question_body": "<p>Is there any way in either Selenium 1.x or 2.x to scroll the browser window so that a particular element identified by an XPath is in view of the browser? There is a focus method in Selenium, but it does not seem to physically scroll the view in FireFox. Does anyone have any suggestions on how to do this?</p>\n\n<p>The reason I need this is I'm testing the click of an element on the page. Unfortunately the event doesn't seem to work unless the element is visible. I don't have control of the code that fires when the element is clicked, so I can't debug or make modifications to it, so, easiest solution, scroll the item into view.</p>\n", "link": "https://stackoverflow.com/questions/3401343/scroll-element-into-view-with-selenium", "question_id": 3401343, "accepted_answer_id": null}, {"title": "Selenium c# Webdriver: Wait Until Element is Present", "question_body": "<p>I want to make sure that an element is present before the webdriver starts doing stuff. </p>\n\n<p>I'm trying to get something like this to work: </p>\n\n<pre><code>WebDriverWait wait = new WebDriverWait(driver, new TimeSpan(0,0,5));\nwait.Until(By.Id(\"login\"));\n</code></pre>\n\n<p>I'm  mainly struggling how to setup up the anynomous function..</p>\n", "link": "https://stackoverflow.com/questions/6992993/selenium-c-webdriver-wait-until-element-is-present", "question_id": 6992993, "accepted_answer_id": 6993597, "answer_body": "<p>Alternatively you can use implicit wait:</p>\n\n<pre><code>driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n</code></pre>\n\n<blockquote>\n  <p>An implicit wait is to tell WebDriver to poll the DOM for a certain\n  amount of time when trying to find an element or elements if they are\n  not immediately available. The default setting is 0. Once set, the\n  implicit wait is set for the life of the WebDriver object instance.</p>\n</blockquote>\n"}, {"title": "How to verify an XPath expression in Chrome Developers tool or Firefox&#39;s Firebug?", "question_body": "<p>How can I verify my XPath?</p>\n\n<p>I am using Chrome Developers tool to inspect the elements and form my XPath. I verify it using the Chrome plugin XPath Checker, however it does not always give me the result. What is a better way to verify my XPath.</p>\n\n<p>I have also tried using Firebug to inspect the bug and also using the FirePath to verify. But does Firepath also verify the XPath.</p>\n\n<p>My last option would be to use the Selenium WebDriver to confirm my XPath. </p>\n", "link": "https://stackoverflow.com/questions/22571267/how-to-verify-an-xpath-expression-in-chrome-developers-tool-or-firefoxs-firebug", "question_id": 22571267, "accepted_answer_id": 22573161, "answer_body": "<h1>Chrome</h1>\n\n<p>This can be achieved by three different approaches (see my blog article <a href=\"http://yizeng.me/2014/03/23/evaluate-and-validate-xpath-css-selectors-in-chrome-developer-tools/\" rel=\"noreferrer\">here</a> for more details):</p>\n\n<ul>\n<li>Search in <code>Elements</code> panel like below</li>\n<li>Execute <code>$x()</code> and <code>$$()</code> in <code>Console</code> panel, as shown in Lawrence's <a href=\"https://stackoverflow.com/a/22571294/1177636\">answer</a></li>\n<li>Third party extensions (not really necessary in most of the cases, could be an overkill)</li>\n</ul>\n\n<p>Here is how you search XPath in <code>Elements</code> panel:</p>\n\n<ol>\n<li>Press <kbd>F12</kbd> to open Chrome Developer Tool</li>\n<li>In \"Elements\" panel, press <kbd>Ctrl</kbd>+<kbd>F</kbd></li>\n<li>In the search box, type in XPath or CSS Selector, if elements are found, they will be highlighted in yellow.</li>\n</ol>\n\n<p><img src=\"https://i.stack.imgur.com/qsj93.gif\" alt=\"enter image description here\"></p>\n\n<h1>Firefox</h1>\n\n<ol>\n<li>Either select \"Web Console\" from the Web Developer submenu in the \nFirefox Menu (or Tools menu if you display the menu bar or are on Mac OS X)<br>\nor press the <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>K</kbd> (<kbd>Command</kbd>+<kbd>Option</kbd>+<kbd>K</kbd> on OS X) keyboard shortcut.</li>\n<li><p>In the command line at the bottom use the following:</p>\n\n<ul>\n<li><p><code>$()</code>: Returns the first element that matches. Equivalent to <code>document.querySelector()</code> or calls the <code>$</code> function in the page, if it exists.</p></li>\n<li><p><code>$$()</code>: Returns an array of DOM nodes that match. This is like for <code>document.querySelectorAll()</code>, but returns an array instead of a <code>NodeList</code>.</p></li>\n<li><p><code>$x()</code>: Evaluates an XPath expression and returns an array of matching nodes.</p></li>\n</ul></li>\n</ol>\n\n<hr>\n\n<h1>Firefox (prior version 49)</h1>\n\n<ol>\n<li>Install <a href=\"http://getfirebug.com/\" rel=\"noreferrer\">Firebug</a></li>\n<li>Install <a href=\"https://addons.mozilla.org/en-US/firefox/addon/firepath/\" rel=\"noreferrer\">Firepath</a></li>\n<li>Press <kbd>F12</kbd> to open Firebug</li>\n<li>Switch to <code>FirePath</code> panel</li>\n<li>In dropdown, select XPathor CSS</li>\n<li>Type in to locate</li>\n</ol>\n\n<p><img src=\"https://i.stack.imgur.com/59Noo.gif\" alt=\"enter image description here\"></p>\n"}, {"title": "How to run Selenium WebDriver test cases in Chrome?", "question_body": "<p>I tried this </p>\n\n<pre class=\"lang-java prettyprint-override\"><code>WebDriver driver = new ChromeDriver();\n</code></pre>\n\n<p>But i'm getting the error as</p>\n\n<blockquote>\n  <p>Failed tests:   setUp(com.TEST): The path to the driver executable must be set by the webdriver.chrome.driver system property; for more information, see <a href=\"http://code.google.com/p/selenium/wiki/ChromeDriver\" rel=\"noreferrer\">code here</a> . The latest version can be downloaded from <a href=\"http://code.google.com/p/chromedriver/downloads/list\" rel=\"noreferrer\">Link</a></p>\n</blockquote>\n\n<p>How can I make Chrome to test the Selenium-WebDriver test cases?</p>\n", "link": "https://stackoverflow.com/questions/13724778/how-to-run-selenium-webdriver-test-cases-in-chrome", "question_id": 13724778, "accepted_answer_id": 13729517, "answer_body": "<p>You need to download the executable driver from: \n<a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads\" rel=\"noreferrer\">ChromeDriver Download</a></p>\n\n<p>Then all you need to do is use the following before creating the driver object (already shown in the correct order): </p>\n\n<pre class=\"lang-java prettyprint-override\"><code>System.setProperty(\"webdriver.chrome.driver\", \"/path/to/chromedriver\");\nWebDriver driver = new ChromeDriver();\n</code></pre>\n\n<p>This was extracted from the most useful guide from the <a href=\"https://sites.google.com/a/chromium.org/chromedriver/\" rel=\"noreferrer\">ChromeDriver Documentation</a>.</p>\n"}, {"title": "Test if element is present using Selenium WebDriver?", "question_body": "<p>is there a way how to test if an element is present? Any findElement method would end in an exception, but that is not what I want, because it can be that an element is not present and that is okay, that is not a fail of the test, so an exception can not be the solution.</p>\n\n<p>I've found this post: <a href=\"https://stackoverflow.com/questions/6992993/selenium-c-sharp-webdriver-wait-until-element-is-present\">Selenium c# Webdriver: Wait Until Element is Present</a>\nBut this is for C# and I am not very good at it. Can anyone translate the code into Java? I am sorry guys, I tried it out in Eclipse but I don't get it right into Java code.</p>\n\n<p>This is the code:</p>\n\n<pre><code>public static class WebDriverExtensions{\n    public static IWebElement FindElement(this IWebDriver driver, By by, int timeoutInSeconds){\n\n        if (timeoutInSeconds &gt; 0){\n            var wait = new WebDriverWait(driver, TimeSpan.FromSeconds(timeoutInSeconds));\n            return wait.Until(drv =&gt; drv.FindElement(by));\n        }\n\n        return driver.FindElement(by);\n    }\n}\n</code></pre>\n", "link": "https://stackoverflow.com/questions/7991522/test-if-element-is-present-using-selenium-webdriver", "question_id": 7991522, "accepted_answer_id": 9188374, "answer_body": "<p>Use <code>findElements</code> instead of <code>findElement</code>.</p>\n\n<p><code>findElements</code> will return an empty list if no matching elements are found instead of an exception.</p>\n\n<p>To check that an element is present, you could try this</p>\n\n<pre><code>Boolean isPresent = driver.findElements(By.yourLocator).size() &gt; 0\n</code></pre>\n\n<p>This will return true if at least one element is found and false if it does not exist.</p>\n"}, {"title": "Casperjs/PhantomJs vs Selenium", "question_body": "<p>We are using Selenium to automate our <code>UI</code> testing. Recently we have seen majority of our users using Chrome. So we wanted to know - pros and cons of using PhantomJS vs Selenium:</p>\n\n<ul>\n<li>Is there any real advantage in terms of performance, e.g. time taken to execute the test cases?</li>\n<li>When should one prefer PhantomJS over Selenium?</li>\n</ul>\n", "link": "https://stackoverflow.com/questions/14099770/casperjs-phantomjs-vs-selenium", "question_id": 14099770, "accepted_answer_id": 14100481, "answer_body": "<p>They are attacking different problems. Since PhantomJS runs perfectly on the command-line, it is suitable as the first layer of smoke testing, whether as part of development workflow and/or in a continuous integration server. Selenium targets multiple browsers and hence it is very useful to ensure cross-browser consistency and carry out extensive testings across different operating systems.</p>\n\n<p>If your web application needs to run on a variety of web browsers, running the UI testing only with PhantomJS will not yield the most test coverage. However, it is perfectly fine to launch PhantomJS and exercise some basic sanity checks before doing the in-depth tests. Imagine the madness of testing a finance application where the login screen is unintentionally broken and non-functional!</p>\n\n<p>Note that the line between the two gets slightly blurred with the recent WebDriver support in the latest PhantomJS. It is now possible to quickly run the tests first using PhantomJS and then (assuming there is no serious error encountered) continue to execute the same tests thoroughly in a Selenium setup.</p>\n"}, {"title": "WatiN or Selenium?", "question_body": "<p>I'm going to start coding some automated tests of our presentation soon. It seems that everyone recommends <a href=\"http://watin.sourceforge.net/index.html\" rel=\"noreferrer\">WatiN</a> and <a href=\"http://seleniumhq.org/\" rel=\"noreferrer\">Selenium</a>. Which do you prefer for automated testing of ASP.NET web forms? Which of these products work better for you?</p>\n\n<p>As a side note, I noticed that WatiN 2.0 has been in CTP since March 2008, is that something to be concerned about?</p>\n", "link": "https://stackoverflow.com/questions/417380/watin-or-selenium", "question_id": 417380, "accepted_answer_id": 417968, "answer_body": "<p>Just want to say that I'm currently working hard on a beta release of WatiN 2.0 somewhere in Q1 of 2009. It will be a major upgrade to the current CTP 2.0 versions and will basically give you the same functionality to automate FireFox and IE as version 1.3.0 offers for automating IE.</p>\n\n<p>So no concerns there.</p>\n\n<p>Hope this helps in making your choice\nJeroen van Menen\nLead dev WatiN</p>\n"}, {"title": "Running Selenium WebDriver python bindings in chrome", "question_body": "<p>I ran into a problem while working with Selenium. For my project, I have to use Chrome. However, I can't connect to that browser after launching it with Selenium.</p>\n\n<p>For some reason, Selenium can't find Chrome by itself. This is what happens when I try to launch Chrome without including a path:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"./obp_pb_get_csv.py\", line 73, in &lt;module&gt;\n    browser = webdriver.Chrome() # Get local session of chrome\n  File \"/usr/lib64/python2.7/site-packages/selenium/webdriver/chrome/webdriver.py\", line 46, in __init__\n    self.service.start()\n  File \"/usr/lib64/python2.7/site-packages/selenium/webdriver/chrome/service.py\", line 58, in start\n    and read up at http://code.google.com/p/selenium/wiki/ChromeDriver\")\nselenium.common.exceptions.WebDriverException: Message: 'ChromeDriver executable needs to be available in the path.                 Please download from http://code.google.com/p/selenium/downloads/list                and read up at http://code.google.com/p/selenium/wiki/ChromeDriver'\n</code></pre>\n\n<p>To solve this problem, I then included the Chromium path in the code that launches Chrome. However, the interpreter fails to find a socket to connect to:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"./obp_pb_get_csv.py\", line 73, in &lt;module&gt;\n    browser = webdriver.Chrome('/usr/bin/chromium') # Get local session of chrome\n  File \"/usr/lib64/python2.7/site-packages/selenium/webdriver/chrome/webdriver.py\", line 46, in __init__\n    self.service.start()\n  File \"/usr/lib64/python2.7/site-packages/selenium/webdriver/chrome/service.py\", line 64, in start\n    raise WebDriverException(\"Can not connect to the ChromeDriver\")\nselenium.common.exceptions.WebDriverException: Message: 'Can not connect to the ChromeDriver'\n</code></pre>\n\n<p>I also tried solving the problem by launching chrome with:</p>\n\n<pre>chromium --remote-shell-port=9222</pre>\n\n<p>However, this did not work either.</p>\n\n<p>PS. Here's some information about my system:</p>\n\n<pre>www-client: chromium 15.0.874.121  \ndev-lang:   python 2.7.2-r3 Selenium 2.11.1  \nOS:         GNU/Linux Gentoo Kernel 3.1.0-gentoo-r1</pre>  \n", "link": "https://stackoverflow.com/questions/8255929/running-selenium-webdriver-python-bindings-in-chrome", "question_id": 8255929, "accepted_answer_id": null}, {"title": "How to select a drop-down menu option value with Selenium (Python)", "question_body": "<p>I need to select an element from a <strong>drop-down</strong> menu.</p>\n\n<p>For example: </p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;select id=\"fruits01\" class=\"select\" name=\"fruits\"&gt;\n  &lt;option value=\"0\"&gt;Choose your fruits:&lt;/option&gt;\n  &lt;option value=\"1\"&gt;Banana&lt;/option&gt;\n  &lt;option value=\"2\"&gt;Mango&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p><strong>1)</strong> First I have to click on it. I do this: </p>\n\n<pre><code>inputElementFruits = driver.find_element_by_xpath(\"//select[id='fruits']\").click()\n</code></pre>\n\n<p><strong>2)</strong> After that I have to select the good element, lets say <code>Mango</code>.</p>\n\n<p>I tried to do it with <code>inputElementFruits.send_keys(...)</code> but it did not work.</p>\n", "link": "https://stackoverflow.com/questions/7867537/how-to-select-a-drop-down-menu-option-value-with-selenium-python", "question_id": 7867537, "accepted_answer_id": 7972225, "answer_body": "<p>Unless your click is firing some kind of ajax call to populate your list, you don't actually need to execute the click.</p>\n\n<p>Just find the element and then enumerate the options, selecting the option(s) you want.</p>\n\n<p>Here is an example:</p>\n\n<pre><code>from selenium import webdriver\nb = webdriver.Firefox()\nb.find_element_by_xpath(\"//select[@name='element_name']/option[text()='option_text']\").click()\n</code></pre>\n\n<p>You can read more in: <br />\n<a href=\"https://sqa.stackexchange.com/questions/1355/unable-to-select-an-option-using-seleniums-python-webdriver\">https://sqa.stackexchange.com/questions/1355/unable-to-select-an-option-using-seleniums-python-webdriver</a></p>\n"}, {"title": "Refreshing web page by WebDriver when waiting for specific condition", "question_body": "<p>I'm looking for more elegant way to refresh webpage during tests (I use Selenium2). \nI just send F5 key but I wonder if driver has method for refreshing entire webpage\nHere is my code </p>\n\n<pre><code>    while(driver.findElements(By.xpath(\"//*[text() = 'READY']\")).size() == 0 )\n        driver.findElement(By.xpath(\"//body\")).sendKeys(Keys.F5);\n        //element appear after text READY is presented      \n    driver.findElement(By.cssSelector(\"div.column a\")).click();    \n</code></pre>\n\n<p>Maybe is some better solution for finding element on manually refreshed page</p>\n", "link": "https://stackoverflow.com/questions/10245641/refreshing-web-page-by-webdriver-when-waiting-for-specific-condition", "question_id": 10245641, "accepted_answer_id": 10253823, "answer_body": "<p>In Java or JavaScript: </p>\n\n<pre><code>driver.navigate().refresh();\n</code></pre>\n\n<p>This should refresh page.</p>\n"}, {"title": "Webdriver Unable to connect to host 127.0.0.1 on port 7055 after 45000 ms", "question_body": "<p>I have box where I run tests. It seems like Jenkins would ssh in and execute commands described in the specific job that's running. </p>\n\n<p>Here I am trying to run my Selenium Webdriver tests, but it tells me that I have errors in launching firefox. The end idea is to run the webtests on this box entirely, and also take some screenshots of errors. </p>\n\n<p>I am using selenium-java-2.25.jar, firefox 10, linux OS.</p>\n\n<p>The funny thing is that I can ssh in manually into the box, temporarily copy the magic cookie from another user on the box (to get an X tunnel), do an <code>export DISPLAY=mydisplay:1.0</code>, then launch my selenium tests using ant. And this will bring up firefox and the tests just fine.</p>\n\n<p>There are various threads here that seem to have the exact same problem, and I think I've tried most of them. Here is what I've done:</p>\n\n<ul>\n<li><p>Reboot the box, log back in with VNC. </p></li>\n<li><p>Placed a bash script in Jenkins to run before running selenium tests. The bash script basically just does an <code>export DISPLAY=mydisplay:1.0</code>. It also executes <code>xclock</code>. This works as I can see xclock being displayed in the VNC. </p></li>\n<li><p>iptables have been turned off</p></li>\n<li><p>firefox is correctly located in /usr/bin/firefox</p></li>\n<li><p>sshd_config shows having X11Forwarding as true.</p></li>\n<li><p>Supposedly downgrading firefox helped some people, but I do not wish to do this. Webdriver should support FF 10 anyway.</p></li>\n</ul>\n\n<p>However, none of the above solves the problem.</p>\n\n<p>It doesn't seem like port 7055 on localhost even exists:</p>\n\n<p><code>netstat -an | grep 7055</code> - Nothing prints</p>\n\n<p>This is what my /etc/hosts says:</p>\n\n<pre><code>  1 127.0.0.1               localhost.localdomain localhost\n  2 ::1             localhost6.localdomain6 localhost6\n</code></pre>\n\n<p>Perhaps it has something to do with localhost:7055 not existing? I am unsure where to go from here. still, why does the error output say it's looking for <code>display: :0.0</code> when I've specified <code>mydisplay:1.0</code>?</p>\n\n<p>And finally the error output I receive:</p>\n\n<pre><code>[testng] org.openqa.selenium.firefox.NotConnectedException: Unable to connect to host 127.0.0.1 on port 7055 after 45000 ms. Firefox console output:\n[testng] Xlib: connection to \":0.0\" refused by server\n[testng] Xlib: No protocol specified\n[testng] \n[testng] Error: cannot open display: :0.0\n[testng] Xlib: connection to \":0.0\" refused by server\n[testng] Xlib: No protocol specified\n[testng] \n[testng] Xlib: connection to \":0.0\" refused by server\n[testng] Xlib: No protocol specified\n[testng] \n[testng] Xlib: connection to \":0.0\" refused by server\n[testng] Xlib: No protocol specified\n[testng] \n[testng] Error: cannot open display: :0.0\n[testng] \n[testng]    at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start(NewProfileExtensionConnection.java:109)\n[testng]    at org.openqa.selenium.firefox.FirefoxDriver.startClient(FirefoxDriver.java:245)\n[testng]    at org.openqa.selenium.remote.RemoteWebDriver.&lt;init&gt;(RemoteWebDriver.java:109)\n[testng]    at org.openqa.selenium.firefox.FirefoxDriver.&lt;init&gt;(FirefoxDriver.java:185)\n[testng]    at org.openqa.selenium.firefox.FirefoxDriver.&lt;init&gt;(FirefoxDriver.java:178)\n[testng]    at org.openqa.selenium.firefox.FirefoxDriver.&lt;init&gt;(FirefoxDriver.java:174)\n[testng]    at org.openqa.selenium.firefox.FirefoxDriver.&lt;init&gt;(FirefoxDriver.java:92)\n[testng]    at com.test.webtest.browser.BrowserFactory.createBrowser(BrowserFactory.java:24)\n[testng]    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[testng]    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n[testng]    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[testng]    at java.lang.reflect.Method.invoke(Method.java:601)\n</code></pre>\n", "link": "https://stackoverflow.com/questions/12588082/webdriver-unable-to-connect-to-host-127-0-0-1-on-port-7055-after-45000-ms", "question_id": 12588082, "accepted_answer_id": null}, {"title": "How do I get current URL in Selenium Webdriver 2 Python?", "question_body": "<p>I'm trying to get the current url after a series of navigations in Selenium. I know there's a command called getLocation for ruby, but I can't find the syntax for Python.</p>\n", "link": "https://stackoverflow.com/questions/15985339/how-do-i-get-current-url-in-selenium-webdriver-2-python", "question_id": 15985339, "accepted_answer_id": 15986028, "answer_body": "<p>Use current_url element. Example:</p>\n\n<pre><code>print browser.current_url\n</code></pre>\n"}, {"title": "Wait until page is loaded with Selenium WebDriver for Python", "question_body": "<p>I want to scrape all the data of a page implemented by a infinite scroll. The following python code works.</p>\n\n<pre><code>for i in range(100):\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    time.sleep(5)\n</code></pre>\n\n<p>This means every time I scroll down to the bottom, I need to wait 5 seconds, which is generally enough for the page to finish loading the newly generated contents. But, this may not be time efficient. The page may finish loading the new contents within 5 seconds. How can I detect whether the page finished loading the new contents every time I scroll down? If I can detect this, I can scroll down again to see more contents once I know the page finished loading. This is more time efficient.</p>\n", "link": "https://stackoverflow.com/questions/26566799/wait-until-page-is-loaded-with-selenium-webdriver-for-python", "question_id": 26566799, "accepted_answer_id": 26567563, "answer_body": "<p>The <code>webdriver</code> will wait for a page to load by default via <code>.get()</code> method.</p>\n\n<p>As you may be looking for some specific element as @user227215 said, you should use <code>WebDriverWait</code> to wait for an element located in your page:</p>\n\n<pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\nfrom selenium.common.exceptions import TimeoutException\n\nbrowser = webdriver.Firefox()\nbrowser.get(\"url\")\ndelay = 3 # seconds\ntry:\n    myElem = WebDriverWait(browser, delay).until(EC.presence_of_element_located((By.ID, 'IdOfMyElement')))\n    print \"Page is ready!\"\nexcept TimeoutException:\n    print \"Loading took too much time!\"\n</code></pre>\n\n<p>I have used it for checking alerts. You can use any other type methods to find the locator. </p>\n\n<p><strong>EDIT 1:</strong></p>\n\n<p>I should mention that the <code>webdriver</code> will wait for a page to load by default. It does not wait for loading inside frames or for ajax requests. It means when you use <code>.get('url')</code>, your browser will wait until the page is completely loaded and then go to the next command in the code. But when you are posting an ajax request, <code>webdriver</code> does not wait and it's your responsibility to wait an appropriate amount of time for the page or a part of page to load; so there is a module named <code>expected_conditions</code>.</p>\n"}, {"title": "How to maximize the browser window in Selenium WebDriver (Selenium 2) using C#?", "question_body": "<p>Is there any way to maximize the browser window using WebDriver (Selenium 2) with C#?</p>\n", "link": "https://stackoverflow.com/questions/3189430/how-to-maximize-the-browser-window-in-selenium-webdriver-selenium-2-using-c", "question_id": 3189430, "accepted_answer_id": 3193143, "answer_body": "<p>There's an outstanding issue to add this functionality to WebDriver, which can be tracked here: <a href=\"http://code.google.com/p/selenium/issues/detail?id=174\" rel=\"noreferrer\">http://code.google.com/p/selenium/issues/detail?id=174</a></p>\n\n<p>A workaround would be to use the <code>JavascriptExector</code> as follows:</p>\n\n<pre><code>public void resizeTest() {\n    driver.Navigate().GoToUrl(\"http://www.example.com/\");\n((IJavaScriptExecutor)driver).ExecuteScript(\"window.resizeTo(1024, 768);\");\n}\n</code></pre>\n"}, {"title": "Selenium wait until document is ready", "question_body": "<p>Can anyone let me how can I make selenium wait until the time the page loads completely? I want something generic, I know I can configure WebDriverWait and call something like 'find' to make it wait but I don't go that far. I just need to test that the page loads successfully and move on to next page to test.</p>\n\n<p>I found something in .net but couldn't make it work in java ...</p>\n\n<pre><code>IWait&lt;IWebDriver&gt; wait = new OpenQA.Selenium.Support.UI.WebDriverWait(driver, TimeSpan.FromSeconds(30.00));\nwait.Until(driver1 =&gt; ((IJavaScriptExecutor)driver).ExecuteScript(\"return document.readyState\").Equals(\"complete\"));\n</code></pre>\n\n<p>Any thoughts anyone?</p>\n", "link": "https://stackoverflow.com/questions/15122864/selenium-wait-until-document-is-ready", "question_id": 15122864, "accepted_answer_id": 15127377, "answer_body": "<p><strong>Try this code:</strong></p>\n\n<pre><code>  driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);\n</code></pre>\n\n<p>The above code will wait up to 10 seconds for page loading. If the page loading exceeds the time it will throw the <code>TimeoutException</code>.  You catch the exception and do your needs. I am not sure whether it quits the page loading after the exception thrown. i didn't try this code yet. Want to just try it.</p>\n\n<p>This is an implicit wait. If you set this once it will have the scope until the Web Driver instance destroy.</p>\n\n<p>See the <a href=\"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebDriver.Timeouts.html\" rel=\"nofollow noreferrer\">documentation for <code>WebDriver.Timeouts</code></a> for more info.</p>\n"}, {"title": "How to perform mouseover function in Selenium WebDriver using Java?", "question_body": "<p>I want to do mouseover function over a drop down menu. When we hover over the menu, it will show the new options.\nI tried to click the new options using the xpath. But cannot click the menus directly.\nSo, as the manual way i am trying to hover over the drop down menu and then will click the new options.</p>\n\n<pre><code>Actions action = new Actions(webdriver);\nWebElement we = webdriver.findElement(By.xpath(\"//html/body/div[13]/ul/li[4]/a\"));\naction.moveToElement(we).build().perform();\n</code></pre>\n", "link": "https://stackoverflow.com/questions/17293914/how-to-perform-mouseover-function-in-selenium-webdriver-using-java", "question_id": 17293914, "accepted_answer_id": 17294390, "answer_body": "<p>Its not really possible to perform a 'mouse hover' action, instead you need to chain all of the actions that you want to achieve in one go. So move to the element that reveals the others, then during the same chain, move to the now revealed element and click on it.</p>\n\n<p>When using Action Chains you have to remember to 'do it like a user would'.</p>\n\n<pre><code>Actions action = new Actions(webdriver);\nWebElement we = webdriver.findElement(By.xpath(\"html/body/div[13]/ul/li[4]/a\"));\naction.moveToElement(we).moveToElement(webdriver.findElement(By.xpath(\"/expression-here\"))).click().build().perform();\n</code></pre>\n"}, {"title": "Error message: &quot;&#39;chromedriver&#39; executable needs to be available in the path&quot;", "question_body": "<p>I am using selenium with python and have downloaded the chromedriver for my windows computer from this site: <a href=\"http://chromedriver.storage.googleapis.com/index.html?path=2.15/\">http://chromedriver.storage.googleapis.com/index.html?path=2.15/</a>   </p>\n\n<p>After downloading the zip file, I unpacked the zip file to my downloads folder. Then I put the path to the executable binary (C:\\Users\\michael\\Downloads\\chromedriver_win32) into the Environment Variable \"Path\".</p>\n\n<p>However, when I run the following code:</p>\n\n<pre><code>  from selenium import webdriver\n\n  driver = webdriver.Chrome()\n</code></pre>\n\n<p>... I keep getting the following error message:</p>\n\n<pre><code>WebDriverException: Message: 'chromedriver' executable needs to be available in the path. Please look at     http://docs.seleniumhq.org/download/#thirdPartyDrivers and read up at http://code.google.com/p/selenium/wiki/ChromeDriver\n</code></pre>\n\n<p>But - as explained above - the executable is(!) in the path ... what is going on here?</p>\n", "link": "https://stackoverflow.com/questions/29858752/error-message-chromedriver-executable-needs-to-be-available-in-the-path", "question_id": 29858752, "accepted_answer_id": 29858817, "answer_body": "<p>You can test if it actually is in the PATH, if you open a cmd and type in <code>chromedriver</code> (assuming your chromedriver executable is still named like this) and hit Enter. If <code>Starting ChromeDriver 2.15.322448</code> is appearing, the PATH is set appropriately and there is something else going wrong.</p>\n\n<p>Alternatively you can use a direct path to the chromedriver like this:</p>\n\n<pre><code> driver = webdriver.Chrome('/path/to/chromedriver') \n</code></pre>\n\n<p>So in your specific case:</p>\n\n<pre><code> driver = webdriver.Chrome(\"C:/Users/michael/Downloads/chromedriver_win32/chromedriver.exe\")\n</code></pre>\n"}, {"title": "WebDriver click() vs JavaScript click()", "question_body": "<p><strong>The Story:</strong></p>\n\n<p>Here on StackOverflow, I've seen users reporting that they cannot click an element via selenium WebDriver \"click\" command and can work around it with a JavaScript click by executing a script. </p>\n\n<p>Example in Python:</p>\n\n<pre><code>element = driver.find_element_by_id(\"myid\")\ndriver.execute_script(\"arguments[0].click();\", element)\n</code></pre>\n\n<p>Example in WebDriverJS/Protractor:</p>\n\n<pre><code>var elm = $(\"#myid\");\nbrowser.executeScript(\"arguments[0].click();\", elm.getWebElement());\n</code></pre>\n\n<p><strong>The Question:</strong></p>\n\n<p>Why is clicking \"via JavaScript\" works when a regular WebDriver click does not? When exactly is this happening and what is the downside of this workaround (if any)?</p>\n\n<p><sup>I personally used this workaround without fully understanding why I have to do it and what problems it can lead to.</sup></p>\n", "link": "https://stackoverflow.com/questions/34562061/webdriver-click-vs-javascript-click", "question_id": 34562061, "accepted_answer_id": 34796379, "answer_body": "<p>Contrarily to what the <a href=\"https://stackoverflow.com/a/34567956/1906307\">currently accepted answer</a> suggests, there's nothing specific to PhantomJS when it comes to the difference between having WebDriver do a click and doing it in JavaScript. </p>\n\n<h3>The Difference</h3>\n\n<p>The essential difference between the two methods is common to all browsers and can be explained pretty simply:</p>\n\n<ul>\n<li><p>WebDriver: <strong>When WebDriver does the click, it attempts as best as it can to simulate what happens when a real user uses the browser.</strong> Suppose you have an element A which is a button that says \"Click me\" and an element B which is a <code>div</code> element which is transparent but has its dimensions and <code>zIndex</code> set so that it completely covers A. Then you tell WebDriver to click A. WebDriver will simulate the click so that B receives the click <em>first</em>. Why? Because B covers A, and if a user were to try to click on A, then B would get the event first. Whether or not A would eventually get the click event depends on how B handles the event. At any rate, the behavior with WebDriver in this case is the same as when a real user tries to click on A.</p></li>\n<li><p>JavaScript: Now, suppose you use JavaScript to do <code>A.click()</code>. <strong>This method of clicking does not reproduce what really happens when the user tries to click A.</strong> JavaScript sends the <code>click</code> event directly to A, and B will not get any event.</p></li>\n</ul>\n\n<h3>Why a JavaScript Click Works When a WebDriver Click Does Not?</h3>\n\n<p>As I mentioned above WebDriver will try to simulate as best it can what happens when a real user is using a browser. The fact of the matter is that the DOM can contain elements that a user cannot interact with, and WebDriver won't allow you to click on these element. Besides the overlapping case I mentioned, this also entails that invisible elements cannot be clicked. A common case I see in Stack Overflow questions is someone who is trying to interact with a GUI element that already exists in the DOM but becomes visible only when some other element has been manipulated. This sometimes happens with dropdown menus: you have to first click on the button the brings up the dropdown before a menu item can be selected. If someone tries to click the menu item before the menu is visible, WebDriver will balk and say that the element cannot be manipulated. <strong>If the person then tries to do it with JavaScript, it will work because the event is delivered directly to the element, irrespective of visibility.</strong></p>\n\n<h3>When Should You Use JavaScript for Clicking?</h3>\n\n<p>If you are using Selenium for <em>testing an application</em>, my answer to this question is <strong>\"almost never\".</strong> By and large, your Selenium test should reproduce what a user would do with the browser. Taking the example of the drop down menu: a test should click on the button that brings up the drop down first, and then click on the menu item. If there is a problem with the GUI because the button is invisible, or the button fails to show the menu items, or something similar, then your test will fail and you'll have detected the bug. <strong>If you use JavaScript to click around, you won't be able to detect these bugs through automated testing.</strong> </p>\n\n<p>I say \"almost never\" because there may be exceptions where it makes sense to use JavaScript. They should be very rare, though.</p>\n\n<p>If you are using Selenium for <em>scraping sites</em>, then it is not as critical to attempt to reproduce user behavior. So using JavaScript to bypass the GUI is less of an issue.</p>\n"}, {"title": "Clear text from textarea with selenium", "question_body": "<p>I've got some tests where I'm checking that the proper error message appears when text in certain fields are invalid.  One check for validity is that a certain textarea element is not empty.</p>\n\n<p>If this textarea already has text in it, how can I tell selenium to clear the field?</p>\n\n<p>something like:</p>\n\n<pre><code>driver.get_element_by_id('foo').clear_field()\n</code></pre>\n", "link": "https://stackoverflow.com/questions/7732125/clear-text-from-textarea-with-selenium", "question_id": 7732125, "accepted_answer_id": 7809907, "answer_body": "<pre><code>driver.find_element_by_id('foo').clear()\n</code></pre>\n"}, {"title": "Using XPATH to search text containing &amp;nbsp;", "question_body": "<p>I use <a href=\"http://xpath.alephzarro.com/\" rel=\"noreferrer\">XPather Browser</a> to check my XPATH expressions on an HTML page.</p>\n\n<p>My end goal is to use these expressions in Selenium for the testing of my user interfaces.</p>\n\n<p>I got an HTML file with a content similar to this:</p>\n\n<pre>\n&lt;tr&gt;\n  &lt;td&gt;abc&lt;/td&gt;\n  &lt;td&gt;&amp;nbsp;&lt;/td&gt;\n&lt;/tr&gt;\n</pre>\n\n<p>I want to select a node with a text containing the string \"<code>&amp;nbsp;</code>\".</p>\n\n<p>With a normal string like \"abc\" there is no problem.  I use an XPATH similar to <code>//td[text()=\"abc\"]</code>.</p>\n\n<p>When I try with an an XPATH like <code>//td[text()=\"&amp;nbsp;\"]</code> it returns nothing.  Is there a special rule concerning texts with \"<code>&amp;</code>\" ?</p>\n", "link": "https://stackoverflow.com/questions/247135/using-xpath-to-search-text-containing-nbsp", "question_id": 247135, "accepted_answer_id": 247903, "answer_body": "<p>It seems that <a href=\"http://www.openqa.org/\" rel=\"noreferrer\">OpenQA</a>, guys behind Selenium, have already addressed this problem.  They defined some variables to explicitely match whitespaces.  In my case, I need to use an XPATH similar to <code>//td[text()=\"${nbsp}\"]</code>.</p>\n\n<p>I reproduced here the text from OpenQA concerning this issue (found <a href=\"https://svn.openqa.org/svn/selenium-core/trunk/src/main/resources/doctool/doc2html.xml\" rel=\"noreferrer\">here</a>):</p>\n\n<blockquote>\n  <p>HTML automatically normalizes\n  whitespace within elements, ignoring\n  leading/trailing spaces and converting\n  extra spaces, tabs and newlines into a\n  single space. When Selenium reads text\n  out of the page, it attempts to\n  duplicate this behavior, so you can\n  ignore all the tabs and newlines in\n  your HTML and do assertions based on\n  how the text looks in the browser when\n  rendered. We do this by replacing all\n  non-visible whitespace (including the\n  non-breaking space \"<code>&amp;nbsp;</code>\") with a\n  single space. All visible newlines\n  (<code>&lt;br&gt;</code>, <code>&lt;p&gt;</code>, and <code>&lt;pre&gt;</code> formatted\n  new lines) should be preserved.</p>\n  \n  <p>We use the same normalization logic on\n  the text of HTML Selenese test case\n  tables. This has a number of\n  advantages. First, you don't need to\n  look at the HTML source of the page to\n  figure out what your assertions should\n  be; \"<code>&amp;nbsp;</code>\" symbols are invisible\n  to the end user, and so you shouldn't\n  have to worry about them when writing\n  Selenese tests. (You don't need to put\n  \"<code>&amp;nbsp;</code>\" markers in your test case\n  to assertText on a field that contains\n  \"<code>&amp;nbsp;</code>\".) You may also put extra\n  newlines and spaces in your Selenese\n  <code>&lt;td&gt;</code> tags; since we use the same\n  normalization logic on the test case\n  as we do on the text, we can ensure\n  that assertions and the extracted text\n  will match exactly.</p>\n  \n  <p>This creates a bit of a problem on\n  those rare occasions when you really\n  want/need to insert extra whitespace\n  in your test case. For example, you\n  may need to type text in a field like\n  this: \"<code>foo</code>   \". But if you simply\n  write <code>&lt;td&gt;foo   &lt;/td&gt;</code> in your\n  Selenese test case, we'll replace your\n  extra spaces with just one space.</p>\n  \n  <p>This problem has a simple workaround.\n  We've defined a variable in Selenese,\n  <code>${space}</code>, whose value is a single\n  space. You can use <code>${space}</code> to\n  insert a space that won't be\n  automatically trimmed, like this:\n  <code>&lt;td&gt;foo${space}${space}${space}&lt;/td&gt;</code>.\n  We've also included a variable\n  <code>${nbsp}</code>, that you can use to insert\n  a non-breaking space.</p>\n  \n  <p>Note that XPaths do <em>not</em> normalize\n  whitespace the way we do. If you need\n  to write an XPath like\n  <code>//div[text()=\"hello world\"]</code> but the\n  HTML of the link is really\n  \"<code>hello&amp;nbsp;world</code>\", you'll need to\n  insert a real \"<code>&amp;nbsp;</code>\" into your\n  Selenese test case to get it to match,\n  like this:\n  <code>//div[text()=\"hello${nbsp}world\"]</code>.</p>\n</blockquote>\n"}]