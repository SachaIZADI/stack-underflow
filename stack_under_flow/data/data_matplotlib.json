[{"title": "How do you change the size of figures drawn with matplotlib?", "question_body": "<p>How do you change the size of figure drawn with matplotlib?</p>\n", "link": "https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib", "question_id": 332289, "accepted_answer_id": null}, {"title": "Save plot to image file instead of displaying it using Matplotlib", "question_body": "<p>I am writing a quick-and-dirty script to generate plots on the fly. I am using the code below (from <a href=\"http://en.wikipedia.org/wiki/Matplotlib\" rel=\"noreferrer\">Matplotlib</a> documentation) as a starting point:</p>\n\n<pre><code>from pylab import figure, axes, pie, title, show\n\n# Make a square figure and axes\nfigure(1, figsize=(6, 6))\nax = axes([0.1, 0.1, 0.8, 0.8])\n\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nfracs = [15, 30, 45, 10]\n\nexplode = (0, 0.05, 0, 0)\npie(fracs, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True)\ntitle('Raining Hogs and Dogs', bbox={'facecolor': '0.8', 'pad': 5})\n\nshow()  # Actually, don't show, just save to foo.png\n</code></pre>\n\n<p>I don't want to display the plot on a GUI, instead, I want to save the plot to a file (say foo.png), so that, for example, it can be used in batch scripts. How do I do that?</p>\n", "link": "https://stackoverflow.com/questions/9622163/save-plot-to-image-file-instead-of-displaying-it-using-matplotlib", "question_id": 9622163, "accepted_answer_id": 9890599, "answer_body": "<p>While the question has been answered, I'd like to add some useful tips when using <a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html#matplotlib.pyplot.savefig\" rel=\"noreferrer\">matplotlib.pyplot.savefig</a>. The file format can be specified by the extension:</p>\n\n<pre><code>from matplotlib import pyplot as plt\n\nplt.savefig('foo.png')\nplt.savefig('foo.pdf')\n</code></pre>\n\n<p>Will give a rasterized or vectorized output respectively, both which could be useful. In addition, you'll find that <code>pylab</code> leaves a generous, often undesirable, whitespace around the image. Remove it with:</p>\n\n<pre><code>savefig('foo.png', bbox_inches='tight')\n</code></pre>\n"}, {"title": "How to put the legend out of the plot", "question_body": "<p>I have a series of 20 plots (not subplots) to be made in a single figure.  I want the legend to be outside of the box.  At the same time, I do not want to change the axes, as the size of the figure gets reduced.  Kindly help me for the following queries:</p>\n\n<ol>\n<li>I want to keep the legend box outside the plot area. (I want the legend to be outside at the right side of the plot area).</li>\n<li>Is there anyway that I reduce the font size of the text inside the legend box, so that the size of the legend box will be small.</li>\n</ol>\n", "link": "https://stackoverflow.com/questions/4700614/how-to-put-the-legend-out-of-the-plot", "question_id": 4700614, "accepted_answer_id": 4700674, "answer_body": "<p>You can make the legend text smaller by creating font properties:</p>\n\n<pre><code>from matplotlib.font_manager import FontProperties\n\nfontP = FontProperties()\nfontP.set_size('small')\nlegend([plot1], \"title\", prop=fontP) \n# or add prop=fontP to whatever legend() call you already have\n</code></pre>\n"}, {"title": "How to make IPython notebook matplotlib plot inline", "question_body": "<p>I am trying to use IPython notebook on MacOS X with Python 2.7.2 and IPython 1.1.0.</p>\n\n<p>I cannot get matplotlib graphics to show up inline.</p>\n\n<pre><code>import matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline  \n</code></pre>\n\n<p>I have also tried <code>%pylab inline</code> and the ipython command line arguments <code>--pylab=inline</code> but this makes no difference.</p>\n\n<pre><code>x = np.linspace(0, 3*np.pi, 500)\nplt.plot(x, np.sin(x**2))\nplt.title('A simple chirp')\nplt.show()\n</code></pre>\n\n<p>Instead of inline graphics, I get this:</p>\n\n<pre><code>&lt;matplotlib.figure.Figure at 0x110b9c450&gt;\n</code></pre>\n\n<p>And <code>matplotlib.get_backend()</code> shows that I have the <code>'module://IPython.kernel.zmq.pylab.backend_inline'</code> backend.</p>\n", "link": "https://stackoverflow.com/questions/19410042/how-to-make-ipython-notebook-matplotlib-plot-inline", "question_id": 19410042, "accepted_answer_id": 24884342, "answer_body": "<p>I used <code>%matplotlib inline</code> in the first cell of the notebook and it works. I think you should try:</p>\n\n<pre><code>%matplotlib inline\n\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n\n<p>You can also always start all your IPython kernels in inline mode by default by setting the following config options in your config files:</p>\n\n<pre><code>c.IPKernelApp.matplotlib=&lt;CaselessStrEnum&gt;\n  Default: None\n  Choices: ['auto', 'gtk', 'gtk3', 'inline', 'nbagg', 'notebook', 'osx', 'qt', 'qt4', 'qt5', 'tk', 'wx']\n  Configure matplotlib for interactive use with the default matplotlib backend.\n</code></pre>\n"}, {"title": "Installation Issue with matplotlib Python", "question_body": "<p>I have issue after installing the <strong>matplotlib</strong> package unable to <strong>import matplotlib.pyplot as plt</strong>. Any suggestion will be greatly appreciate.  </p>\n\n<pre><code>&gt;&gt;&gt; import matplotlib.pyplot as plt\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"//anaconda/lib/python2.7/site-packages/matplotlib-1.3.1-py2.7-macosx-10.5-x86_64.egg/matplotlib/pyplot.py\", line 98, in &lt;module&gt;\n    _backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup()\n  File \"//anaconda/lib/python2.7/site-packages/matplotlib-1.3.1-py2.7-macosx-10.5-x86_64.egg/matplotlib/backends/__init__.py\", line 28, in pylab_setup\n    globals(),locals(),[backend_name],0)\n  File \"//anaconda/lib/python2.7/site-packages/matplotlib-1.3.1-py2.7-macosx-10.5-x86_64.egg/matplotlib/backends/backend_macosx.py\", line 21, in &lt;module&gt;\n    from matplotlib.backends import _macosx\n**RuntimeError**: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework. See the Python documentation for more information on installing Python as a framework on Mac OS X. Please either reinstall Python as a framework, or try one of the other backends.\n</code></pre>\n", "link": "https://stackoverflow.com/questions/21784641/installation-issue-with-matplotlib-python", "question_id": 21784641, "accepted_answer_id": 21789908, "answer_body": "<p><strong>Problem Cause</strong> \nIn mac os image rendering back end of matplotlib (what-is-a-backend to render using the API of Cocoa by default). There is Qt4Agg and GTKAgg and as a back-end is not the default. Set the back end of macosx that is differ compare with other windows or linux os. </p>\n\n<p>I resolve this issue following ways:</p>\n\n<ul>\n<li>I assume you have installed the pip matplotlib, there is a directory in you root called <code>~/.matplotlib</code>. </li>\n<li>Create a file <code>~/.matplotlib/matplotlibrc</code> there and add the following code: <code>backend: TkAgg</code></li>\n</ul>\n\n<p>From this <a href=\"http://matplotlib.org/examples/index.html\" rel=\"nofollow noreferrer\">link</a> you can try different diagram. </p>\n"}, {"title": "When to use cla(), clf() or close() for clearing a plot in matplotlib?", "question_body": "<p>Matplotlib offers there functions:</p>\n\n<pre><code>cla()   # Clear axis\nclf()   # Clear figure\nclose() # Close a figure window\n</code></pre>\n\n<p>The documentation doesn't offer a lot of insight into what the difference between these functions is. When should I use each function and what exactly does it do?</p>\n", "link": "https://stackoverflow.com/questions/8213522/when-to-use-cla-clf-or-close-for-clearing-a-plot-in-matplotlib", "question_id": 8213522, "accepted_answer_id": 8228808, "answer_body": "<p>They all do different things, since matplotlib uses a hierarchical order in which a figure window contains a figure which may consist of many axes. Additionally, there are functions from the pyplot interface and there are methods on the <code>Figure</code> class. I will discuss both cases below.</p>\n\n<h2>pyplot interface</h2>\n\n<p><code>pyplot</code> is a module that collects a couple of functions that allow matplotlib to be used in a functional manner. I here assume that <code>pyplot</code> has been imported as <code>import matplotlib.pyplot as plt</code>.\nIn this case, there are three different commands that remove stuff:</p>\n\n<p><a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.cla\" rel=\"noreferrer\"><code>plt.cla()</code> clears an axes</a>, i.e. the currently active axes in the current figure. It leaves the other axes untouched.</p>\n\n<p><a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.clf\" rel=\"noreferrer\"><code>plt.clf()</code> clears the entire current figure</a> with all its axes, but leaves the window opened, such that it may be reused for other plots.</p>\n\n<p><a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.close\" rel=\"noreferrer\"><code>plt.close()</code> closes a window</a>, which will be the current window, if not specified otherwise.</p>\n\n<p>Which functions suits you best depends thus on your use-case.</p>\n\n<p>The <code>close()</code> function furthermore allows one to specify which window should be closed. The argument can either be a number or name given to a window when it was created using <code>figure(number_or_name)</code> or it can be a figure instance <code>fig</code> obtained, i.e., using<code>fig = figure()</code>. If no argument is given to <code>close()</code>, the currently active window will be closed. Furthermore, there is the syntax <code>close('all')</code>, which closes all figures.</p>\n\n<h2>methods of the Figure class</h2>\n\n<p>Additionally, the <code>Figure</code> class provides methods for clearing figures.\nI'll assume in the following that <code>fig</code> is an instance of a <code>Figure</code>:</p>\n\n<p><a href=\"http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure.clf\" rel=\"noreferrer\"><code>fig.clf()</code> clears the entire figure</a>. This call is equivalent to <code>plt.clf()</code> only if <code>fig</code> is the current figure.</p>\n\n<p><code>fig.clear()</code> is a synonym for <code>fig.clf()</code></p>\n\n<p>Note that even <code>del fig</code> will not close the associated figure window. As far as I know the only way to close a figure window is using <code>plt.close(fig)</code> as described above.</p>\n"}, {"title": "How to change the font size on a matplotlib plot", "question_body": "<p>How does one change the font size for all elements (ticks, labels, title) on a matplotlib plot?</p>\n\n<p>I know how to change the tick label sizes, this is done with:</p>\n\n<pre><code>import matplotlib \nmatplotlib.rc('xtick', labelsize=20) \nmatplotlib.rc('ytick', labelsize=20) \n</code></pre>\n\n<p>But how does one change the rest?</p>\n", "link": "https://stackoverflow.com/questions/3899980/how-to-change-the-font-size-on-a-matplotlib-plot", "question_id": 3899980, "accepted_answer_id": 3900167, "answer_body": "<p>From the <a href=\"http://matplotlib.sourceforge.net/api/matplotlib_configuration_api.html#matplotlib.rc\" rel=\"noreferrer\">matplotlib documentation</a>, </p>\n\n<pre><code>font = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 22}\n\nmatplotlib.rc('font', **font)\n</code></pre>\n\n<p>This sets the font of all items to the font specified by the kwargs object, <code>font</code>.</p>\n\n<p>Alternatively, you could also use the <code>rcParams</code> <code>update</code> method as suggested in <a href=\"https://stackoverflow.com/a/6441839/605121\">this answer</a>:</p>\n\n<pre><code>matplotlib.rcParams.update({'font.size': 22})\n</code></pre>\n\n<p>or</p>\n\n<pre><code>import matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 22})\n</code></pre>\n\n<p>You can find a full list of available properties on the <a href=\"http://matplotlib.org/users/customizing.html\" rel=\"noreferrer\">Customizing matplotlib page</a>.</p>\n"}, {"title": "How do I set the figure title and axes labels font size in Matplotlib?", "question_body": "<p>I am creating a figure in Matplotlib like this:</p>\n\n<pre><code>from matplotlib import pyplot as plt\n\nfig = plt.figure()\nplt.plot(data)\nfig.suptitle('test title')\nplt.xlabel('xlabel')\nplt.ylabel('ylabel')\nfig.savefig('test.jpg')\n</code></pre>\n\n<p>I want to specify font sizes for the figure title and the axis labels. I need all three to be different font sizes, so setting a global font size (<code>mpl.rcParams['font.size']=x</code>) is not what I want. How do I set font sizes for the figure title and the axis labels individually?</p>\n", "link": "https://stackoverflow.com/questions/12444716/how-do-i-set-the-figure-title-and-axes-labels-font-size-in-matplotlib", "question_id": 12444716, "accepted_answer_id": 12444777, "answer_body": "<p>Functions dealing with text like <code>label</code>, <code>title</code>, etc. accept parameters same as <a href=\"http://matplotlib.org/users/text_props.html\" rel=\"noreferrer\">matplotlib.text.Text</a>. For the font size you can use <code>size/fontsize</code>:</p>\n\n<pre><code>from matplotlib import pyplot as plt    \n\nfig = plt.figure()\nplt.plot(data)\nfig.suptitle('test title', fontsize=20)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=16)\nfig.savefig('test.jpg')\n</code></pre>\n\n<p>For globally setting <code>title</code> and <code>label</code> sizes, <a href=\"http://matplotlib.org/users/customizing.html\" rel=\"noreferrer\"><code>mpl.rcParams</code></a> contains <code>axes.titlesize</code> and <code>axes.labelsize</code>. (From the page):</p>\n\n<pre><code>axes.titlesize      : large   # fontsize of the axes title\naxes.labelsize      : medium  # fontsize of the x any y labels\n</code></pre>\n\n<p>(As far as I can see, there is no way to set <code>x</code> and <code>y</code> label sizes separately.)</p>\n\n<p>And I see that <code>axes.titlesize</code> does not affect <code>suptitle</code>. I guess, you need to set that manually.</p>\n"}, {"title": "In Matplotlib, what does the argument mean in fig.add_subplot(111)?", "question_body": "<p>Sometimes I come across code such as this:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\nfig = plt.figure()\nfig.add_subplot(111)\nplt.scatter(x, y)\nplt.show()\n</code></pre>\n\n<p>Which produces:</p>\n\n<p><img src=\"https://i.stack.imgur.com/yCOG3.png\" alt=\"Example plot produced by the included code\"></p>\n\n<p>I've been reading the documentation like crazy but I can't find an explanation for the <code>111</code>. sometimes I see a <code>212</code>.</p>\n\n<p>What does the argument of <code>fig.add_subplot()</code> mean?</p>\n", "link": "https://stackoverflow.com/questions/3584805/in-matplotlib-what-does-the-argument-mean-in-fig-add-subplot111", "question_id": 3584805, "accepted_answer_id": 3584933, "answer_body": "<p>These are subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\".</p>\n\n<p>Alternative form for <code>add_subplot(111)</code> is <code>add_subplot(1, 1, 1)</code>.</p>\n"}, {"title": "Changing the &quot;tick frequency&quot; on x or y axis in matplotlib?", "question_body": "<p>I am trying to fix how python plots my data.</p>\n\n<p>Say </p>\n\n<pre><code>x = [0,5,9,10,15]\n</code></pre>\n\n<p>and </p>\n\n<pre><code>y = [0,1,2,3,4]\n</code></pre>\n\n<p>Then I would do:</p>\n\n<pre><code>matplotlib.pyplot.plot(x,y)\nmatplotlib.pyplot.show()\n</code></pre>\n\n<p>and the x axis' ticks are plotted in intervals of 5. Is there a way to make it show intervals of 1?</p>\n", "link": "https://stackoverflow.com/questions/12608788/changing-the-tick-frequency-on-x-or-y-axis-in-matplotlib", "question_id": 12608788, "accepted_answer_id": 12608937, "answer_body": "<p>You could explicitly set where you want to tick marks with <code>plt.xticks</code>:</p>\n\n<pre><code>plt.xticks(np.arange(min(x), max(x)+1, 1.0))\n</code></pre>\n\n<hr>\n\n<p>For example,</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nx = [0,5,9,10,15]\ny = [0,1,2,3,4]\nplt.plot(x,y)\nplt.xticks(np.arange(min(x), max(x)+1, 1.0))\nplt.show()\n</code></pre>\n\n<hr>\n\n<p>(<code>np.arange</code> was used rather than Python's <code>range</code> function just in case <code>min(x)</code> and <code>max(x)</code> are floats instead of ints.) </p>\n\n<hr>\n\n<p>The <code>plt.plot</code> (or <code>ax.plot</code>) function will automatically set default <code>x</code> and <code>y</code> limits. If you wish to keep those limits, and just change the stepsize of the tick marks, then you could use <code>ax.get_xlim()</code> to discover what limits Matplotlib has already set. </p>\n\n<pre><code>start, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, stepsize))\n</code></pre>\n\n<p>The default tick formatter should do a decent job rounding the tick values to a sensible number of significant digits. However, if you wish to have more control over the format, you can define your own formatter. For example,</p>\n\n<pre><code>ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))\n</code></pre>\n\n<p>Here's a runnable example:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nx = [0,5,9,10,15]\ny = [0,1,2,3,4]\nfig, ax = plt.subplots()\nax.plot(x,y)\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 0.712123))\nax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))\nplt.show()\n</code></pre>\n"}, {"title": "setting y-axis limit in matplotlib", "question_body": "<p>I need help with setting the limits of y-axis on matplotlib. Here is the code that I tried, unsuccessfully.</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nplt.figure(1, figsize = (8.5,11))\nplt.suptitle('plot title')\nax = []\naPlot = plt.subplot(321, axisbg = 'w', title = \"Year 1\")\nax.append(aPlot)\nplt.plot(paramValues,plotDataPrice[0], color = '#340B8C', \n     marker = 'o', ms = 5, mfc = '#EB1717')\nplt.xticks(paramValues)\nplt.ylabel('Average Price')\nplt.xlabel('Mark-up')\nplt.grid(True)\nplt.ylim((25,250))\n</code></pre>\n\n<p>With the data I have for this plot, I get y-axis limits of 20 and 200. However, I want the limits 20 and 250.</p>\n", "link": "https://stackoverflow.com/questions/3777861/setting-y-axis-limit-in-matplotlib", "question_id": 3777861, "accepted_answer_id": null}, {"title": "Purpose of &quot;%matplotlib inline&quot;", "question_body": "<p>Could someone explain to me what exactly is the use of <code>%matplotlib inline</code>? </p>\n", "link": "https://stackoverflow.com/questions/43027980/purpose-of-matplotlib-inline", "question_id": 43027980, "accepted_answer_id": null}, {"title": "Hiding axis text in matplotlib plots", "question_body": "<p>I'm trying to plot a figure without tickmarks or numbers on either of the axes (I use axes in the traditional sense, not the matplotlib nomenclature!). An issue I have come across is where matplotlib adjusts the x(y)ticklabels by subtracting a value N, then adds N at the end of the axis.</p>\n\n<p>This may be vague, but the following simplified example highlights the issue, with '6.18' being the offending value of N:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport random\nprefix = 6.18\n\nrx = [prefix+(0.001*random.random()) for i in arange(100)]\nry = [prefix+(0.001*random.random()) for i in arange(100)]\nplt.plot(rx,ry,'ko')\n\nframe1 = plt.gca()\nfor xlabel_i in frame1.axes.get_xticklabels():\n    xlabel_i.set_visible(False)\n    xlabel_i.set_fontsize(0.0)\nfor xlabel_i in frame1.axes.get_yticklabels():\n    xlabel_i.set_fontsize(0.0)\n    xlabel_i.set_visible(False)\nfor tick in frame1.axes.get_xticklines():\n    tick.set_visible(False)\nfor tick in frame1.axes.get_yticklines():\n    tick.set_visible(False)\n\nplt.show()\n</code></pre>\n\n<p>The three things I would like to know are:</p>\n\n<ol>\n<li><p>How to turn off this behaviour in the first place (although in most cases it is useful, it is not always!) I have looked through <code>matplotlib.axis.XAxis</code> and cannot find anything appropriate</p></li>\n<li><p>How can I make N disappear (i.e. <code>X.set_visible(False)</code>)</p></li>\n<li><p>Is there a better way to do the above anyway? My final plot would be 4x4 subplots in a figure, if that is relevant.</p></li>\n</ol>\n", "link": "https://stackoverflow.com/questions/2176424/hiding-axis-text-in-matplotlib-plots", "question_id": 2176424, "accepted_answer_id": 2176591, "answer_body": "<p>Instead of hiding each element, you can hide the whole axis:</p>\n\n<pre><code>frame1.axes.get_xaxis().set_visible(False)\nframe1.axes.get_yaxis().set_visible(False)\n</code></pre>\n\n<p>Or, you can set the ticks to an empty list:</p>\n\n<pre><code>frame1.axes.get_xaxis().set_ticks([])\nframe1.axes.get_yaxis().set_ticks([])\n</code></pre>\n\n<p>In this second option, you can still use <code>plt.xlabel()</code> and <code>plt.ylabel()</code> to add labels to the axes.</p>\n"}, {"title": "Plot logarithmic axes with matplotlib in python", "question_body": "<p>I want to plot a graph with one logarithmic axis using matplotlib. </p>\n\n<p>I've been reading the docs, but can't figure out the syntax. I know that it's probably something simple like <code>'scale=linear'</code> in the plot arguments, but I can't seem to get it right</p>\n\n<p>Sample program: </p>\n\n<pre><code>import pylab\nimport matplotlib.pyplot as plt\na = [pow(10, i) for i in range(10)]\nfig = plt.figure()\nax = fig.add_subplot(2, 1, 1)\n\nline, = ax.plot(a, color='blue', lw=2)\npylab.show()\n</code></pre>\n", "link": "https://stackoverflow.com/questions/773814/plot-logarithmic-axes-with-matplotlib-in-python", "question_id": 773814, "accepted_answer_id": null}, {"title": "Generating a PNG with matplotlib when DISPLAY is undefined", "question_body": "<p>I am trying to use networkx with Python. When I run this program it get this error. Is there anything missing?</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport networkx as nx\nimport matplotlib\nimport matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\nG=nx.Graph()\nG.add_node(1)\nG.add_nodes_from([2,3,4,5,6,7,8,9,10])\n#nx.draw_graphviz(G)\n#nx_write_dot(G, 'node.png')\nnx.draw(G)\nplt.savefig(\"/var/www/node.png\")\n\n\nTraceback (most recent call last):\n  File \"graph.py\", line 13, in &lt;module&gt;\n    nx.draw(G)\n  File \"/usr/lib/pymodules/python2.5/networkx/drawing/nx_pylab.py\", line 124, in draw\n    cf=pylab.gcf()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 276, in gcf\n    return figure()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 254, in figure\n    **kwargs)\n  File \"/usr/lib/pymodules/python2.5/matplotlib/backends/backend_tkagg.py\", line 90, in new_figure_manager\n    window = Tk.Tk()\n  File \"/usr/lib/python2.5/lib-tk/Tkinter.py\", line 1650, in __init__\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n</code></pre>\n\n<hr>\n\n<p>I get a different error now:</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport networkx as nx\nimport matplotlib\nimport matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\nmatplotlib.use('Agg')\n\nG=nx.Graph()\nG.add_node(1)\nG.add_nodes_from([2,3,4,5,6,7,8,9,10])\n#nx.draw_graphviz(G)\n#nx_write_dot(G, 'node.png')\nnx.draw(G)\nplt.savefig(\"/var/www/node.png\")\n</code></pre>\n\n<hr>\n\n<pre><code>/usr/lib/pymodules/python2.5/matplotlib/__init__.py:835: UserWarning:  This call to matplotlib.use() has no effect\nbecause the the backend has already been chosen;\nmatplotlib.use() must be called *before* pylab, matplotlib.pyplot,\nor matplotlib.backends is imported for the first time.\n\n  if warn: warnings.warn(_use_error_msg)\nTraceback (most recent call last):\n  File \"graph.py\", line 15, in &lt;module&gt;\n    nx.draw(G)\n  File \"/usr/lib/python2.5/site-packages/networkx-1.2.dev-py2.5.egg/networkx/drawing/nx_pylab.py\", line 124, in draw\n    cf=pylab.gcf()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 276, in gcf\n    return figure()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 254, in figure\n    **kwargs)\n  File \"/usr/lib/pymodules/python2.5/matplotlib/backends/backend_tkagg.py\", line 90, in new_figure_manager\n    window = Tk.Tk()\n  File \"/usr/lib/python2.5/lib-tk/Tkinter.py\", line 1650, in __init__\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n</code></pre>\n\n<hr>\n\n<p>I get a different error now:</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport networkx as nx\nimport matplotlib\nimport matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\nmatplotlib.use('Agg')\n\nG=nx.Graph()\nG.add_node(1)\nG.add_nodes_from([2,3,4,5,6,7,8,9,10])\n#nx.draw_graphviz(G)\n#nx_write_dot(G, 'node.png')\nnx.draw(G)\nplt.savefig(\"/var/www/node.png\")\n</code></pre>\n\n<hr>\n\n<pre><code>/usr/lib/pymodules/python2.5/matplotlib/__init__.py:835: UserWarning:  This call to matplotlib.use() has no effect\nbecause the the backend has already been chosen;\nmatplotlib.use() must be called *before* pylab, matplotlib.pyplot,\nor matplotlib.backends is imported for the first time.\n\n  if warn: warnings.warn(_use_error_msg)\nTraceback (most recent call last):\n  File \"graph.py\", line 15, in &lt;module&gt;\n    nx.draw(G)\n  File \"/usr/lib/python2.5/site-packages/networkx-1.2.dev-py2.5.egg/networkx/drawing/nx_pylab.py\", line 124, in draw\n    cf=pylab.gcf()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 276, in gcf\n    return figure()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 254, in figure\n    **kwargs)\n  File \"/usr/lib/pymodules/python2.5/matplotlib/backends/backend_tkagg.py\", line 90, in new_figure_manager\n    window = Tk.Tk()\n  File \"/usr/lib/python2.5/lib-tk/Tkinter.py\", line 1650, in __init__\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n</code></pre>\n", "link": "https://stackoverflow.com/questions/2801882/generating-a-png-with-matplotlib-when-display-is-undefined", "question_id": 2801882, "accepted_answer_id": 3054314, "answer_body": "<p>The main problem is that (on your system) matplotlib chooses an x-using backend by default. I just had the same problem on one of my servers.  The solution for me was to add the following code in a place that gets read <em>before</em> any other pylab/matplotlib/<strong>pyplot</strong> import:</p>\n\n<pre><code>import matplotlib\n# Force matplotlib to not use any Xwindows backend.\nmatplotlib.use('Agg')\n</code></pre>\n\n<p>The alternative is to set it in your .matplotlibrc</p>\n"}, {"title": "pyplot scatter plot marker size", "question_body": "<p>In the pyplot document for scatter plot:</p>\n\n<pre><code>matplotlib.pyplot.scatter(x, y, s=20, c='b', marker='o', cmap=None, norm=None,\n                          vmin=None, vmax=None, alpha=None, linewidths=None,\n                          faceted=True, verts=None, hold=None, **kwargs)\n</code></pre>\n\n<p>The marker size</p>\n\n<blockquote>\n  <p>s:\n  size in points^2. It is a scalar or an array of the same length as x and y.</p>\n</blockquote>\n\n<p>What kind of unit is <code>points^2</code>? What does it mean? Does <code>s=100</code> mean <code>10 pixel x 10 pixel</code>?</p>\n\n<p>Basically I'm trying to make scatter plots with different marker sizes, and I want to figure out what does the <code>s</code> number mean.</p>\n", "link": "https://stackoverflow.com/questions/14827650/pyplot-scatter-plot-marker-size", "question_id": 14827650, "accepted_answer_id": 14860958, "answer_body": "<p>This can be a somewhat confusing way of defining the size but you are basically specifying the <em>area</em> of the marker. This means, to double the width (or height) of the marker you need to increase <code>s</code> by a factor of 4. [because A = W<em>H => (2W)</em>(2H)=4A] </p>\n\n<p>There is a reason, however, that the size of markers is defined in this way. Because of the scaling of area as the square of width, doubling the width actually appears to increase the size by more than a factor 2 (in fact it increases it by a factor of 4). To see this consider the following two examples and the output they produce.</p>\n\n<pre><code># doubling the width of markers\nx = [0,2,4,6,8,10]\ny = [0]*len(x)\ns = [20*4**n for n in range(len(x))]\nplt.scatter(x,y,s=s)\nplt.show()\n</code></pre>\n\n<p>gives</p>\n\n<p><img src=\"https://i.stack.imgur.com/m8xcU.png\" alt=\"enter image description here\"></p>\n\n<p>Notice how the size increases very quickly. If instead we have</p>\n\n<pre><code># doubling the area of markers\nx = [0,2,4,6,8,10]\ny = [0]*len(x)\ns = [20*2**n for n in range(len(x))]\nplt.scatter(x,y,s=s)\nplt.show()\n</code></pre>\n\n<p>gives</p>\n\n<p><img src=\"https://i.stack.imgur.com/Znaw8.png\" alt=\"enter image description here\"></p>\n\n<p>Now the apparent size of the markers increases roughly linearly in an intuitive fashion.</p>\n\n<p>As for the exact meaning of what a 'point' is, it is fairly arbitrary for plotting purposes, you can just scale all of your sizes by a constant until they look reasonable. </p>\n\n<p>Hope this helps!</p>\n\n<p><strong>Edit:</strong> (In response to comment from @Emma)</p>\n\n<p>It's probably confusing wording on my part. The question asked about doubling the width of a circle so in the first picture for each circle (as we move from left to right) it's width is double the previous one so for the area this is an exponential with base 4. Similarly the second example each circle has <em>area</em> double the last one which gives an exponential with base 2.</p>\n\n<p>However it is the second example (where we are scaling area) that doubling area appears to make the circle twice as big to the eye. Thus if we want a circle to appear a factor of <code>n</code> bigger we would increase the area by a factor <code>n</code> not the radius so the apparent size scales linearly with the area.</p>\n"}, {"title": "How to change legend size with matplotlib.pyplot", "question_body": "<p>Simple question here:  I'm trying to get the size of my legend using <code>matplotlib.pyplot</code> to be smaller (i.e., the text to be smaller). The code I'm using goes something like this:</p>\n\n<pre><code>plot.figure()\nplot.scatter(k, sum_cf, color='black', label='Sum of Cause Fractions')\nplot.scatter(k, data[:, 0],  color='b', label='Dis 1: cf = .6, var = .2')\nplot.scatter(k, data[:, 1],  color='r',  label='Dis 2: cf = .2, var = .1')\nplot.scatter(k, data[:, 2],  color='g', label='Dis 3: cf = .1, var = .01')\nplot.legend(loc=2)\n</code></pre>\n", "link": "https://stackoverflow.com/questions/7125009/how-to-change-legend-size-with-matplotlib-pyplot", "question_id": 7125009, "accepted_answer_id": 7125157, "answer_body": "<p>You can set an individual font size for the legend by adjusting the <code>prop</code> keyword. </p>\n\n<pre><code>plot.legend(loc=2, prop={'size': 6})\n</code></pre>\n\n<p>This takes a dictionary of keywords corresponding to <code>matplotlib.font_manager.FontProperties</code> properties. See the <a href=\"http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.legend\" rel=\"noreferrer\">documentation for legend</a>:</p>\n\n<blockquote>\n  <p>Keyword arguments:</p>\n\n<pre><code>prop: [ None | FontProperties | dict ]\n    A matplotlib.font_manager.FontProperties instance. If prop is a \n    dictionary, a new instance will be created with prop. If None, use\n    rc settings.\n</code></pre>\n</blockquote>\n\n<p>It is also possible, as of version <a href=\"http://matplotlib.org/api/legend_api.html#matplotlib.legend.Legend\" rel=\"noreferrer\">1.2.1</a>, to use the keyword <code>fontsize</code>.</p>\n"}, {"title": "Python, Matplotlib, subplot: How to set the axis range?", "question_body": "<p>How can I set the y axis range of the second subplot to e.g. [0,1000] ?\nThe FFT plot of my data (a column in a text file) results in a (inf.?) spike so that the actual data is not visible.</p>\n\n<pre><code>pylab.ylim([0,1000])\n</code></pre>\n\n<p>has no effect, unfortunately. This is the whole script:</p>\n\n<pre><code># based on http://www.swharden.com/blog/2009-01-21-signal-filtering-with-python/\nimport numpy, scipy, pylab, random\n\nxs = []\nrawsignal = []\nwith open(\"test.dat\", 'r') as f:\n      for line in f:\n            if line[0] != '#' and len(line) &gt; 0:\n                xs.append( int( line.split()[0] ) )\n                rawsignal.append( int( line.split()[1] ) )\n\nh, w = 3, 1\npylab.figure(figsize=(12,9))\npylab.subplots_adjust(hspace=.7)\n\npylab.subplot(h,w,1)\npylab.title(\"Signal\")\npylab.plot(xs,rawsignal)\n\npylab.subplot(h,w,2)\npylab.title(\"FFT\")\nfft = scipy.fft(rawsignal)\n#~ pylab.axis([None,None,0,1000])\npylab.ylim([0,1000])\npylab.plot(abs(fft))\n\npylab.savefig(\"SIG.png\",dpi=200)\npylab.show()\n</code></pre>\n\n<p>Other improvements are also appreciated!</p>\n", "link": "https://stackoverflow.com/questions/2849286/python-matplotlib-subplot-how-to-set-the-axis-range", "question_id": 2849286, "accepted_answer_id": null}, {"title": "Secondary axis with twinx(): how to add to legend?", "question_body": "<p>I have a plot with two y-axes, using <code>twinx()</code>. I also give labels to the lines, and want to show them with <code>legend()</code>, but I only succeed to get the labels of one axis in the legend:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nrc('mathtext', default='regular')\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(time, Swdown, '-', label = 'Swdown')\nax.plot(time, Rn, '-', label = 'Rn')\nax2 = ax.twinx()\nax2.plot(time, temp, '-r', label = 'temp')\nax.legend(loc=0)\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20,100)\nplt.show()\n</code></pre>\n\n<p>So I only get the labels of the first axis in the legend, and not the label 'temp' of the second axis. How could I add this third label to the legend?</p>\n\n<p><img src=\"https://i.stack.imgur.com/MdCYW.png\" alt=\"enter image description here\"></p>\n", "link": "https://stackoverflow.com/questions/5484922/secondary-axis-with-twinx-how-to-add-to-legend", "question_id": 5484922, "accepted_answer_id": 5487005, "answer_body": "<p>You can easily add a second legend by adding the line:</p>\n\n<pre><code>ax2.legend(loc=0)\n</code></pre>\n\n<p>You'll get this:</p>\n\n<p><img src=\"https://i.stack.imgur.com/DLZkF.png\" alt=\"enter image description here\"></p>\n\n<p>But if you want all labels on one legend then you should do something like this:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nrc('mathtext', default='regular')\n\ntime = np.arange(10)\ntemp = np.random.random(10)*30\nSwdown = np.random.random(10)*100-10\nRn = np.random.random(10)*100-10\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nlns1 = ax.plot(time, Swdown, '-', label = 'Swdown')\nlns2 = ax.plot(time, Rn, '-', label = 'Rn')\nax2 = ax.twinx()\nlns3 = ax2.plot(time, temp, '-r', label = 'temp')\n\n# added these three lines\nlns = lns1+lns2+lns3\nlabs = [l.get_label() for l in lns]\nax.legend(lns, labs, loc=0)\n\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20,100)\nplt.show()\n</code></pre>\n\n<p>Which will give you this:</p>\n\n<p><img src=\"https://i.stack.imgur.com/Z8pg4.png\" alt=\"enter image description here\"></p>\n"}, {"title": "Why is my xlabel cut off in my matplotlib plot?", "question_body": "<p>I am plotting a dataset using <code>matplotlib</code> where I have an xlabel that is quite \"tall\" (it's a formula rendered in TeX that contains a fraction and is therefore has the height equivalent of a couple of lines of text).</p>\n\n<p>In any case, the bottom of the formula is always cut off when I draw the figures.  Changing figure size doesn't seem to help this, and I haven't been able to figure out how to shift the x-axis \"up\" to make room for the xlabel.  Something like that would be a reasonable temporary solution, but what would be nice would be to have a way to make matplotlib recognize automatically that the label is cut off and resize accordingly.</p>\n\n<p>Here's an example of what I mean:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nplt.figure()\nplt.ylabel(r'$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$')\nplt.xlabel(r'$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$')\nplt.show()\n</code></pre>\n\n<p>while you can see the entire ylabel, the xlabel is cut off at the bottom. </p>\n\n<p>In the case this is a machine-specific problem, I am running this on OSX 10.6.8 with matplotlib 1.0.0</p>\n", "link": "https://stackoverflow.com/questions/6774086/why-is-my-xlabel-cut-off-in-my-matplotlib-plot", "question_id": 6774086, "accepted_answer_id": 6776578, "answer_body": "<p>Use:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nplt.gcf().subplots_adjust(bottom=0.15)\n</code></pre>\n\n<p>to make room for the label.</p>\n\n<p>Edit:</p>\n\n<p>Since i gave the answer, <code>matplotlib</code> has added the <strong><code>tight_layout()</code></strong> function.\nSo i suggest to use it:</p>\n\n<pre><code>plt.tight_layout()\n</code></pre>\n\n<p>should make room for the xlabel.</p>\n"}, {"title": "Matplotlib make tick labels font size smaller", "question_body": "<p>In a matplotlib figure, how can I make the font size for the tick labels using <code>ax1.set_xticklabels()</code> smaller?</p>\n\n<p>Further, how can one rotate it from horizontal to vertical?</p>\n", "link": "https://stackoverflow.com/questions/6390393/matplotlib-make-tick-labels-font-size-smaller", "question_id": 6390393, "accepted_answer_id": 6390584, "answer_body": "<p>Please note that newer versions of MPL have a shortcut for this task. An example is shown in the other answer to this question: <a href=\"https://stackoverflow.com/a/11386056/42346\">https://stackoverflow.com/a/11386056/42346</a></p>\n\n<p>The code below is for illustrative purposes and may not necessarily be optimized.</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\ndef xticklabels_example():\n    fig = plt.figure() \n\n    x = np.arange(20)\n    y1 = np.cos(x)\n    y2 = (x**2)\n    y3 = (x**3)\n    yn = (y1,y2,y3)\n    COLORS = ('b','g','k')\n\n    for i,y in enumerate(yn):\n        ax = fig.add_subplot(len(yn),1,i+1)\n\n        ax.plot(x, y, ls='solid', color=COLORS[i]) \n\n        if i != len(yn) - 1:\n            # all but last \n            ax.set_xticklabels( () )\n        else:\n            for tick in ax.xaxis.get_major_ticks():\n                tick.label.set_fontsize(14) \n                # specify integer or one of preset strings, e.g.\n                #tick.label.set_fontsize('x-small') \n                tick.label.set_rotation('vertical')\n\n    fig.suptitle('Matplotlib xticklabels Example')\n    plt.show()\n\nif __name__ == '__main__':\n    xticklabels_example()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/lRp5U.png\" alt=\"enter image description here\"></p>\n"}, {"title": "Rotate axis text in python matplotlib", "question_body": "<p>I can't figure out how to rotate the text on the X Axis.  Its a time stamp, so as the number of samples increase, they get closer and closer until they overlap.  I'd like to rotate the text 90 degrees so as the samples get closer together, they aren't overlapping.</p>\n\n<p>Below is what I have, it works fine with the exception that I can't figure out how to rotate the X axis text.</p>\n\n<pre><code>import sys\n\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nimport datetime\n\nfont = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 8}\n\nmatplotlib.rc('font', **font)\n\nvalues = open('stats.csv', 'r').readlines()\n\ntime = [datetime.datetime.fromtimestamp(float(i.split(',')[0].strip())) for i in values[1:]]\ndelay = [float(i.split(',')[1].strip()) for i in values[1:]]\n\nplt.plot(time, delay)\nplt.grid(b='on')\n\nplt.savefig('test.png')\n</code></pre>\n", "link": "https://stackoverflow.com/questions/10998621/rotate-axis-text-in-python-matplotlib", "question_id": 10998621, "accepted_answer_id": null}, {"title": "Improve subplot size/spacing with many subplots in matplotlib", "question_body": "<p>Very similar to <a href=\"https://stackoverflow.com/questions/2418125/matplotlib-subplots-adjust-hspace-so-titles-and-xlabels-dont-overlap\">this question</a> but with the difference that my figure can be as large as it needs to be.</p>\n\n<p>I need to generate a whole bunch of vertically-stacked plots in matplotlib. The result will be saved using figsave and viewed on a webpage, so I don't care how tall the final image is as long as the subplots are spaced so they don't overlap. </p>\n\n<p>No matter how big I allow the figure to be, the subplots always seem to overlap.</p>\n\n<p>My code currently looks like</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport my_other_module\n\ntitles, x_lists, y_lists = my_other_module.get_data()\n\nfig = plt.figure(figsize=(10,60))\nfor i, y_list in enumerate(y_lists):\n    plt.subplot(len(titles), 1, i)\n    plt.xlabel(\"Some X label\")\n    plt.ylabel(\"Some Y label\")\n    plt.title(titles[i])\n    plt.plot(x_lists[i],y_list)\nfig.savefig('out.png', dpi=100)\n</code></pre>\n", "link": "https://stackoverflow.com/questions/6541123/improve-subplot-size-spacing-with-many-subplots-in-matplotlib", "question_id": 6541123, "accepted_answer_id": 9827848, "answer_body": "<p>Try using <a href=\"http://matplotlib.sourceforge.net/users/tight_layout_guide.html\" rel=\"noreferrer\"><code>plt.tight_layout</code></a></p>\n\n<p>As a quick example:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(nrows=4, ncols=4)\nfig.tight_layout() # Or equivalently,  \"plt.tight_layout()\"\n\nplt.show()\n</code></pre>\n\n<hr>\n\n<p>Without Tight Layout</p>\n\n<p><img src=\"https://i.stack.imgur.com/roV9q.png\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<p>With Tight Layout\n<img src=\"https://i.stack.imgur.com/ouSJi.png\" alt=\"enter image description here\"></p>\n"}, {"title": "Is there a way to detach matplotlib plots so that the computation can continue?", "question_body": "<p>After these instructions in the Python interpreter one gets a window with a plot:</p>\n\n<pre><code>from matplotlib.pyplot import *\nplot([1,2,3])\nshow()\n# other code\n</code></pre>\n\n<p>Unfortunately, I don't know how to continue to interactively explore the figure created by <code>show()</code> while the program does further calculations.</p>\n\n<p>Is it possible at all? Sometimes calculations are long and it would help if they would proceed during examination of intermediate results.</p>\n", "link": "https://stackoverflow.com/questions/458209/is-there-a-way-to-detach-matplotlib-plots-so-that-the-computation-can-continue", "question_id": 458209, "accepted_answer_id": 458295, "answer_body": "<p>Use <code>matplotlib</code>'s calls that won't block:</p>\n\n<p>Using <code>draw()</code>:</p>\n\n<pre><code>from matplotlib.pyplot import plot, draw, show\nplot([1,2,3])\ndraw()\nprint 'continue computation'\n\n# at the end call show to ensure window won't close.\nshow()\n</code></pre>\n\n<p>Using interactive mode:</p>\n\n<pre><code>from matplotlib.pyplot import plot, ion, show\nion() # enables interactive mode\nplot([1,2,3]) # result shows immediatelly (implicit draw())\n\nprint 'continue computation'\n\n# at the end call show to ensure window won't close.\nshow()\n</code></pre>\n"}, {"title": "Remove xticks in a matplotlib plot?", "question_body": "<p>I have a semilogx plot and I would like to remove the xticks. I tried:</p>\n\n<pre><code>plt.gca().set_xticks([])\nplt.xticks([])\nax.set_xticks([])\n</code></pre>\n\n<p>The grid disappears (ok), but small ticks (at the place of the main ticks) remain. How to remove them?</p>\n", "link": "https://stackoverflow.com/questions/12998430/remove-xticks-in-a-matplotlib-plot", "question_id": 12998430, "accepted_answer_id": 12998531, "answer_body": "<p>The <a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.tick_params\" rel=\"noreferrer\"><code>tick_params</code></a> method is very useful for stuff like this.  This code turns off major and minor ticks and removes the labels from the x-axis.</p>\n\n<pre><code>from matplotlib import pyplot as plt\nplt.plot(range(10))\nplt.tick_params(\n    axis='x',          # changes apply to the x-axis\n    which='both',      # both major and minor ticks are affected\n    bottom=False,      # ticks along the bottom edge are off\n    top=False,         # ticks along the top edge are off\n    labelbottom=False) # labels along the bottom edge are off\nplt.show()\nplt.savefig('plot')\nplt.clf()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/0emBv.png\" alt=\"enter image description here\"></p>\n"}, {"title": "matplotlib Legend Markers Only Once", "question_body": "<p>I often plot a point on a matplotlib plot with:</p>\n\n<pre><code>x = 10\ny = 100\nplot(x, y, \"k*\", label=\"Global Optimum\")\nlegend()\n</code></pre>\n\n<p>However, this causes the legend to put a star in the legend twice, such that it looks like:</p>\n\n<pre><code>* * Global Optimum\n</code></pre>\n\n<p>when I really want it to look like:</p>\n\n<pre><code> *  Global Optimum\n</code></pre>\n\n<p>How do I do this?</p>\n", "link": "https://stackoverflow.com/questions/6146778/matplotlib-legend-markers-only-once", "question_id": 6146778, "accepted_answer_id": 6146871, "answer_body": "<p>This should work:</p>\n\n<pre><code>legend(numpoints=1)\n</code></pre>\n\n<p>BTW, if you add the line</p>\n\n<pre><code>legend.numpoints     : 1      # the number of points in the legend line\n</code></pre>\n\n<p>to your matplotlibrc file, then this will be the new default.</p>\n\n<p>[See also scatterpoints, depending on your plot.]</p>\n\n<p>API: <a href=\"http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.legend\" rel=\"noreferrer\">Link to API docs</a></p>\n"}, {"title": "Named colors in matplotlib", "question_body": "<p>What named colors are available in matplotlib for use in plots?  I can find a list on the matplotlib documentation that claims that these are the only names:</p>\n\n<pre><code>b: blue\ng: green\nr: red\nc: cyan\nm: magenta\ny: yellow\nk: black\nw: white\n</code></pre>\n\n<p>However, I've found that these colors can also be used, at least in this context:</p>\n\n<pre><code>scatter(X,Y, color='red')\nscatter(X,Y, color='orange')\nscatter(X,Y, color='darkgreen')\n</code></pre>\n\n<p>but these are not on the above list.  Does anyone know an exhaustive list of the named colors that are available?</p>\n", "link": "https://stackoverflow.com/questions/22408237/named-colors-in-matplotlib", "question_id": 22408237, "accepted_answer_id": 37232760, "answer_body": "<p>I constantly forget the names of the colors I want to use and keep coming back to this question =)</p>\n\n<p>The previous answers are great, but I find it a bit difficult to get an overview of the available colors from the posted image. I prefer the colors to be grouped with similar colors, so I slightly tweaked the <a href=\"http://matplotlib.org/examples/color/named_colors.html\" rel=\"noreferrer\">matplotlib answer</a> that was mentioned in a comment above to get a color list sorted in columns. The order is not identical to how I would sort by eye, but I think it gives a good overview.</p>\n\n<p><em>I updated the image and code to reflect that 'rebeccapurple' has been added and the three sage colors have been moved under the 'xkcd:' prefix since I posted this answer originally.</em></p>\n\n<p><a href=\"https://i.stack.imgur.com/lFZum.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lFZum.png\" alt=\"enter image description here\"></a></p>\n\n<p>I really didn't change much from the matplotlib example, but here is the code for completeness.</p>\n\n<pre><code>import matplotlib.pyplot as plt\nfrom matplotlib import colors as mcolors\n\n\ncolors = dict(mcolors.BASE_COLORS, **mcolors.CSS4_COLORS)\n\n# Sort colors by hue, saturation, value and name.\nby_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgba(color)[:3])), name)\n                for name, color in colors.items())\nsorted_names = [name for hsv, name in by_hsv]\n\nn = len(sorted_names)\nncols = 4\nnrows = n // ncols\n\nfig, ax = plt.subplots(figsize=(12, 10))\n\n# Get height and width\nX, Y = fig.get_dpi() * fig.get_size_inches()\nh = Y / (nrows + 1)\nw = X / ncols\n\nfor i, name in enumerate(sorted_names):\n    row = i % nrows\n    col = i // nrows\n    y = Y - (row * h) - h\n\n    xi_line = w * (col + 0.05)\n    xf_line = w * (col + 0.25)\n    xi_text = w * (col + 0.3)\n\n    ax.text(xi_text, y, name, fontsize=(h * 0.8),\n            horizontalalignment='left',\n            verticalalignment='center')\n\n    ax.hlines(y + h * 0.1, xi_line, xf_line,\n              color=colors[name], linewidth=(h * 0.8))\n\nax.set_xlim(0, X)\nax.set_ylim(0, Y)\nax.set_axis_off()\n\nfig.subplots_adjust(left=0, right=1,\n                    top=1, bottom=0,\n                    hspace=0, wspace=0)\nplt.show()\n</code></pre>\n\n<hr>\n\n<h2>Additional named colors</h2>\n\n<p><em>Updated 2017-10-25. I merged my previous updates into this section.</em></p>\n\n<h3>xkcd</h3>\n\n<p>If you would like to use additional named colors when plotting with matplotlib, you can use the <a href=\"http://xkcd.com/color/rgb/\" rel=\"noreferrer\">xkcd crowdsourced color names</a>, via the 'xkcd:' prefix:</p>\n\n<pre><code>plt.plot([1,2], lw=4, c='xkcd:baby poop green')\n</code></pre>\n\n<p>Now you have access to a plethora of named colors!</p>\n\n<p><a href=\"https://i.stack.imgur.com/nCk6u.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/nCk6u.jpg\" alt=\"enter image description here\"></a></p>\n\n<h3>Tableau</h3>\n\n<p>The default Tableau colors are available in matplotlib via the 'tab:' prefix:</p>\n\n<pre><code>plt.plot([1,2], lw=4, c='tab:green')\n</code></pre>\n\n<p>There are ten distinct colors:</p>\n\n<p><a href=\"https://i.stack.imgur.com/K6Q8n.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/K6Q8n.png\" alt=\"enter image description here\"></a></p>\n\n<h3>HTML</h3>\n\n<p>You can also plot colors by their <a href=\"https://www.computerhope.com/tips/tip143.htm\" rel=\"noreferrer\">HTML hex code</a>:</p>\n\n<pre><code>plt.plot([1,2], lw=4, c='#8f9805')\n</code></pre>\n\n<p>This is more similar to specifying and RGB tuple rather than a named color (apart from the fact that the hex code is passed as a string), and I will not include an image of the 16 million colors you can choose from...</p>\n\n<hr>\n\n<p>For more details, please refer to <a href=\"https://matplotlib.org/users/colors.html\" rel=\"noreferrer\">the matplotlib colors documentation</a> and the source file specifying the available colors, <a href=\"https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/_color_data.py\" rel=\"noreferrer\"><code>_color_data.py</code></a>.</p>\n\n<hr>\n"}, {"title": "Matplotlib plots: removing axis, legends and white spaces", "question_body": "<p>I'm new to Python and Matplotlib, I would like to simply apply colormap to an image and write the resulting image, without using axes, labels, titles or anything usually automatically added by matplotlib. Here is what I did:</p>\n\n<pre><code>def make_image(inputname,outputname):\n    data = mpimg.imread(inputname)[:,:,0]\n    fig = plt.imshow(data)\n    fig.set_cmap('hot')\n    fig.axes.get_xaxis().set_visible(False)\n    fig.axes.get_yaxis().set_visible(False)\n    plt.savefig(outputname)\n</code></pre>\n\n<p>It successfully removes the axis of the figure, but the figure saved presents a white padding and a frame around the actual image.\nHow can I remove them (at least the white padding)? Thanks</p>\n", "link": "https://stackoverflow.com/questions/9295026/matplotlib-plots-removing-axis-legends-and-white-spaces", "question_id": 9295026, "accepted_answer_id": 9295472, "answer_body": "<p>I think that the command <code>axis('off')</code> takes care of one of the problems more succinctly than changing each axis and the border separately. It still leaves the white space around the border however. Adding <code>bbox_inches='tight'</code> to the <code>savefig</code> command almost gets you there, you can see in the example below that the white space left is much smaller, but still present.</p>\n\n<p>Note that newer versions of matplotlib may require <code>bbox_inches=0</code> instead of the string <code>'tight'</code> (via @episodeyang and @kadrach) </p>\n\n<pre><code>from numpy import random\nimport matplotlib.pyplot as plt\n\ndata = random.random((5,5))\nimg = plt.imshow(data, interpolation='nearest')\nimg.set_cmap('hot')\nplt.axis('off')\nplt.savefig(\"test.png\", bbox_inches='tight')\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/4ZMuW.png\" alt=\"enter image description here\"></p>\n"}, {"title": "Reverse Y-Axis in PyPlot", "question_body": "<p>I have a scatter plot graph with a bunch of random x, y coordinates. Currently the Y-Axis starts at 0 and goes up to the max value. I would like the Y-Axis to start at the max value and go up to 0.</p>\n\n<pre><code>points = [(10,5), (5,11), (24,13), (7,8)]    \nx_arr = []\ny_arr = []\nfor x,y in points:\n    x_arr.append(x)\n    y_arr.append(y)\nplt.scatter(x_arr,y_arr)\n</code></pre>\n", "link": "https://stackoverflow.com/questions/2051744/reverse-y-axis-in-pyplot", "question_id": 2051744, "accepted_answer_id": 8280500, "answer_body": "<p>There is a new API that makes this even simpler.</p>\n\n<pre><code>plt.gca().invert_xaxis()\n</code></pre>\n\n<p>and/or</p>\n\n<pre><code>plt.gca().invert_yaxis()\n</code></pre>\n"}, {"title": "How to put individual tags for a scatter plot", "question_body": "<p>I am trying to do a scatter plot in matplotlib and I couldn't find a way to add tags to the points. For example:</p>\n\n<pre><code>scatter1=plt.scatter(data1[\"x\"], data1[\"y\"], marker=\"o\",\n                     c=\"blue\",\n                     facecolors=\"white\",\n                     edgecolors=\"blue\")\n</code></pre>\n\n<p>I want for the points in \"y\" to have labels as \"point 1\", \"point 2\", etc. I couldn't figure it out.</p>\n", "link": "https://stackoverflow.com/questions/5147112/how-to-put-individual-tags-for-a-scatter-plot", "question_id": 5147112, "accepted_answer_id": 5147430, "answer_body": "<p>Perhaps use <a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.annotate\">plt.annotate</a>:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nN = 10\ndata = np.random.random((N, 4))\nlabels = ['point{0}'.format(i) for i in range(N)]\n\nplt.subplots_adjust(bottom = 0.1)\nplt.scatter(\n    data[:, 0], data[:, 1], marker='o', c=data[:, 2], s=data[:, 3] * 1500,\n    cmap=plt.get_cmap('Spectral'))\n\nfor label, x, y in zip(labels, data[:, 0], data[:, 1]):\n    plt.annotate(\n        label,\n        xy=(x, y), xytext=(-20, 20),\n        textcoords='offset points', ha='right', va='bottom',\n        bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),\n        arrowprops=dict(arrowstyle = '-&gt;', connectionstyle='arc3,rad=0'))\n\nplt.show()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/b5uhP.png\" alt=\"enter image description here\"></p>\n"}]