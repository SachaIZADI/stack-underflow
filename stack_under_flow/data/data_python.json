[{"title": "What does the &quot;yield&quot; keyword do?", "question_body": "<p>What is the use of the <code>yield</code> keyword in Python? What does it do?</p>\n\n<p>For example, I'm trying to understand this code<sup><strong>1</strong></sup>:</p>\n\n<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild  \n</code></pre>\n\n<p>And this is the caller:</p>\n\n<pre><code>result, candidates = [], [self]\nwhile candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\nreturn result\n</code></pre>\n\n<p>What happens when the method <code>_get_child_candidates</code> is called?\nIs a list returned? A single element? Is it called again? When will subsequent calls stop?</p>\n\n<hr>\n\n<p><sub>\n1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"http://well-adjusted.de/~jrschulz/mspace/\" rel=\"noreferrer\">Module mspace</a>.</sub></p>\n", "link": "https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do", "question_id": 231767, "accepted_answer_id": 231855, "answer_body": "<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before you can understand generators, you must understand <em>iterables</em>.</p>\n\n<h2>Iterables</h2>\n\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n1\n2\n3\n</code></pre>\n\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>Everything you can use \"<code>for... in...</code>\" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\n\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n\n<h2>Generators</h2>\n\n<p>Generators are iterators, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))\n&gt;&gt;&gt; for i in mygenerator:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n\n<h2>Yield</h2>\n\n<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n\n<pre><code>&gt;&gt;&gt; def createGenerator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n&gt;&gt;&gt; mygenerator = createGenerator() # create a generator\n&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!\n&lt;generator object createGenerator at 0xb7555c34&gt;\n&gt;&gt;&gt; for i in mygenerator:\n...     print(i)\n0\n1\n4\n</code></pre>\n\n<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>\n\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\n\n<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>\n\n<p>Now the hard part:</p>\n\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each other call will run the loop you have written in the function one more time, and return the next value until there is no value to return.</p>\n\n<p>The generator is considered empty once the function runs, but does not hit <code>yield</code> anymore. It can be because the loop had come to an end, or because you do not satisfy an <code>\"if/else\"</code> anymore.</p>\n\n<hr>\n\n<h2>Your code explained</h2>\n\n<p><em>Generator:</em></p>\n\n<pre><code># Here you create the method of the node object that will return the generator\ndef _get_child_candidates(self, distance, min_dist, max_dist):\n\n    # Here is the code that will be called each time you use the generator object:\n\n    # If there is still a child of the node object on its left\n    # AND if the distance is ok, return the next child\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n\n    # If there is still a child of the node object on its right\n    # AND if the distance is ok, return the next child\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild\n\n    # If the function arrives here, the generator will be considered empty\n    # there is no more than two values: the left and the right children\n</code></pre>\n\n<p><em>Caller:</em></p>\n\n<pre><code># Create an empty list and a list with the current object reference\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\nwhile candidates:\n\n    # Get the last candidate and remove it from the list\n    node = candidates.pop()\n\n    # Get the distance between obj and the candidate\n    distance = node._get_dist(obj)\n\n    # If distance is ok, then you can fill the result\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n\n    # Add the children of the candidate in the candidate's list\n    # so the loop will keep running until it will have looked\n    # at all the children of the children of the children, etc. of the candidate\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n</code></pre>\n\n<p>This code contains several smart parts:</p>\n\n<ul>\n<li><p>The loop iterates on a list, but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhaust all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p></li>\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\n</ul>\n\n<p>Usually we pass a list to it:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = [3, 4]\n&gt;&gt;&gt; a.extend(b)\n&gt;&gt;&gt; print(a)\n[1, 2, 3, 4]\n</code></pre>\n\n<p>But in your code, it gets a generator, which is good because:</p>\n\n<ol>\n<li>You don't need to read the values twice.</li>\n<li>You may have a lot of children and you don't want them all stored in memory.</li>\n</ol>\n\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...</p>\n\n<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\n\n<h2>Controlling a generator exhaustion</h2>\n\n<pre><code>&gt;&gt;&gt; class Bank(): # Let's create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self):\n...        while not self.crisis:\n...            yield \"$100\"\n&gt;&gt;&gt; hsbc = Bank() # When everything's ok the ATM gives you as much as you want\n&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])\n['$100', '$100', '$100', '$100', '$100']\n&gt;&gt;&gt; hsbc.crisis = True # Crisis is coming, no more money!\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # It's even true for new ATMs\n&gt;&gt;&gt; print(wall_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # Build a new one to get back in business\n&gt;&gt;&gt; for cash in brand_new_atm:\n...    print cash\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n...\n</code></pre>\n\n<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>\n\n<p>It can be useful for various things like controlling access to a resource.</p>\n\n<h2>Itertools, your best friend</h2>\n\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>\n\n<p>Then just <code>import itertools</code>.</p>\n\n<p>An example? Let's see the possible orders of arrival for a four-horse race:</p>\n\n<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]\n&gt;&gt;&gt; races = itertools.permutations(horses)\n&gt;&gt;&gt; print(races)\n&lt;itertools.permutations object at 0xb754f1dc&gt;\n&gt;&gt;&gt; print(list(itertools.permutations(horses)))\n[(1, 2, 3, 4),\n (1, 2, 4, 3),\n (1, 3, 2, 4),\n (1, 3, 4, 2),\n (1, 4, 2, 3),\n (1, 4, 3, 2),\n (2, 1, 3, 4),\n (2, 1, 4, 3),\n (2, 3, 1, 4),\n (2, 3, 4, 1),\n (2, 4, 1, 3),\n (2, 4, 3, 1),\n (3, 1, 2, 4),\n (3, 1, 4, 2),\n (3, 2, 1, 4),\n (3, 2, 4, 1),\n (3, 4, 1, 2),\n (3, 4, 2, 1),\n (4, 1, 2, 3),\n (4, 1, 3, 2),\n (4, 2, 1, 3),\n (4, 2, 3, 1),\n (4, 3, 1, 2),\n (4, 3, 2, 1)]\n</code></pre>\n\n<h2>Understanding the inner mechanisms of iteration</h2>\n\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n\n<p>There is more about it in this article about <a href=\"http://effbot.org/zone/python-for-statement.htm\" rel=\"noreferrer\">how <code>for</code> loops work</a>.</p>\n"}, {"title": "Does Python have a ternary conditional operator?", "question_body": "<p>If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?</p>\n", "link": "https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator", "question_id": 394809, "accepted_answer_id": 394814, "answer_body": "<p>Yes, it was <a href=\"https://mail.python.org/pipermail/python-dev/2005-September/056846.html\" rel=\"noreferrer\" title=\"[Python-Dev] Conditional Expression Resolution\">added</a> in version 2.5. The expression syntax is:</p>\n\n<pre><code>a if condition else b\n</code></pre>\n\n<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href=\"https://en.wikipedia.org/wiki/Boolean_data_type\" rel=\"noreferrer\" title=\"Boolean data type\">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>\n\n<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; 'true' if True else 'false'\n'true'\n&gt;&gt;&gt; 'true' if False else 'false'\n'false'\n</code></pre>\n\n<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use assignment statements or <code>pass</code> or other <strong>statements</strong> within a conditional <strong>expression</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; pass if False else x = 3\n  File \"&lt;stdin&gt;\", line 1\n    pass if False else x = 3\n          ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>You can, however, use conditional expressions to assign a variable like so:</p>\n\n<pre><code>x = a if True else b\n</code></pre>\n\n<p>Think of the conditional expression as switching between two values. It is very useful when you're in a 'one value or another' situation, it but doesn't do much else.</p>\n\n<p>If you need to use statements, you have to use a normal <code>if</code> <strong>statement</strong> instead of a conditional <strong>expression</strong>.</p>\n\n<hr>\n\n<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>\n\n<ul>\n<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, Javascript, etc.), which may lead to bugs when people unfamiliar with Python's \"surprising\" behaviour use it (they may reverse the argument order).</li>\n<li>Some find it \"unwieldy\", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>\n<li>Stylistic reasons. (Although the 'inline <code>if</code>' can be <em>really</em> useful, and make your script more concise, it really does complicate your code)</li>\n</ul>\n\n<p>If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>\n\n<p>Official documentation:     </p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\" title=\"Conditional expressions\">Conditional expressions</a></li>\n<li><a href=\"https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" rel=\"noreferrer\" title=\"Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?\">Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?</a></li>\n</ul>\n"}, {"title": "What does if __name__ == &quot;__main__&quot;: do?", "question_body": "<p>What does the <code>if __name__ == \"__main__\":</code> do?</p>\n\n<pre><code># Threading example\nimport time, thread\n\ndef myfunction(string, sleeptime, lock, *args):\n    while True:\n        lock.acquire()\n        time.sleep(sleeptime)\n        lock.release()\n        time.sleep(sleeptime)\n\nif __name__ == \"__main__\":\n    lock = thread.allocate_lock()\n    thread.start_new_thread(myfunction, (\"Thread #: 1\", 2, lock))\n    thread.start_new_thread(myfunction, (\"Thread #: 2\", 2, lock))\n</code></pre>\n", "link": "https://stackoverflow.com/questions/419163/what-does-if-name-main-do", "question_id": 419163, "accepted_answer_id": 419185, "answer_body": "<p>Whenever the Python interpreter reads a source file, it does two things:</p>\n\n<ul>\n<li><p>it sets a few special variables like <code>__name__</code>, and then</p></li>\n<li><p>it executes all of the code found in the file.</p></li>\n</ul>\n\n<p>Let's see how this works and how it relates to your question about the <code>__name__</code> checks we always see in Python scripts.</p>\n\n<h1>Code Sample</h1>\n\n<p>Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called <code>foo.py</code>.</p>\n\n<pre><code># Suppose this is foo.py.\n\nprint(\"before import\")\nimport math\n\nprint(\"before functionA\")\ndef functionA():\n    print(\"Function A\")\n\nprint(\"before functionB\")\ndef functionB():\n    print(\"Function B {}\".format(math.sqrt(100)))\n\nprint(\"before __name__ guard\")\nif __name__ == '__main__':\n    functionA()\n    functionB()\nprint(\"after __name__ guard\")\n</code></pre>\n\n<h1>Special Variables</h1>\n\n<p>When the Python interpeter reads a source file, it first defines a few special variables. In this case, we care about the <code>__name__</code> variable.</p>\n\n<p><strong>When Your Module Is the Main Program</strong></p>\n\n<p>If you are running your module (the source file) as the main program, e.g.</p>\n\n<pre><code>python foo.py\n</code></pre>\n\n<p>the interpreter will assign the hard-coded string <code>\"__main__\"</code> to the <code>__name__</code> variable, i.e.</p>\n\n<pre><code># It's as if the interpreter inserts this at the top\n# of your module when run as the main program.\n__name__ = \"__main__\" \n</code></pre>\n\n<p><strong>When Your Module Is Imported By Another</strong></p>\n\n<p>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</p>\n\n<pre><code># Suppose this is in some other main program.\nimport foo\n</code></pre>\n\n<p>In this case, the interpreter will look at the filename of your module, <code>foo.py</code>, strip off the <code>.py</code>, and assign that string to your module's <code>__name__</code> variable, i.e.</p>\n\n<pre><code># It's as if the interpreter inserts this at the top\n# of your module when it's imported from another module.\n__name__ = \"foo\"\n</code></pre>\n\n<h1>Executing the Module's Code</h1>\n\n<p>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</p>\n\n<p><strong>Always</strong></p>\n\n<ol>\n<li><p>It prints the string <code>\"before import\"</code> (without quotes).</p></li>\n<li><p>It loads the <code>math</code> module and assigns it to a variable called <code>math</code>. This is equivalent to replacing <code>import math</code> with the following (note that <code>__import__</code> is a low-level function in Python that takes a string and triggers the actual import):</p></li>\n</ol>\n\n<pre><code># Find and load a module given its string name, \"math\",\n# then assign it to a local variable called math.\nmath = __import__(\"math\")\n</code></pre>\n\n<ol start=\"3\">\n<li><p>It prints the string <code>\"before functionA\"</code>.</p></li>\n<li><p>It executes the <code>def</code> block, creating a function object, then assigning that function object to a variable called <code>functionA</code>.</p></li>\n<li><p>It prints the string <code>\"before functionB\"</code>.</p></li>\n<li><p>It executes the second <code>def</code> block, creating another function object, then assigning it to a variable called <code>functionB</code>.</p></li>\n<li><p>It prints the string <code>\"before __name__ guard\"</code>.</p></li>\n</ol>\n\n<p><strong>Only When Your Module Is the Main Program</strong></p>\n\n<ol start=\"8\">\n<li>If your module is the main program, then it will see that <code>__name__</code> was indeed set to <code>\"__main__\"</code> and it calls the two functions, printing the strings <code>\"Function A\"</code> and <code>\"Function B 10.0\"</code>.</li>\n</ol>\n\n<p><strong>Only When Your Module Is Imported by Another</strong></p>\n\n<ol start=\"8\">\n<li>(<strong>instead</strong>) If your module is not the main program but was imported by another one, then <code>__name__</code> will be <code>\"foo\"</code>, not <code>\"__main__\"</code>, and it'll skip the body of the <code>if</code> statement.</li>\n</ol>\n\n<p><strong>Always</strong></p>\n\n<ol start=\"9\">\n<li>It will print the string <code>\"after __name__ guard\"</code> in both situations.</li>\n</ol>\n\n<p><strong><em>Summary</em></strong></p>\n\n<p>In summary, here's what'd be printed in the two cases:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code># What gets printed if foo is the main program\nbefore import\nbefore functionA\nbefore functionB\nbefore __name__ guard\nFunction A\nFunction B 10.0\nafter __name__ guard\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code># What gets printed if foo is imported as a regular module\nbefore import\nbefore functionA\nbefore functionB\nbefore __name__ guard\nafter __name__ guard\n</code></pre>\n\n<h1>Why Does It Work This Way?</h1>\n\n<p>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a <code>.py</code> file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</p>\n\n<ul>\n<li><p>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</p></li>\n<li><p>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing <code>.py</code> files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</p></li>\n<li><p>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</p></li>\n</ul>\n\n<p>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. \"Running\" the script is a side effect of importing the script's module.</p>\n\n<h1>Food for Thought</h1>\n\n<ul>\n<li><p>Question: Can I have multiple <code>__name__</code> checking blocks?  Answer: it's strange to do so, but the language won't stop you.</p></li>\n<li><p>Suppose the following is in <code>foo2.py</code>.  What happens if you say <code>python foo2.py</code> on the command-line? Why?</p></li>\n</ul>\n\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is foo2.py.\n\ndef functionA():\n    print(\"a1\")\n    from foo2 import functionB\n    print(\"a2\")\n    functionB()\n    print(\"a3\")\n\ndef functionB():\n    print(\"b\")\n\nprint(\"t1\")\nif __name__ == \"__main__\":\n    print(\"m1\")\n    functionA()\n    print(\"m2\")\nprint(\"t2\")\n</code></pre>\n\n<ul>\n<li>Now, figure out what will happen if you remove the <code>__name__</code> check in <code>foo3.py</code>:</li>\n</ul>\n\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is foo3.py.\n\ndef functionA():\n    print(\"a1\")\n    from foo3 import functionB\n    print(\"a2\")\n    functionB()\n    print(\"a3\")\n\ndef functionB():\n    print(\"b\")\n\nprint(\"t1\")\nprint(\"m1\")\nfunctionA()\nprint(\"m2\")\nprint(\"t2\")\n</code></pre>\n\n<ul>\n<li>What will this do when used as a script?  When imported as a module?</li>\n</ul>\n\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is in foo4.py\n__name__ = \"__main__\"\n\ndef bar():\n    print(\"bar\")\n\nprint(\"before __name__ guard\")\nif __name__ == \"__main__\":\n    bar()\nprint(\"after __name__ guard\")\n</code></pre>\n"}, {"title": "What are metaclasses in Python?", "question_body": "<p>What are metaclasses and what do we use them for?</p>\n", "link": "https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python", "question_id": 100003, "accepted_answer_id": 100146, "answer_body": "<p>A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>\n\n<p>While in Python you can use arbitrary callables for metaclasses (like <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037\">Jerub</a> shows), the better approach is to make it an actual class itself. <code>type</code> is the usual metaclass in Python. <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>\n\n<p>A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry or replace the class with something else entirely.</p>\n\n<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>\n\n<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>\n\n<p>Here's an aggregated example of the bits and pieces:</p>\n\n<pre><code>def make_hook(f):\n    \"\"\"Decorator to turn 'foo' method into '__foo__'\"\"\"\n    f.is_hook = 1\n    return f\n\nclass MyType(type):\n    def __new__(mcls, name, bases, attrs):\n\n        if name.startswith('None'):\n            return None\n\n        # Go over attributes and see if they should be renamed.\n        newattrs = {}\n        for attrname, attrvalue in attrs.iteritems():\n            if getattr(attrvalue, 'is_hook', 0):\n                newattrs['__%s__' % attrname] = attrvalue\n            else:\n                newattrs[attrname] = attrvalue\n\n        return super(MyType, mcls).__new__(mcls, name, bases, newattrs)\n\n    def __init__(self, name, bases, attrs):\n        super(MyType, self).__init__(name, bases, attrs)\n\n        # classregistry.register(self, self.interfaces)\n        print \"Would register class %s now.\" % self\n\n    def __add__(self, other):\n        class AutoClass(self, other):\n            pass\n        return AutoClass\n        # Alternatively, to autogenerate the classname as well as the class:\n        # return type(self.__name__ + other.__name__, (self, other), {})\n\n    def unregister(self):\n        # classregistry.unregister(self)\n        print \"Would unregister class %s now.\" % self\n\nclass MyObject:\n    __metaclass__ = MyType\n\n\nclass NoneSample(MyObject):\n    pass\n\n# Will print \"NoneType None\"\nprint type(NoneSample), repr(NoneSample)\n\nclass Example(MyObject):\n    def __init__(self, value):\n        self.value = value\n    @make_hook\n    def add(self, other):\n        return self.__class__(self.value + other.value)\n\n# Will unregister the class\nExample.unregister()\n\ninst = Example(10)\n# Will fail with an AttributeError\n#inst.unregister()\n\nprint inst + inst\nclass Sibling(MyObject):\n    pass\n\nExampleSibling = Example + Sibling\n# ExampleSibling is now a subclass of both Example and Sibling (with no\n# content of its own) although it will believe it's called 'AutoClass'\nprint ExampleSibling\nprint ExampleSibling.__mro__\n</code></pre>\n"}, {"title": "How do I check whether a file exists without exceptions?", "question_body": "<p>How do I see if a file exists or not, without using the <a href=\"https://docs.python.org/3.6/reference/compound_stmts.html#try\" rel=\"noreferrer\"><code>try</code></a> statement?</p>\n", "link": "https://stackoverflow.com/questions/82831/how-do-i-check-whether-a-file-exists-without-exceptions", "question_id": 82831, "accepted_answer_id": null}, {"title": "Calling an external command in Python", "question_body": "<p>How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?</p>\n", "link": "https://stackoverflow.com/questions/89228/calling-an-external-command-in-python", "question_id": 89228, "accepted_answer_id": 89243, "answer_body": "<p>Look at the <a href=\"https://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess</a> module in the standard library:</p>\n\n<pre><code>import subprocess\nsubprocess.run([\"ls\", \"-l\"])\n</code></pre>\n\n<p>The advantage of <code>subprocess</code> vs. <code>system</code> is that it is more flexible (you can get the <code>stdout</code>, <code>stderr</code>, the \"real\" status code, better error handling, etc...).</p>\n\n<p>The <a href=\"https://docs.python.org/library/os.html#os.system\" rel=\"noreferrer\">official documentation</a> recommends the <code>subprocess</code> module over the alternative <code>os.system()</code>:</p>\n\n<blockquote>\n  <p>The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function [<a href=\"https://docs.python.org/library/os.html#os.system\" rel=\"noreferrer\"><code>os.system()</code></a>].</p>\n</blockquote>\n\n<p>The <a href=\"https://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module\" rel=\"noreferrer\">Replacing Older Functions with the subprocess Module</a> section in the <code>subprocess</code> documentation may have some helpful recipes.</p>\n\n<p>For versions of Python before 3.5, use <code>call</code>:</p>\n\n<pre><code>import subprocess\nsubprocess.call([\"ls\", \"-l\"])\n</code></pre>\n"}, {"title": "How to merge two dictionaries in a single expression?", "question_body": "<p>I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged.  The <code>update()</code> method would be what I need, if it returned its result instead of modifying a dict in-place.</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = x.update(y)\n&gt;&gt;&gt; print(z)\nNone\n&gt;&gt;&gt; x\n{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n\n<p>How can I get that final merged dict in <code>z</code>, not <code>x</code>?</p>\n\n<p>(To be extra-clear, the last-one-wins conflict-handling of <code>dict.update()</code> is what I'm looking for as well.)</p>\n", "link": "https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression", "question_id": 38987, "accepted_answer_id": 26853961, "answer_body": "<blockquote>\n  <h2>How can I merge two Python dictionaries in a single expression?</h2>\n</blockquote>\n\n<p>For dictionaries <code>x</code> and <code>y</code>, <code>z</code> becomes a shallowly merged dictionary with values from <code>y</code> replacing those from <code>x</code>.</p>\n\n<ul>\n<li><p>In Python 3.5 or greater:</p>\n\n<pre><code>z = {**x, **y}\n</code></pre></li>\n<li><p>In Python 2, (or 3.4 or lower) write a function:</p>\n\n<pre><code>def merge_two_dicts(x, y):\n    z = x.copy()   # start with x's keys and values\n    z.update(y)    # modifies z with y's keys and values &amp; returns None\n    return z\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>z = merge_two_dicts(x, y)\n</code></pre></li>\n</ul>\n\n<h3>Explanation</h3>\n\n<p>Say you have two dicts and you want to merge them into a new dict without altering the original dicts:</p>\n\n<pre><code>x = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\n</code></pre>\n\n<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dict's values overwriting those from the first.</p>\n\n<pre><code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'c': 4}\n</code></pre>\n\n<p>A new syntax for this, proposed in <a href=\"https://www.python.org/dev/peps/pep-0448\" rel=\"noreferrer\">PEP 448</a> and <a href=\"https://mail.python.org/pipermail/python-dev/2015-February/138564.html\" rel=\"noreferrer\">available as of Python 3.5</a>, is </p>\n\n<pre><code>z = {**x, **y}\n</code></pre>\n\n<p>And it is indeed a single expression. </p>\n\n<p>Note that we can merge in with literal notation as well:</p>\n\n<pre><code>z = {**x, 'foo': 1, 'bar': 2, **y}\n</code></pre>\n\n<p>and now: </p>\n\n<pre><code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'foo': 1, 'bar': 2, 'c': 4}\n</code></pre>\n\n<p>It is now showing as implemented in the <a href=\"https://www.python.org/dev/peps/pep-0478/#features-for-3-5\" rel=\"noreferrer\">release schedule for 3.5, PEP 478</a>, and it has now made its way into <a href=\"https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations\" rel=\"noreferrer\">What's New in Python 3.5</a> document.</p>\n\n<p>However, since many organizations are still on Python 2, you may wish to do this in a backwards compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>\n\n<pre><code>z = x.copy()\nz.update(y) # which returns None since it mutates z\n</code></pre>\n\n<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>'b'</code> will point to <code>3</code> in our final result.</p>\n\n<h2>Not yet on Python 3.5, but want a <em>single expression</em></h2>\n\n<p>If you are not yet on Python 3.5, or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while correct approach is to put it in a function:</p>\n\n<pre><code>def merge_two_dicts(x, y):\n    \"\"\"Given two dicts, merge them into a new dict as a shallow copy.\"\"\"\n    z = x.copy()\n    z.update(y)\n    return z\n</code></pre>\n\n<p>and then you have a single expression:</p>\n\n<pre><code>z = merge_two_dicts(x, y)\n</code></pre>\n\n<p>You can also make a function to merge an undefined number of dicts, from zero to a very large number:</p>\n\n<pre><code>def merge_dicts(*dict_args):\n    \"\"\"\n    Given any number of dicts, shallow copy and merge into a new dict,\n    precedence goes to key value pairs in latter dicts.\n    \"\"\"\n    result = {}\n    for dictionary in dict_args:\n        result.update(dictionary)\n    return result\n</code></pre>\n\n<p>This function will work in Python 2 and 3 for all dicts. e.g. given dicts <code>a</code> to <code>g</code>:</p>\n\n<pre><code>z = merge_dicts(a, b, c, d, e, f, g) \n</code></pre>\n\n<p>and key value pairs in <code>g</code> will take precedence over dicts <code>a</code> to <code>f</code>, and so on.</p>\n\n<h2>Critiques of Other Answers</h2>\n\n<p>Don't use what you see in the formerly accepted answer:</p>\n\n<pre><code>z = dict(x.items() + y.items())\n</code></pre>\n\n<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists - </p>\n\n<pre><code>&gt;&gt;&gt; c = dict(a.items() + b.items())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'\n</code></pre>\n\n<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power. </p>\n\n<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>\n\n<pre><code>&gt;&gt;&gt; c = dict(a.items() | b.items())\n</code></pre>\n\n<p>This example demonstrates what happens when values are unhashable:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a': []}\n&gt;&gt;&gt; y = {'b': []}\n&gt;&gt;&gt; dict(x.items() | y.items())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>\n\n<p>Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a': 2}\n&gt;&gt;&gt; y = {'a': 1}\n&gt;&gt;&gt; dict(x.items() | y.items())\n{'a': 2}\n</code></pre>\n\n<p>Another hack you should not use:</p>\n\n<pre><code>z = dict(x, **y)\n</code></pre>\n\n<p>This uses the <code>dict</code> constructor, and is very fast and memory efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic. </p>\n\n<p>Here's an example of the usage being <a href=\"https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff\" rel=\"noreferrer\">remediated in django</a>.</p>\n\n<p>Dicts are intended to take hashable keys (e.g. frozensets or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>\n\n<pre><code>&gt;&gt;&gt; c = dict(a, **b)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: keyword arguments must be strings\n</code></pre>\n\n<p>From the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099459.html\" rel=\"noreferrer\">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>\n\n<blockquote>\n  <p>I am fine with\n  declaring dict({}, **{1:3}) illegal, since after all it is abuse of\n  the ** mechanism.</p>\n</blockquote>\n\n<p>and </p>\n\n<blockquote>\n  <p>Apparently dict(x, **y) is going around as \"cool hack\" for \"call\n  x.update(y) and return x\". Personally I find it more despicable than\n  cool.</p>\n</blockquote>\n\n<p>It is my understanding (as well as the understanding of the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099485.html\" rel=\"noreferrer\">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dicts for readability purposes, e.g.:</p>\n\n<pre><code>dict(a=1, b=10, c=11)\n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n\n<h2>Response to comments</h2>\n\n<blockquote>\n  <p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-comming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact ** was designed precisely to pass dicts as keywords. </p>\n</blockquote>\n\n<p>Again, it doesn't work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dicts, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>\n\n<pre><code>&gt;&gt;&gt; foo(**{('a', 'b'): None})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: foo() keywords must be strings\n&gt;&gt;&gt; dict(**{('a', 'b'): None})\n{('a', 'b'): None}\n</code></pre>\n\n<p>This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>\n\n<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>\n\n<p>More comments:</p>\n\n<blockquote>\n  <p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts. </p>\n</blockquote>\n\n<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>\n\n<blockquote>\n  <p><code>{**x, **y}</code> does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word \"merging\" these answers describe \"updating one dict with another\", and not merging.</p>\n</blockquote>\n\n<p>Yes. I must refer you back to the question, which is asking for a <em>shallow</em> merge of <strong><em>two</em></strong> dictionaries, with the first's values being overwritten by the second's - in a single expression.</p>\n\n<p>Assuming two dictionary of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dicts from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:</p>\n\n<pre><code>from copy import deepcopy\n\ndef dict_of_dicts_merge(x, y):\n    z = {}\n    overlapping_keys = x.keys() &amp; y.keys()\n    for key in overlapping_keys:\n        z[key] = dict_of_dicts_merge(x[key], y[key])\n    for key in x.keys() - overlapping_keys:\n        z[key] = deepcopy(x[key])\n    for key in y.keys() - overlapping_keys:\n        z[key] = deepcopy(y[key])\n    return z\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':{1:{}}, 'b': {2:{}}}\n&gt;&gt;&gt; y = {'b':{10:{}}, 'c': {11:{}}}\n&gt;&gt;&gt; dict_of_dicts_merge(x, y)\n{'b': {2: {}, 10: {}}, 'a': {1: {}}, 'c': {11: {}}}\n</code></pre>\n\n<p>Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at <a href=\"https://stackoverflow.com/a/24088493/541136\">my answer to the canonical question on a \"Dictionaries of dictionaries merge\"</a>.</p>\n\n<h2>Less Performant But Correct Ad-hocs</h2>\n\n<p>These approaches are less performant, but they will provide correct behavior.\nThey will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dicts have precedence)</p>\n\n<p>You can also chain the dicts manually inside a dict comprehension:</p>\n\n<pre><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\n</code></pre>\n\n<p>or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>\n\n<pre><code>dict((k, v) for d in dicts for k, v in d.items())\n</code></pre>\n\n<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>\n\n<pre><code>import itertools\nz = dict(itertools.chain(x.iteritems(), y.iteritems()))\n</code></pre>\n\n<h2>Performance Analysis</h2>\n\n<p>I'm only going to do the performance analysis of the usages known to behave correctly. </p>\n\n<pre><code>import timeit\n</code></pre>\n\n<p>The following is done on Ubuntu 14.04</p>\n\n<p>In Python 2.7 (system Python):</p>\n\n<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n0.5726828575134277\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n1.163769006729126\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.iteritems(), y.iteritems()))))\n1.1614501476287842\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n2.2345519065856934\n</code></pre>\n\n<p>In Python 3.5 (deadsnakes PPA):</p>\n\n<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: {**x, **y}))\n0.4094954460160807\n&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n0.7881555100320838\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n1.4525277839857154\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.items(), y.items()))))\n2.3143140770262107\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n3.2069112799945287\n</code></pre>\n\n<h2>Resources on Dictionaries</h2>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302\">My explanation of Python's <strong>dictionary implementation</strong>, updated for 3.6.</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535\">Answer on how to add new keys to a dictionary</a></li>\n<li><a href=\"https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067\">Mapping two lists into a dictionary</a></li>\n<li>The official Python <a href=\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">docs on dictionaries</a> </li>\n<li><a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\" rel=\"noreferrer\">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>\n<li><a href=\"https://www.youtube.com/watch?v=npw4s1QTmPg\" rel=\"noreferrer\">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>\n</ul>\n"}, {"title": "How can I safely create a nested directory?", "question_body": "<p>What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:</p>\n\n<pre><code>import os\n\nfile_path = \"/my/directory/filename.txt\"\ndirectory = os.path.dirname(file_path)\n\ntry:\n    os.stat(directory)\nexcept:\n    os.mkdir(directory)       \n\nf = file(filename)\n</code></pre>\n\n<p>Somehow, I missed <code>os.path.exists</code> (thanks kanja, Blair, and Douglas). This is what I have now:</p>\n\n<pre><code>def ensure_dir(file_path):\n    directory = os.path.dirname(file_path)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n</code></pre>\n\n<p>Is there a flag for \"open\", that makes this happen automatically?</p>\n", "link": "https://stackoverflow.com/questions/273192/how-can-i-safely-create-a-nested-directory", "question_id": 273192, "accepted_answer_id": 273227, "answer_body": "<p>I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>\n\n<p>Try <a href=\"https://docs.python.org/2/library/os.path.html#os.path.exists\" rel=\"noreferrer\"><code>os.path.exists</code></a>, and consider <a href=\"https://docs.python.org/2/library/os.html#os.makedirs\" rel=\"noreferrer\"><code>os.makedirs</code></a> for the creation.</p>\n\n<pre><code>import os\nif not os.path.exists(directory):\n    os.makedirs(directory)\n</code></pre>\n\n<p>As noted in comments and elsewhere, there's a race condition &ndash; if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>\n\n<p>One option would be to trap the <code>OSError</code> and examine the embedded error code (see <a href=\"https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror\">Is there a cross-platform way of getting information from Python\u2019s OSError</a>):</p>\n\n<pre><code>import os, errno\n\ntry:\n    os.makedirs(directory)\nexcept OSError as e:\n    if e.errno != errno.EEXIST:\n        raise\n</code></pre>\n\n<p>Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one &ndash; we could still be fooled. </p>\n\n<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>\n\n<p>Modern versions of Python improve this code quite a bit, both by exposing <a href=\"https://docs.python.org/3.3/library/exceptions.html?#FileExistsError\" rel=\"noreferrer\"><code>FileExistsError</code></a> (in 3.3+)...</p>\n\n<pre><code>try:\n    os.makedirs(\"path/to/directory\")\nexcept FileExistsError:\n    # directory already exists\n    pass\n</code></pre>\n\n<p>...and by allowing <a href=\"https://docs.python.org/3.2/library/os.html#os.makedirs\" rel=\"noreferrer\">a keyword argument to <code>os.makedirs</code> called <code>exist_ok</code></a> (in 3.2+).</p>\n\n<pre><code>os.makedirs(\"path/to/directory\", exist_ok=True)  # succeeds even if directory exists.\n</code></pre>\n"}, {"title": "Does Python have a string &#39;contains&#39; substring method?", "question_body": "<p>I'm looking for a <code>string.contains</code> or <code>string.indexof</code> method in Python.</p>\n\n<p>I want to do:</p>\n\n<pre><code>if not somestring.contains(\"blah\"):\n   continue\n</code></pre>\n", "link": "https://stackoverflow.com/questions/3437059/does-python-have-a-string-contains-substring-method", "question_id": 3437059, "accepted_answer_id": 3437070, "answer_body": "<p>You can use the <a href=\"https://docs.python.org/reference/expressions.html#membership-test-details\" rel=\"noreferrer\"><code>in</code> operator</a>:</p>\n\n<pre><code>if \"blah\" not in somestring: \n    continue\n</code></pre>\n"}, {"title": "How do I list all files of a directory?", "question_body": "<p>How can I list all files of a directory in Python and add them to a <code>list</code>?</p>\n", "link": "https://stackoverflow.com/questions/3207219/how-do-i-list-all-files-of-a-directory", "question_id": 3207219, "accepted_answer_id": null}, {"title": "How do I sort a dictionary by value?", "question_body": "<p>I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.</p>\n\n<p>I can sort on the keys, but how can I sort based on the values?</p>\n\n<p>Note: I have read Stack Overflow question here <em><a href=\"https://stackoverflow.com/questions/72899\">How do I sort a list of dictionaries by a value of the dictionary?</a></em> and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.</p>\n", "link": "https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value", "question_id": 613183, "accepted_answer_id": 613218, "answer_body": "<p>It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a list\u2014probably a list of tuples.</p>\n\n<p>For instance,</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n</code></pre>\n\n<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>\n\n<p>And for those wishing to sort on keys instead of values:</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n</code></pre>\n\n<p>In Python3 since unpacking is not allowed <a href=\"https://stackoverflow.com/a/15712231/4293057\">[1]</a> we can use </p>\n\n<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=lambda kv: kv[1])\n</code></pre>\n\n<p>If you want the output as a dict, you can use <a href=\"https://docs.python.org/3/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>collections.OrderedDict</code></a>:</p>\n\n<pre><code>import collections\n\nsorted_dict = collections.OrderedDict(sorted_x)\n</code></pre>\n"}, {"title": "What is the difference between @staticmethod and @classmethod?", "question_body": "<p>What is the difference between a function decorated with <a href=\"http://docs.python.org/library/functions.html#staticmethod\" rel=\"noreferrer\"><code>@staticmethod</code></a> and one decorated with <a href=\"http://docs.python.org/library/functions.html#classmethod\" rel=\"noreferrer\"><code>@classmethod</code></a>?</p>\n", "link": "https://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod", "question_id": 136097, "accepted_answer_id": 1669524, "answer_body": "<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>\n\n<pre><code>class A(object):\n    def foo(self, x):\n        print \"executing foo(%s, %s)\" % (self, x)\n\n    @classmethod\n    def class_foo(cls, x):\n        print \"executing class_foo(%s, %s)\" % (cls, x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\" % x    \n\na = A()\n</code></pre>\n\n<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>\n\n<pre><code>a.foo(1)\n# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)\n</code></pre>\n\n<hr>\n\n<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>\n\n<pre><code>a.class_foo(1)\n# executing class_foo(&lt;class '__main__.A'&gt;,1)\n</code></pre>\n\n<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be\na classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>\n\n<pre><code>A.class_foo(1)\n# executing class_foo(&lt;class '__main__.A'&gt;,1)\n</code></pre>\n\n<p>One use people have found for class methods is to create <a href=\"https://stackoverflow.com/a/1950927/190597\">inheritable alternative constructors</a>.</p>\n\n<hr>\n\n<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>\n\n<pre><code>a.static_foo(1)\n# executing static_foo(1)\n\nA.static_foo('hi')\n# executing static_foo(hi)\n</code></pre>\n\n<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>\n\n<hr>\n\n<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,\nyou get a \"partially applied\" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>\n\n<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term \"bound\" below:</p>\n\n<pre><code>print(a.foo)\n# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;\n</code></pre>\n\n<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>\n\n<pre><code>print(a.class_foo)\n# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;\n</code></pre>\n\n<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns\na good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and\n<code>a.static_foo</code> expects 1 argument too.</p>\n\n<pre><code>print(a.static_foo)\n# &lt;function static_foo at 0xb7d479cc&gt;\n</code></pre>\n\n<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>\n\n<pre><code>print(A.static_foo)\n# &lt;function static_foo at 0xb7d479cc&gt;\n</code></pre>\n"}, {"title": "Accessing the index in &#39;for&#39; loops?", "question_body": "<p>How do I access the index in a <code>for</code> loop like the following?</p>\n\n<pre><code>ints = [8, 23, 45, 12, 78]\nfor i in ints:\n    print('item #{} = {}'.format(???, i))\n</code></pre>\n\n<p>I want to get this output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>item #1 = 8\nitem #2 = 23\nitem #3 = 45\nitem #4 = 12\nitem #5 = 78\n</code></pre>\n\n<p>When I loop through it using a <code>for</code> loop, how do I access the loop index, from 1 to 5 in this case?</p>\n", "link": "https://stackoverflow.com/questions/522563/accessing-the-index-in-for-loops", "question_id": 522563, "accepted_answer_id": 522578, "answer_body": "<p>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</p>\n\n<p>The better option is to use the built-in function <a href=\"https://docs.python.org/3/library/functions.html#enumerate\" rel=\"noreferrer\" title=\"enumerate\"><code>enumerate()</code></a>, available in both Python 2 and 3:</p>\n\n<pre><code>for idx, val in enumerate(ints):\n    print(idx, val)\n</code></pre>\n\n<p>Check out <a href=\"https://www.python.org/dev/peps/pep-0279/\" rel=\"noreferrer\" title=\"PEP 279\">PEP 279</a> for more.</p>\n"}, {"title": "How do I check if a list is empty?", "question_body": "<p>For example, if passed the following:</p>\n\n<pre><code>a = []\n</code></pre>\n\n<p>How do I check to see if <code>a</code> is empty?</p>\n", "link": "https://stackoverflow.com/questions/53513/how-do-i-check-if-a-list-is-empty", "question_id": 53513, "accepted_answer_id": 53522, "answer_body": "<pre><code>if not a:\n  print(\"List is empty\")\n</code></pre>\n\n<p>Using the implicit booleanness of the empty <code>list</code> is quite pythonic.</p>\n"}, {"title": "What is the difference between Python&#39;s list methods append and extend?", "question_body": "<p>What's the difference between the list methods <code>append()</code> and <code>extend()</code>?</p>\n", "link": "https://stackoverflow.com/questions/252703/what-is-the-difference-between-pythons-list-methods-append-and-extend", "question_id": 252703, "accepted_answer_id": 252711, "answer_body": "<p><a href=\"https://docs.python.org/2/library/array.html?#array.array.append\" rel=\"noreferrer\"><code>append</code></a>: Appends object at the end.</p>\n\n<pre><code>x = [1, 2, 3]\nx.append([4, 5])\nprint (x)\n</code></pre>\n\n<p>gives you: <code>[1, 2, 3, [4, 5]]</code></p>\n\n<hr>\n\n<p><a href=\"https://docs.python.org/2/library/array.html?#array.array.extend\" rel=\"noreferrer\"><code>extend</code></a>: Extends list by appending elements from the iterable.</p>\n\n<pre><code>x = [1, 2, 3]\nx.extend([4, 5])\nprint (x)\n</code></pre>\n\n<p>gives you: <code>[1, 2, 3, 4, 5]</code></p>\n"}, {"title": "Understanding slice notation", "question_body": "<p>I need a good explanation (references are a plus) on Python's slice notation. </p>\n\n<p>To me, this notation needs a bit of picking up. </p>\n\n<p>It looks extremely powerful, but I haven't quite got my head around it.</p>\n", "link": "https://stackoverflow.com/questions/509211/understanding-slice-notation", "question_id": 509211, "accepted_answer_id": 509295, "answer_body": "<p>It's pretty simple really:</p>\n\n<pre><code>a[start:stop]  # items start through stop-1\na[start:]      # items start through the rest of the array\na[:stop]       # items from the beginning through stop-1\na[:]           # a copy of the whole array\n</code></pre>\n\n<p>There is also the <code>step</code> value, which can be used with any of the above:</p>\n\n<pre><code>a[start:stop:step] # start through not past stop, by step\n</code></pre>\n\n<p>The key point to remember is that the <code>:stop</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference between <code>stop</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>\n\n<p>The other feature is that <code>start</code> or <code>stop</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>\n\n<pre><code>a[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n</code></pre>\n\n<p>Similarly, <code>step</code> may be a negative number:</p>\n\n<pre><code>a[::-1]    # all items in the array, reversed\na[1::-1]   # the first two items, reversed\na[:-3:-1]  # the last two items, reversed\na[-3::-1]  # everything except the last two items, reversed\n</code></pre>\n\n<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>\n\n<h3>Relation to <code>slice()</code> object</h3>\n\n<p>The slicing operator <code>[]</code> is actually being used in the above code with a <code>slice()</code> object using the <code>:</code> notation (which is only valid within <code>[]</code>), i.e.:</p>\n\n<pre><code>a[start:stop:step]\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>a[slice(start, stop, step)]\n</code></pre>\n\n<p>Slice objects also behave slightly differently depending on the number of arguments, similarly to <code>range()</code>, i.e. both <code>slice(stop)</code> and <code>slice(start, stop[, step])</code> are supported.\nTo skip specifying a given argument, one might use <code>None</code>, so that e.g. <code>a[start:]</code> is equivalent to <code>a[slice(start, None)]</code> or <code>a[::-1]</code> is equivalent to <code>a[slice(None, None, -1)]</code>.</p>\n\n<p>While the <code>:</code>-based notation is very helpful for simple slicing, the explicit use of <code>slice()</code> objects simplifies the programmatic generation of slicing.</p>\n"}, {"title": "Using global variables in a function", "question_body": "<p>How can I create or use a global variable in a function?</p>\n\n<p>If I create a global variable in one function, how can I use that global variable in another function? Do I need to store the global variable in a local variable of the function which needs its access?</p>\n", "link": "https://stackoverflow.com/questions/423379/using-global-variables-in-a-function", "question_id": 423379, "accepted_answer_id": 423596, "answer_body": "<p>You can use a global variable in other functions by declaring it as <code>global</code> in each function that assigns to it:</p>\n\n<pre><code>globvar = 0\n\ndef set_globvar_to_one():\n    global globvar    # Needed to modify global copy of globvar\n    globvar = 1\n\ndef print_globvar():\n    print(globvar)     # No need for global declaration to read value of globvar\n\nset_globvar_to_one()\nprint_globvar()       # Prints 1\n</code></pre>\n\n<p>I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know that's what you're playing with by explicitly requiring the <code>global</code> keyword.</p>\n\n<p>See other answers if you want to share a global variable across modules.</p>\n"}, {"title": "Iterating over dictionaries using &#39;for&#39; loops", "question_body": "<p>I am a bit puzzled by the following code:</p>\n\n<pre><code>d = {'x': 1, 'y': 2, 'z': 3} \nfor key in d:\n    print key, 'corresponds to', d[key]\n</code></pre>\n\n<p>What I don't understand is the <code>key</code> portion. How does Python recognize that it needs only to read the key from the dictionary? Is <code>key</code> a special word in Python? Or is it simply a variable?</p>\n", "link": "https://stackoverflow.com/questions/3294889/iterating-over-dictionaries-using-for-loops", "question_id": 3294889, "accepted_answer_id": 3294899, "answer_body": "<p><code>key</code> is just a variable name.  </p>\n\n<pre><code>for key in d:\n</code></pre>\n\n<p>will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:</p>\n\n<p>For Python 2.x:</p>\n\n<pre><code>for key, value in d.iteritems():\n</code></pre>\n\n<p>For Python 3.x:</p>\n\n<pre><code>for key, value in d.items():\n</code></pre>\n\n<p>To test for yourself, change the word <code>key</code> to <code>poop</code>.</p>\n\n<p>For Python 3.x, <code>iteritems()</code> has been replaced with simply <code>items()</code>, which returns a set-like view backed by the dict, like <code>iteritems()</code> but even better. \nThis is also available in 2.7 as <code>viewitems()</code>. </p>\n\n<p>The operation <code>items()</code> will work for both 2 and 3, but in 2 it will return a list of the dictionary's <code>(key, value)</code> pairs, which will not reflect changes to the dict that happen after the <code>items()</code> call. If you want the 2.x behavior in 3.x, you can call <code>list(d.items())</code>.</p>\n"}, {"title": "How to make a flat list out of list of lists", "question_body": "<p>I wonder whether there is a shortcut to make a simple list out of list of lists in Python.</p>\n\n<p>I can do that in a <code>for</code> loop, but maybe there is some cool \"one-liner\"? I tried it with <em>reduce</em>, but I get an error.</p>\n\n<p><strong>Code</strong></p>\n\n<pre><code>l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nreduce(lambda x, y: x.extend(y), l)\n</code></pre>\n\n<p><strong>Error message</strong></p>\n\n<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 1, in &lt;lambda&gt;\nAttributeError: 'NoneType' object has no attribute 'extend'\n</code></pre>\n", "link": "https://stackoverflow.com/questions/952914/how-to-make-a-flat-list-out-of-list-of-lists", "question_id": 952914, "accepted_answer_id": 952952, "answer_body": "<p>Given a list of lists <code>l</code>,</p>\n\n<p><code>flat_list = [item for sublist in l for item in sublist]</code></p>\n\n<p>which means:</p>\n\n<pre><code>flat_list = []\nfor sublist in l:\n    for item in sublist:\n        flat_list.append(item)\n</code></pre>\n\n<p>is faster than the shortcuts posted so far. (<code>l</code> is the list to flatten.)</p>\n\n<p>Here is the corresponding function:</p>\n\n<pre><code>flatten = lambda l: [item for sublist in l for item in sublist]\n</code></pre>\n\n<p>As evidence, you can use the <code>timeit</code> module in the standard library:</p>\n\n<pre><code>$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'\n10000 loops, best of 3: 143 usec per loop\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'\n1000 loops, best of 3: 969 usec per loop\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'\n1000 loops, best of 3: 1.1 msec per loop\n</code></pre>\n\n<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(L**2)</code> when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., <code>I * (L**2)/2</code>.</p>\n\n<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>\n"}, {"title": "Finding the index of an item given a list containing it in Python", "question_body": "<p>For a list <code>[\"foo\", \"bar\", \"baz\"]</code> and an item in the list <code>\"bar\"</code>, how do I get its index (1) in Python?</p>\n", "link": "https://stackoverflow.com/questions/176918/finding-the-index-of-an-item-given-a-list-containing-it-in-python", "question_id": 176918, "accepted_answer_id": 176921, "answer_body": "<pre><code>&gt;&gt;&gt; [\"foo\", \"bar\", \"baz\"].index(\"bar\")\n1\n</code></pre>\n\n<p>Reference: <a href=\"http://docs.python.org/2/tutorial/datastructures.html#more-on-lists\" rel=\"noreferrer\">Data Structures > More on Lists</a></p>\n\n<h1>Caveats follow</h1>\n\n<p>Note that while this is perhaps the cleanest way to answer the question <em>as asked</em>, <code>index</code> is a rather weak component of the <code>list</code> API, and I can't remember the last time I used it in anger. It's been pointed out to me in the comments that because this answer is heavily referenced, it should be made more complete. Some caveats about <code>list.index</code> follow. It is probably worth initially taking a look at the docstring for it:</p>\n\n<pre><code>&gt;&gt;&gt; print(list.index.__doc__)\nL.index(value, [start, [stop]]) -&gt; integer -- return first index of value.\nRaises ValueError if the value is not present.\n</code></pre>\n\n<h2>Linear time-complexity in list length</h2>\n\n<p>An <code>index</code> call checks every element of the list in order, until it finds a match. If your list is long, and you don't know roughly where in the list it occurs, this search could become a bottleneck. In that case, you should consider a different data structure. Note that if you know roughly where to find the match, you can give <code>index</code> a hint. For instance, in this snippet, <code>l.index(999_999, 999_990, 1_000_000)</code> is roughly five orders of magnitude faster than straight <code>l.index(999_999)</code>, because the former only has to search 10 entries, while the latter searches a million:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.timeit('l.index(999_999)', setup='l = list(range(0, 1_000_000))', number=1000)\n9.356267921015387\n&gt;&gt;&gt; timeit.timeit('l.index(999_999, 999_990, 1_000_000)', setup='l = list(range(0, 1_000_000))', number=1000)\n0.0004404920036904514\n</code></pre>\n\n<h2>Only returns the index of the <em>first match</em> to its argument</h2>\n\n<p>A call to <code>index</code> searches through the list in order until it finds a match, and <em>stops there.</em> If you expect to need indices of more matches, you should use a list comprehension, or generator expression.</p>\n\n<pre><code>&gt;&gt;&gt; [1, 1].index(1)\n0\n&gt;&gt;&gt; [i for i, e in enumerate([1, 2, 1]) if e == 1]\n[0, 2]\n&gt;&gt;&gt; g = (i for i, e in enumerate([1, 2, 1]) if e == 1)\n&gt;&gt;&gt; next(g)\n0\n&gt;&gt;&gt; next(g)\n2\n</code></pre>\n\n<p>Most places where I once would have used <code>index</code>, I now use a list comprehension or generator expression because they're more generalizable. So if you're considering reaching for <code>index</code>, take a look at these excellent python features.</p>\n\n<h2>Throws if element not present in list</h2>\n\n<p>A call to <code>index</code> results in a <code>ValueError</code> if the item's not present.</p>\n\n<pre><code>&gt;&gt;&gt; [1, 1].index(2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: 2 is not in list\n</code></pre>\n\n<p>If the item might not be present in the list, you should either </p>\n\n<ol>\n<li>Check for it first with <code>item in my_list</code> (clean, readable approach), or</li>\n<li>Wrap the <code>index</code> call in a <code>try/except</code> block which catches <code>ValueError</code> (probably faster, at least when the list to search is long, and the item is usually present.)</li>\n</ol>\n"}, {"title": "Check if a given key already exists in a dictionary", "question_body": "<p>I wanted to test if a key exists in a dictionary before updating the value for the key.\nI wrote the following code:</p>\n\n<pre><code>if 'key1' in dict.keys():\n  print \"blah\"\nelse:\n  print \"boo\"\n</code></pre>\n\n<p>I think this is not the best way to accomplish this task. Is there a better way to test for a key in the dictionary?</p>\n", "link": "https://stackoverflow.com/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary", "question_id": 1602934, "accepted_answer_id": 1602964, "answer_body": "<p><code>in</code> is the intended way to test for the existence of a key in a <code>dict</code>.</p>\n\n<pre><code>d = dict()\n\nfor i in range(100):\n    key = i % 10\n    if key in d:\n        d[key] += 1\n    else:\n        d[key] = 1\n</code></pre>\n\n<p>If you wanted a default, you can always use <code>dict.get()</code>:</p>\n\n<pre><code>d = dict()\n\nfor i in range(100):\n    key = i % 10\n    d[key] = d.get(key, 0) + 1\n</code></pre>\n\n<p>... and if you wanted to always ensure a default value for any key you can use <code>defaultdict</code> from the <code>collections</code> module, like so:</p>\n\n<pre><code>from collections import defaultdict\n\nd = defaultdict(int)\n\nfor i in range(100):\n    d[i % 10] += 1\n</code></pre>\n\n<p>... but in general, the <code>in</code> keyword is the best way to do it.</p>\n"}, {"title": "How to make a chain of function decorators?", "question_body": "<p>How can I make two decorators in Python that would do the following?</p>\n\n<pre><code>@makebold\n@makeitalic\ndef say():\n   return \"Hello\"\n</code></pre>\n\n<p>...which should return:</p>\n\n<pre><code>\"&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;\"\n</code></pre>\n\n<p>I'm not trying to make <code>HTML</code> this way in a real application - just trying to understand how decorators and decorator chaining works.</p>\n", "link": "https://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators", "question_id": 739654, "accepted_answer_id": 739665, "answer_body": "<p>Check out <a href=\"http://docs.python.org/reference/compound_stmts.html#function\" rel=\"noreferrer\">the documentation</a> to see how decorators work. Here is what you asked for:</p>\n\n<pre><code>from functools import wraps\n\ndef makebold(fn):\n    @wraps(fn)\n    def wrapped(*args, **kwargs):\n        return \"&lt;b&gt;\" + fn(*args, **kwargs) + \"&lt;/b&gt;\"\n    return wrapped\n\ndef makeitalic(fn):\n    @wraps(fn)\n    def wrapped(*args, **kwargs):\n        return \"&lt;i&gt;\" + fn(*args, **kwargs) + \"&lt;/i&gt;\"\n    return wrapped\n\n@makebold\n@makeitalic\ndef hello():\n    return \"hello world\"\n\n@makebold\n@makeitalic\ndef log(s):\n    return s\n\nprint hello()        # returns \"&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;\"\nprint hello.__name__ # with functools.wraps() this returns \"hello\"\nprint log('hello')   # returns \"&lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;\"\n</code></pre>\n"}, {"title": "How can I make a time delay in Python?", "question_body": "<p>I would like to know how to put a time delay in a Python script.</p>\n", "link": "https://stackoverflow.com/questions/510348/how-can-i-make-a-time-delay-in-python", "question_id": 510348, "accepted_answer_id": null}, {"title": "How to get the current time in Python", "question_body": "<p>What is the module/method used to get the current time?</p>\n", "link": "https://stackoverflow.com/questions/415511/how-to-get-the-current-time-in-python", "question_id": 415511, "accepted_answer_id": 415519, "answer_body": "<p>Use:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.datetime.now()\ndatetime.datetime(2009, 1, 6, 15, 8, 24, 78915)\n\n&gt;&gt;&gt; print(datetime.datetime.now())\n2018-07-29 09:17:13.812189\n</code></pre>\n\n<p>And just the time:</p>\n\n<pre><code>&gt;&gt;&gt; datetime.datetime.now().time()\ndatetime.time(15, 8, 24, 78915)\n\n&gt;&gt;&gt; print(datetime.datetime.now().time())\n09:17:51.914526\n</code></pre>\n\n<p>See <a href=\"https://docs.python.org/3/library/datetime.html\" rel=\"noreferrer\"><strong>the documentation</strong></a> for more information.</p>\n\n<p>To save typing, you can import the <code>datetime</code> object from the <code>datetime</code> module:</p>\n\n<pre><code>&gt;&gt;&gt; from datetime import datetime\n</code></pre>\n\n<p>Then remove the leading <code>datetime.</code> from all of the above.</p>\n"}, {"title": "Difference between __str__ and __repr__?", "question_body": "<p>What is the difference between <code>__str__</code> and <code>__repr__</code> in Python?</p>\n", "link": "https://stackoverflow.com/questions/1436703/difference-between-str-and-repr", "question_id": 1436703, "accepted_answer_id": 2626364, "answer_body": "<p><a href=\"https://stackoverflow.com/users/95810/alex-martelli\">Alex</a> summarized well but, surprisingly, was too succinct.</p>\n\n<p>First, let me reiterate the main points in <a href=\"https://stackoverflow.com/a/1436756/3798217\">Alex\u2019s post</a>:</p>\n\n<ul>\n<li>The default implementation is useless (it\u2019s hard to think of one which wouldn\u2019t be, but yeah)</li>\n<li><code>__repr__</code> goal is to be unambiguous</li>\n<li><code>__str__</code> goal is to be readable</li>\n<li>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></li>\n</ul>\n\n<p><strong>Default implementation is useless</strong></p>\n\n<p>This is mostly a surprise because Python\u2019s defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>\n\n<pre><code>return \"%s(%r)\" % (self.__class__, self.__dict__)\n</code></pre>\n\n<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>\n\n<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> that\u2019s usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a \u201cpretty print\u201d functionality (for example, used by a report generator).</p>\n\n<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>\n\n<p>Let me come right out and say it \u2014 I do not believe in debuggers. I don\u2019t really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature \u2014 most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>\n\n<pre><code>log(INFO, \"I am in the weird function and a is\", a, \"and b is\", b, \"but I got a null C \u2014 using default\", default_c)\n</code></pre>\n\n<p>But you have to do the last step \u2014 make sure every object you implement has a useful repr, so code like that can just work. This is why the \u201ceval\u201d thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If that\u2019s easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>\"MyClass(this=%r,that=%r)\" % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments \u2014 but it is a useful form to express \u201cthis is everything you need to know about this instance\u201d.</p>\n\n<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or you\u2019re defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass(\"3\")</code>.</p>\n\n<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>\n\n<p>Specifically, it is not intended to be unambiguous \u2014 notice that <code>str(3)==str(\"3\")</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be \"2010/4/12 15:35:22\", etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class \u2014 as long is it supports readability, it is an improvement.</p>\n\n<p><strong>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></strong></p>\n\n<p>This seems surprising, doesn\u2019t it? It is a little, but how readable would</p>\n\n<pre><code>[moshe is, 3, hello\nworld, this is a list, oh I don't know, containing just 4 elements]\n</code></pre>\n\n<p>be? Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when you\u2019re printing a list, just</p>\n\n<pre><code>print \"[\" + \", \".join(l) + \"]\"\n</code></pre>\n\n<p>(you can probably also figure out what to do about dictionaries.</p>\n\n<p><strong>Summary</strong></p>\n\n<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of readability.</p>\n"}, {"title": "Catch multiple exceptions in one line (except block)", "question_body": "<p>I know that I can do:</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept:\n    # do this if ANYTHING goes wrong\n</code></pre>\n\n<p>I can also do this:</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException:\n    # say please\nexcept YouAreTooShortException:\n    # stand on a ladder\n</code></pre>\n\n<p>But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException:\n    # say please\nexcept YouAreBeingMeanException:\n    # say please\n</code></pre>\n\n<p>Is there any way that I can do something like this (since the action to take in both exceptions is to <code>say please</code>):</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException, YouAreBeingMeanException:\n    # say please\n</code></pre>\n\n<p>Now this really won't work, as it matches the syntax for:</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept Exception, e:\n    # say please\n</code></pre>\n\n<p>So, my effort to catch the two distinct exceptions doesn't exactly come through.</p>\n\n<p>Is there a way to do this?</p>\n", "link": "https://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block", "question_id": 6470428, "accepted_answer_id": 6470452, "answer_body": "<p>From <a href=\"https://docs.python.org/3/tutorial/errors.html#handling-exceptions\" rel=\"noreferrer\">Python Documentation</a>:</p>\n\n<blockquote>\n  <p>An except clause may name multiple exceptions as a parenthesized tuple, for example</p>\n</blockquote>\n\n<pre><code>except (IDontLikeYouException, YouAreBeingMeanException) as e:\n    pass\n</code></pre>\n\n<p>Or, for Python 2 only:</p>\n\n<pre><code>except (IDontLikeYouException, YouAreBeingMeanException), e:\n    pass\n</code></pre>\n\n<p>Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using <code>as</code>.</p>\n"}, {"title": "How do I install pip on Windows?", "question_body": "<p><a href=\"https://pip.pypa.io/en/stable/\" rel=\"noreferrer\"><code>pip</code></a> is a replacement for <a href=\"http://setuptools.readthedocs.io/en/latest/easy_install.html\" rel=\"noreferrer\"><code>easy_install</code></a>. But should I install <code>pip</code> using <code>easy_install</code> on Windows?  Is there a better way?</p>\n", "link": "https://stackoverflow.com/questions/4750806/how-do-i-install-pip-on-windows", "question_id": 4750806, "accepted_answer_id": 12476379, "answer_body": "<h2>Python 2.7.9+ and 3.4+</h2>\n\n<p>Good news! <a href=\"https://docs.python.org/3/whatsnew/3.4.html\" rel=\"nofollow noreferrer\">Python 3.4</a> (released March 2014) and <a href=\"https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7\" rel=\"nofollow noreferrer\">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins <a href=\"http://en.wikipedia.org/wiki/Ruby_%28programming_language%29\" rel=\"nofollow noreferrer\">Ruby</a>, <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"nofollow noreferrer\">Node.js</a>, <a href=\"http://en.wikipedia.org/wiki/Haskell_%28programming_language%29\" rel=\"nofollow noreferrer\">Haskell</a>, <a href=\"http://en.wikipedia.org/wiki/Perl\" rel=\"nofollow noreferrer\">Perl</a>, <a href=\"http://en.wikipedia.org/wiki/Go_%28programming_language%29\" rel=\"nofollow noreferrer\">Go</a>&mdash;almost every other contemporary language with a majority open-source community. Thank you, Python.</p>\n\n<p>If you do find that pip is not available when using Python 3.4+ or Python 2.7.9+, simply execute e.g.:</p>\n\n<pre><code>py -3 -m ensurepip\n</code></pre>\n\n<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this <a href=\"https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719\">in the Stack Overflow question <em>Does Python have a package/module management system?</em></a>.</p>\n\n<p>And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.</p>\n\n<h2>Python 2 \u2264 2.7.8 and Python 3 \u2264 3.3</h2>\n\n<p>Flying in the face of its <a href=\"http://www.python.org/about/\" rel=\"nofollow noreferrer\">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was&mdash;until recently&mdash;ironically difficult to install.</p>\n\n<h3>Official instructions</h3>\n\n<p>Per <a href=\"https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip\" rel=\"nofollow noreferrer\">https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip</a>:</p>\n\n<p>Download <a href=\"https://bootstrap.pypa.io/get-pip.py\" rel=\"nofollow noreferrer\"><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt:</p>\n\n<pre><code>python get-pip.py\n</code></pre>\n\n<p>You possibly need an administrator command prompt to do this. Follow <em><a href=\"http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx\" rel=\"nofollow noreferrer\">Start a Command Prompt as an Administrator</a></em> (Microsoft TechNet).</p>\n\n<p>This installs the pip package, which (in Windows) contains ...\\Scripts\\pip.exe that path must be in PATH environment variable to use pip from the command line (see the second part of 'Alternative Instructions' for adding it to your PATH,</p>\n\n<h3>Alternative instructions</h3>\n\n<p>The official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced and prohibitively difficult for newbies.</p>\n\n<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:</p>\n\n<ol>\n<li><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools\" rel=\"nofollow noreferrer\">Install setuptools</a></li>\n<li><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip\" rel=\"nofollow noreferrer\">Install pip</a></li>\n</ol>\n\n<p>For me, this installed Pip at <code>C:\\Python27\\Scripts\\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (for example, <code>C:\\Python27\\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>\n\n<pre><code>pip install httpie\n</code></pre>\n\n<p>There you go (hopefully)! Solutions for common problems are given below:</p>\n\n<h3>Proxy problems</h3>\n\n<p>If you work in an office, you might be behind an HTTP proxy. If so, set the environment variables <a href=\"http://docs.python.org/2/library/urllib.html\" rel=\"nofollow noreferrer\"><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>\n\n<pre><code>http://proxy_url:port\nhttp://username:password@proxy_url:port\n</code></pre>\n\n<p>If you're really unlucky, your proxy might be a Microsoft <a href=\"https://en.wikipedia.org/wiki/NT_LAN_Manager\" rel=\"nofollow noreferrer\">NTLM</a> proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href=\"http://cntlm.sourceforge.net/\" rel=\"nofollow noreferrer\">http://cntlm.sourceforge.net/</a></p>\n\n<h3>Unable to find vcvarsall.bat</h3>\n\n<p>Python modules can be partly written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>\n\n<blockquote>\n  <p>Error: Unable to find vcvarsall.bat</p>\n</blockquote>\n\n<p>You can fix that by <a href=\"https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat\">installing a C++ compiler</a> such as <a href=\"http://en.wikipedia.org/wiki/MinGW\" rel=\"nofollow noreferrer\">MinGW</a> or <a href=\"http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions\" rel=\"nofollow noreferrer\">Visual C++</a>. Microsoft actually ships one specifically for use with Python. Or try <em><a href=\"http://aka.ms/vcpython27\" rel=\"nofollow noreferrer\">Microsoft Visual C++ Compiler for Python 2.7</a></em>.</p>\n\n<p>Often though it's easier to check <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"nofollow noreferrer\">Christoph's site</a> for your package.</p>\n"}, {"title": "How do I pass a variable by reference?", "question_body": "<p>The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'</p>\n\n<pre><code>class PassByReference:\n    def __init__(self):\n        self.variable = 'Original'\n        self.change(self.variable)\n        print(self.variable)\n\n    def change(self, var):\n        var = 'Changed'\n</code></pre>\n\n<p>Is there something I can do to pass the variable by actual reference?</p>\n", "link": "https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference", "question_id": 986006, "accepted_answer_id": 986145, "answer_body": "<p>Arguments are <a href=\"http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference\" rel=\"noreferrer\">passed by assignment</a>. The rationale behind this is twofold:</p>\n\n<ol>\n<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>\n<li>some data types are mutable, but others aren't</li>\n</ol>\n\n<p>So:</p>\n\n<ul>\n<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>\n<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>\n</ul>\n\n<p>To make it even more clear, let's have some examples. </p>\n\n<h2>List - a mutable type</h2>\n\n<p><strong>Let's try to modify the list that was passed to a method:</strong></p>\n\n<pre><code>def try_to_change_list_contents(the_list):\n    print('got', the_list)\n    the_list.append('four')\n    print('changed to', the_list)\n\nouter_list = ['one', 'two', 'three']\n\nprint('before, outer_list =', outer_list)\ntry_to_change_list_contents(outer_list)\nprint('after, outer_list =', outer_list)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_list = ['one', 'two', 'three']\ngot ['one', 'two', 'three']\nchanged to ['one', 'two', 'three', 'four']\nafter, outer_list = ['one', 'two', 'three', 'four']\n</code></pre>\n\n<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>\n\n<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>\n\n<pre><code>def try_to_change_list_reference(the_list):\n    print('got', the_list)\n    the_list = ['and', 'we', 'can', 'not', 'lie']\n    print('set to', the_list)\n\nouter_list = ['we', 'like', 'proper', 'English']\n\nprint('before, outer_list =', outer_list)\ntry_to_change_list_reference(outer_list)\nprint('after, outer_list =', outer_list)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_list = ['we', 'like', 'proper', 'English']\ngot ['we', 'like', 'proper', 'English']\nset to ['and', 'we', 'can', 'not', 'lie']\nafter, outer_list = ['we', 'like', 'proper', 'English']\n</code></pre>\n\n<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>\n\n<h2>String - an immutable type</h2>\n\n<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>\n\n<p><strong>Now, let's try to change the reference</strong></p>\n\n<pre><code>def try_to_change_string_reference(the_string):\n    print('got', the_string)\n    the_string = 'In a kingdom by the sea'\n    print('set to', the_string)\n\nouter_string = 'It was many and many a year ago'\n\nprint('before, outer_string =', outer_string)\ntry_to_change_string_reference(outer_string)\nprint('after, outer_string =', outer_string)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_string = It was many and many a year ago\ngot It was many and many a year ago\nset to In a kingdom by the sea\nafter, outer_string = It was many and many a year ago\n</code></pre>\n\n<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>\n\n<p>I hope this clears things up a little.</p>\n\n<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, \"Is there something I can do to pass the variable by actual reference?\". Let's work on that.</p>\n\n<h2>How do we get around this?</h2>\n\n<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>\n\n<pre><code>def return_a_whole_new_string(the_string):\n    new_string = something_to_do_with_the_old_string(the_string)\n    return new_string\n\n# then you could call it like\nmy_string = return_a_whole_new_string(my_string)\n</code></pre>\n\n<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>\n\n<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):\n    new_string = something_to_do_with_the_old_string(stuff_to_change[0])\n    stuff_to_change[0] = new_string\n\n# then you could call it like\nwrapper = [my_string]\nuse_a_wrapper_to_simulate_pass_by_reference(wrapper)\n\ndo_something_with(wrapper[0])\n</code></pre>\n\n<p>Although this seems a little cumbersome.</p>\n"}, {"title": "&quot;Least Astonishment&quot; and the Mutable Default Argument", "question_body": "<p>Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:</p>\n\n<pre><code>def foo(a=[]):\n    a.append(5)\n    return a\n</code></pre>\n\n<p>Python novices would expect this function to always return a list with only one element: <code>[5]</code>. The result is instead very different, and very astonishing (for a novice):</p>\n\n<pre><code>&gt;&gt;&gt; foo()\n[5]\n&gt;&gt;&gt; foo()\n[5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5, 5]\n&gt;&gt;&gt; foo()\n</code></pre>\n\n<p>A manager of mine once had his first encounter with this feature, and called it \"a dramatic design flaw\" of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?)</p>\n\n<p><strong>Edit</strong>: </p>\n\n<p>Baczek made an interesting example. Together with most of your comments and Utaal's in particular, I elaborated further:</p>\n\n<pre><code>&gt;&gt;&gt; def a():\n...     print(\"a executed\")\n...     return []\n... \n&gt;&gt;&gt;            \n&gt;&gt;&gt; def b(x=a()):\n...     x.append(5)\n...     print(x)\n... \na executed\n&gt;&gt;&gt; b()\n[5]\n&gt;&gt;&gt; b()\n[5, 5]\n</code></pre>\n\n<p>To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function or \"together\" with it?</p>\n\n<p>Doing the binding inside the function would mean that <code>x</code> is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the <code>def</code> line would be \"hybrid\" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.</p>\n\n<p>The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.</p>\n", "link": "https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument", "question_id": 1132941, "accepted_answer_id": 1145781, "answer_body": "<p>Actually, this is not a design flaw, and it is not because of internals, or performance.<br>\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>\n\n<p>As soon as you get to think into this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of \"member data\" and therefore their state may change from one call to the other - exactly as in any other object.</p>\n\n<p>In any case, Effbot has a very nice explanation of the reasons for this behavior in <a href=\"http://effbot.org/zone/default-values.htm\" rel=\"noreferrer\">Default Parameter Values in Python</a>.<br>\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>\n"}, {"title": "Add new keys to a dictionary?", "question_body": "<p>Is it possible to add a key to a Python dictionary after it has been created? It doesn't seem to have an <code>.add()</code> method.</p>\n", "link": "https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary", "question_id": 1024847, "accepted_answer_id": 1024851, "answer_body": "<pre><code>d = {'key':'value'}\nprint(d)\n# {'key': 'value'}\nd['mynewkey'] = 'mynewvalue'\nprint(d)\n# {'mynewkey': 'mynewvalue', 'key': 'value'}\n</code></pre>\n"}]