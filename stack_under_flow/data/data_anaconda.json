[{"title": "Installation Issue with matplotlib Python", "question_body": "<p>I have issue after installing the <strong>matplotlib</strong> package unable to <strong>import matplotlib.pyplot as plt</strong>. Any suggestion will be greatly appreciate.  </p>\n\n<pre><code>&gt;&gt;&gt; import matplotlib.pyplot as plt\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"//anaconda/lib/python2.7/site-packages/matplotlib-1.3.1-py2.7-macosx-10.5-x86_64.egg/matplotlib/pyplot.py\", line 98, in &lt;module&gt;\n    _backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup()\n  File \"//anaconda/lib/python2.7/site-packages/matplotlib-1.3.1-py2.7-macosx-10.5-x86_64.egg/matplotlib/backends/__init__.py\", line 28, in pylab_setup\n    globals(),locals(),[backend_name],0)\n  File \"//anaconda/lib/python2.7/site-packages/matplotlib-1.3.1-py2.7-macosx-10.5-x86_64.egg/matplotlib/backends/backend_macosx.py\", line 21, in &lt;module&gt;\n    from matplotlib.backends import _macosx\n**RuntimeError**: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework. See the Python documentation for more information on installing Python as a framework on Mac OS X. Please either reinstall Python as a framework, or try one of the other backends.\n</code></pre>\n", "link": "https://stackoverflow.com/questions/21784641/installation-issue-with-matplotlib-python", "question_id": 21784641, "accepted_answer_id": 21789908, "answer_body": "<p><strong>Problem Cause</strong> \nIn mac os image rendering back end of matplotlib (what-is-a-backend to render using the API of Cocoa by default). There is Qt4Agg and GTKAgg and as a back-end is not the default. Set the back end of macosx that is differ compare with other windows or linux os. </p>\n\n<p>I resolve this issue following ways:</p>\n\n<ul>\n<li>I assume you have installed the pip matplotlib, there is a directory in you root called <code>~/.matplotlib</code>. </li>\n<li>Create a file <code>~/.matplotlib/matplotlibrc</code> there and add the following code: <code>backend: TkAgg</code></li>\n</ul>\n\n<p>From this <a href=\"http://matplotlib.org/examples/index.html\" rel=\"nofollow noreferrer\">link</a> you can try different diagram. </p>\n"}, {"title": "Conda environments not showing up in Jupyter Notebook", "question_body": "<p>I installed Anaconda (with Python 2.7), and installed Tensorflow in an environment called <code>tensorflow</code>. I can import Tensorflow successfully in that environment.</p>\n\n<p>The problem is that Jupyter Notebook does not recognize the new environment I just created. No matter I start Jupyter Notebook from the GUI Navigator or from the command line <strong>within</strong> the <code>tensorflow</code> env, there is only one kernel in the menu called <code>Python [Root]</code>, and Tensorflow cannot be imported. Of course, I clicked on that option multiple times, saved file, re-opened, but these did not help.</p>\n\n<p>Strangely, I can see the two environments when I open the <code>Conda</code> tab on the front page of Jupyter. But when I open the <code>Files</code> tab, and try to <code>new</code> a notebook, I still end up with only one kernel.</p>\n\n<p>I looked at this question:\n<a href=\"https://stackoverflow.com/questions/37433363/link-conda-environment-with-jupyter-notebook\">Link Conda environment with Jupyter Notebook</a>\nBut there isn't such a directory as <code>~/Library/Jupyter/kernels</code> on my computer! This Jupyter directory only has one sub-directory called <code>runtime</code>.</p>\n\n<p>I am really confused. Are Conda environments supposed to become kernels automatically? (I followed <a href=\"https://ipython.readthedocs.io/en/stable/install/kernel_install.html\">https://ipython.readthedocs.io/en/stable/install/kernel_install.html</a> to manually set up the kernels, but was told that <code>ipykernel</code> was not found.)</p>\n", "link": "https://stackoverflow.com/questions/39604271/conda-environments-not-showing-up-in-jupyter-notebook", "question_id": 39604271, "accepted_answer_id": null}, {"title": "Python Anaconda - How to Safely Uninstall", "question_body": "<p>I installed Python Anaconda on Mac (OS Mavericks). I wanted to revert to the default version of Python on my Mac. What's the best way to do this? Should I delete the <code>~/anaconda</code> directory? Any other changes required? </p>\n\n<p>Currently when I run <code>which python</code> I get this path:</p>\n\n<p><code>/Users/username/anaconda/bin/python</code></p>\n", "link": "https://stackoverflow.com/questions/22585235/python-anaconda-how-to-safely-uninstall", "question_id": 22585235, "accepted_answer_id": null}, {"title": "How to change the Jupyter start-up folder", "question_body": "<p>I tried following the instructions given on the <a href=\"http://jupyter-notebook-beginner-guide.readthedocs.org/en/latest/execute.html#change-jupyter-notebook-startup-folder-windows\" rel=\"noreferrer\">Jupyter Notebook documentation</a>.</p>\n\n<p>Unfortunately, I haven't been able to figure it out. Where exactly is this \"start in\" field?</p>\n\n<p>I've a windows 7 (64 bit) system, with Anaconda3 installed (not in C drive). I want to change Jupyter start folder location.</p>\n", "link": "https://stackoverflow.com/questions/35254852/how-to-change-the-jupyter-start-up-folder", "question_id": 35254852, "accepted_answer_id": 39453881, "answer_body": "<p><code>cd</code> into the directory or a parent directory (with the intended directory you will work nested in it).</p>\n\n<p>Note it must be a folder (<code>E:\\&gt;</code>   --- This will not work)</p>\n\n<p>Then just run the command <code>jupyter notebook</code></p>\n"}, {"title": "Bulk package updates using Conda", "question_body": "<p>Is there a way (using conda update) that I can list outdated packages and select or bulk update (compatible) packages in Anaconda?</p>\n\n<p>It doesn't make much sense updating the packages individually as there are hundreds of them.</p>\n", "link": "https://stackoverflow.com/questions/24958833/bulk-package-updates-using-conda", "question_id": 24958833, "accepted_answer_id": 24965191, "answer_body": "<p>You want <code>conda update --all</code>.</p>\n\n<p><code>conda search --outdated</code> will show outdated packages, and <code>conda update --all</code> will update them (note that the latter will not update you from Python 2 to Python 3, but the former will show Python as being outdated if you do use Python 2). </p>\n"}, {"title": "How do I update Anaconda?", "question_body": "<p>I have Anaconda installed on my computer and I'd like to update it.  In Navigator I can see that there are several individual packages that can be updated, but also an <code>anaconda</code> package that sometimes has a version number and sometimes says <code>custom</code>.  How do I proceed?</p>\n\n<p><a href=\"https://i.stack.imgur.com/YZraz.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/YZraz.png\" alt=\"enter image description here\"></a></p>\n", "link": "https://stackoverflow.com/questions/45197777/how-do-i-update-anaconda", "question_id": 45197777, "accepted_answer_id": null}, {"title": "How do I install Python OpenCV through Conda?", "question_body": "<p>I'm trying to install OpenCV for Python through <a href=\"https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)\" rel=\"noreferrer\">Anaconda</a>, but I can't seem to figure this out.</p>\n\n<p>I tried</p>\n\n<pre><code>conda install opencv\nconda install cv2\n</code></pre>\n\n<p>I also tried searching</p>\n\n<pre><code>conda search cv\n</code></pre>\n\n<p>No cigar. I ran across this which lists <code>opencv</code> as an included package:</p>\n\n<p><a href=\"http://docs.continuum.io/anaconda/pkgs.html\" rel=\"noreferrer\">http://docs.continuum.io/anaconda/pkgs.html</a></p>\n\n<p>After running <code>conda info</code> I noticed my version is 3.4.1, but I couldn't seem to find any information about this version online. I'm pretty confused about this.</p>\n\n<p>Am I missing something pretty obvious here? If <code>opencv</code> was available for a previous version of Anaconda, then why wouldn't it be available for the newer version? And why does that link only show me documentation for version 1.9.2?</p>\n", "link": "https://stackoverflow.com/questions/23119413/how-do-i-install-python-opencv-through-conda", "question_id": 23119413, "accepted_answer_id": null}, {"title": "How to run Conda?", "question_body": "<p>How do I run conda on a linux machine?</p>\n\n<p>I installed Anaconda, and can run Python, so I assume that I installed it correctly.</p>\n\n<p>Following this guide:  <a href=\"http://docs.continuum.io/conda/intro.html\" rel=\"noreferrer\">http://docs.continuum.io/conda/intro.html</a>, I am trying to installed Python33, so I am copying and pasting the following line into my console:</p>\n\n<pre><code>conda create -n py33 python=3.3 anaconda\n</code></pre>\n\n<p>However, that gives me an error:</p>\n\n<pre><code>-bash: conda: command not found\n</code></pre>\n\n<p>What do I need to do to run Conda?</p>\n", "link": "https://stackoverflow.com/questions/18675907/how-to-run-conda", "question_id": 18675907, "accepted_answer_id": null}, {"title": "How can I rename a conda environment?", "question_body": "<p>I have a conda environment named <code>old_name</code>, how can I change its name to <code>new_name</code> without breaking references?</p>\n", "link": "https://stackoverflow.com/questions/42231764/how-can-i-rename-a-conda-environment", "question_id": 42231764, "accepted_answer_id": 42231765, "answer_body": "<p>You can't.</p>\n\n<p>One workaround is to <a href=\"https://conda.io/docs/commands/conda-create.html\" rel=\"noreferrer\">create</a> clone environment, and then <a href=\"https://conda.io/docs/commands/conda-remove.html\" rel=\"noreferrer\">remove</a> original one:</p>\n\n<p>(remember about deactivating current environment with <code>deactivate</code> on Windows and <code>source deactivate</code> on macOS/Linux)</p>\n\n<pre><code>conda create --name new_name --clone old_name\nconda remove --name old_name --all # or its alias: `conda env remove --name old_name`\n</code></pre>\n\n<p>There are several drawbacks of this method:</p>\n\n<ol>\n<li>it redownloads packages - you can use <code>--offline</code> flag to disable it,</li>\n<li>time consumed on copying environment's files,</li>\n<li>temporary double disk usage.</li>\n</ol>\n\n<p>There is an open <a href=\"https://github.com/conda/conda/issues/3097\" rel=\"noreferrer\">issue</a> requesting this feature.</p>\n"}, {"title": "Does Conda replace the need for virtualenv?", "question_body": "<p>I recently discovered <a href=\"http://conda.pydata.org/docs/index.html\" rel=\"noreferrer\">Conda</a> after I was having trouble installing SciPy, specifically on a Heroku app that I am developing.</p>\n\n<p>With Conda you create environments, very similar to what <a href=\"https://virtualenv.readthedocs.org/en/latest/\" rel=\"noreferrer\">virtualenv</a> does. My questions are:</p>\n\n<ol>\n<li>If I use Conda will it replace the need for virtualenv? If not, how do I use the two together? Do I install virtualenv in Conda, or Conda in virtualenv?</li>\n<li>Do I still need to use pip? If so, will I still be able to install packages with pip in an isolated environment? </li>\n</ol>\n", "link": "https://stackoverflow.com/questions/34398676/does-conda-replace-the-need-for-virtualenv", "question_id": 34398676, "accepted_answer_id": 34398794, "answer_body": "<ol>\n<li><p>Conda replaces virtualenv. In my opinion it is better. It is not limited to Python but can be used for other languages too. In my experience it provides a much smoother experience, especially for scientific packages. The first time I got MayaVi properly installed on Mac was with <code>conda</code>.   </p></li>\n<li><p>You can still use <code>pip</code>. In fact, <code>conda</code> installs <code>pip</code> in each new environment. It knows about pip-installed packages.</p></li>\n</ol>\n\n<p>For example:</p>\n\n<pre><code>conda list\n</code></pre>\n\n<p>lists all installed packages in your current environment.\nConda-installed packages show up like this:</p>\n\n<pre><code>sphinx_rtd_theme          0.1.7                    py35_0    defaults\n</code></pre>\n\n<p>and the ones installed via <code>pip</code>like this:</p>\n\n<pre><code>wxpython-common           3.0.0.0                   &lt;pip&gt;\n</code></pre>\n"}, {"title": "In which conda environment is Jupyter executing?", "question_body": "<p>I have jupyter/anaconda/python3.5.</p>\n\n<ol>\n<li><p>How can I know which conda environment is my jupyter notebook running on?    </p></li>\n<li><p>How can I launch jupyter from a new conda environment?</p></li>\n</ol>\n", "link": "https://stackoverflow.com/questions/37085665/in-which-conda-environment-is-jupyter-executing", "question_id": 37085665, "accepted_answer_id": 39070588, "answer_body": "<h1>Question 1: Find the current notebook's conda environment</h1>\n\n<p>Open the notebook in Jupyter Notebooks and look in the upper right corner of the screen. </p>\n\n<p>It should say, for example, \"Python [env_name]\" if the language is Python and it's using an environment called env_name. </p>\n\n<p><a href=\"https://i.stack.imgur.com/c22av.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/c22av.png\" alt=\"jupyter notebook with name of environment\"></a></p>\n\n<hr>\n\n<h1>Question 2: Start Jupyter Notebook from within a different conda environment</h1>\n\n<p>Activate a conda environment in your terminal using <code>source activate &lt;environment name&gt;</code> before you run <code>jupyter notebook</code>. This <a href=\"https://stackoverflow.com/q/38984238/3345375\">sets the default environment</a> for Jupyter Notebooks. Otherwise, the [Root] environment is the default.</p>\n\n<p><a href=\"https://i.stack.imgur.com/0Qgkx.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/0Qgkx.png\" alt=\"jupyter notebooks home screen, conda tab, create new environment\"></a></p>\n\n<p>You can also create new environments from within Jupyter Notebook (home screen, Conda tab, and then click the plus sign).</p>\n\n<p>And you can create a notebook in any environment you want. Select the \"Files\" tab on the home screen and click the \"New\" dropdown menu, and in that menu select a Python environment from the list.</p>\n\n<p><a href=\"https://i.stack.imgur.com/otShT.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/otShT.png\" alt=\"jupyter notebooks home screen, files tab, create new notebook\"></a></p>\n"}, {"title": "How to install 2 Anacondas (Python 2 and 3) on Mac OS", "question_body": "<p>I'm relatively new in Mac OS. I've just installed XCode (for c++ compiler) and Anaconda with the latest Python 3 (for myself). Now I'm wondering how to install properly second Anaconda (for work) with Python 2?</p>\n\n<p>I need both versions to work with iPython and Spyder IDE. Ideal way is to have totally separate Python environments. For example, I wish I could write like <code>conda install scikit-learn</code> for Python 3 environment and something like <code>conda2 install scikit-learn</code> for Python 2. </p>\n", "link": "https://stackoverflow.com/questions/24405561/how-to-install-2-anacondas-python-2-and-3-on-mac-os", "question_id": 24405561, "accepted_answer_id": 24415581, "answer_body": "<p>There is no need to install Anaconda again. Conda, the package manager for Anaconda, fully supports separated environments. The easiest way to create an environment for Python 2.7 is to  do</p>\n\n<pre><code>conda create -n python2 python=2.7 anaconda\n</code></pre>\n\n<p>This will create an environment named <code>python2</code> that contains the Python 2.7 version of Anaconda. You can activate this environment with</p>\n\n<pre><code>source activate python2\n</code></pre>\n\n<p>This will put that environment (typically <code>~/anaconda/envs/python2</code>) in front in your <code>PATH</code>, so that when you type <code>python</code> at the terminal it will load the Python from that environment. </p>\n\n<p>If you don't want all of Anaconda, you can replace <code>anaconda</code> in the command above with whatever packages you want. You can use <code>conda</code> to install packages in that environment later, either by using the <code>-n python2</code> flag to <code>conda</code>, or by activating the environment. </p>\n"}, {"title": "Anaconda vs. miniconda", "question_body": "<p>In the <a href=\"https://repo.continuum.io/\" rel=\"noreferrer\">Anaconda repository</a>, there are two types of installers:</p>\n\n<p>\"Anaconda installers\" and \"Miniconda installers\". </p>\n\n<p>What are their differences? Besides, for an installer file, <code>Anaconda2-4.4.0.1-Linux-ppc64le.sh</code>, what does <code>2-4.4.0.1</code> stand for?</p>\n", "link": "https://stackoverflow.com/questions/45421163/anaconda-vs-miniconda", "question_id": 45421163, "accepted_answer_id": 45421204, "answer_body": "<p>The difference is that miniconda is just shipping the repository management system. So when you install it there is just the management system without packages. Whereas with Anaconda, it is like a distribution with some built in packages. </p>\n\n<p>Like with any Linux distribution, there are some releases which bundles lots of updates for the included packages. That is why there is a difference in version numbering. If you only decide to upgrade Anaconda, you are updating a whole system.</p>\n"}, {"title": "How to change default Anaconda python environment", "question_body": "<p>I've installed Anaconda and created two extra environments: py3k (which holds Python 3.3) and py34 (which holds Python 3.4). Besides those, I have a default environment named 'root' which the Anaconda installer created by default and which holds Python 2.7. This last one is the default, whenever I launch 'ipython' from the terminal it gives me version 2.7. In order to work with Python 3.4, I need to issue the commands (in the shell)</p>\n\n<pre><code>source activate py34\nipython\n</code></pre>\n\n<p>which change the default environment to Python 3.4. This works fine, but it's annoying since most of the time I work on Python 3.4, instead of Python 2.7 (which I hold for teaching purposes, it's a rather long story). Anyway, I'll like to know how to change the default environment to Python 3.4, bearing in mind that I don't want to reinstall everything from scratch.  </p>\n", "link": "https://stackoverflow.com/questions/28436769/how-to-change-default-anaconda-python-environment", "question_id": 28436769, "accepted_answer_id": 28460907, "answer_body": "<p>First, make sure you have the latest version of conda by running</p>\n\n<pre><code>conda update conda\n</code></pre>\n\n<p>Then run</p>\n\n<pre><code>conda install python=3.5\n</code></pre>\n\n<p>This will attempt to update all your packages in your root environment to Python 3 versions. If it is not possible (e.g., because some package is not built for Python 3.5), it will give you an error message indicating which package(s) caused the issue.</p>\n\n<p>If you installed packages with pip, you'll have to reinstall them. </p>\n"}, {"title": "How do I upgrade to Python 3.6 with conda?", "question_body": "<p>I'm new to Conda package management and I want to get the latest version of Python to use f-strings in my code. Currently my version is (<code>python -V</code>):</p>\n\n<pre><code>Python 3.5.2 :: Anaconda 4.2.0 (x86_64)\n</code></pre>\n\n<p>How would I upgrade to Python 3.6?</p>\n", "link": "https://stackoverflow.com/questions/41535881/how-do-i-upgrade-to-python-3-6-with-conda", "question_id": 41535881, "accepted_answer_id": 41536068, "answer_body": "<p>Anaconda has not updated python internally to 3.6.</p>\n\n<p>a) Method 1</p>\n\n<ol>\n<li>If you wanted to update you will type <code>conda update python</code></li>\n<li>To update anaconda type <code>conda update anaconda</code></li>\n<li><p>If you want to upgrade between major python version like 3.5 to 3.6, you'll have to do</p>\n\n<pre><code>conda install python==$pythonversion$\n</code></pre></li>\n</ol>\n\n<p>b) Method 2 - Create a new environment (Better Method)</p>\n\n<pre><code>conda create --name py36 python=3.6\n</code></pre>\n\n<p>c) To get the absolute latest python(3.6.5 at time of writing)</p>\n\n<pre><code>conda create --name py365 python=3.6.5 --channel conda-forge\n</code></pre>\n\n<p>You can see all this from <a href=\"http://conda.pydata.org/docs/using/pkgs.html#package-update\" rel=\"noreferrer\">here</a></p>\n\n<p>Also, refer to this for force <a href=\"https://www.scivision.co/switch-anaconda-python-36/\" rel=\"noreferrer\">upgrading</a> </p>\n\n<p>EDIT: Anaconda now has a Python 3.6 version <a href=\"https://www.continuum.io/downloads\" rel=\"noreferrer\">here</a></p>\n"}, {"title": "How do I keep track of pip-installed packages in an Anaconda (Conda) environment?", "question_body": "<p>I've installed and have been using the <a href=\"https://en.wikipedia.org/wiki/Anaconda_%28Python_distribution%29\" rel=\"noreferrer\">Anaconda</a> Python distribution, and I have started using the Anaconda (Conda) environment. I can use the standard <code>conda install...</code> command to put packages from the distribution into my environments, but to use anything outside (i.e. Flask-WTF, flask-sqlalchemy, and alembic) I need to use <code>pip install</code> in the active environment. However, when I look at the contents of the environment, either in the directory, or using <code>conda list</code> these <code>pip install</code>ed packages don't show up. </p>\n\n<p>Using <code>pip freeze</code> and <code>pip list</code> just lists every package I've ever installed. </p>\n\n<p>Is there a way to keep track of what is in each of my Anaconda <code>env</code>s (both <code>pip</code> and <code>conda</code> installed)? </p>\n", "link": "https://stackoverflow.com/questions/18640305/how-do-i-keep-track-of-pip-installed-packages-in-an-anaconda-conda-environment", "question_id": 18640305, "accepted_answer_id": 33694864, "answer_body": "<p><a href=\"https://github.com/conda/conda-env/\">conda-env</a> now does this automatically (if pip was installed with conda).</p>\n\n<p>You can see how this works by using the export tool used for migrating an environment:</p>\n\n<pre><code>conda env export -n &lt;env-name&gt; &gt; environment.yml\n</code></pre>\n\n<p>The file will list both conda packages and pip packages:</p>\n\n<pre><code>name: stats\nchannels:\n  - javascript\ndependencies:\n  - python=3.4\n  - bokeh=0.9.2\n  - numpy=1.9.*\n  - nodejs=0.10.*\n  - flask\n  - pip:\n    - Flask-Testing\n</code></pre>\n\n<p>If you're looking to follow through with exporting the environment, move <code>environment.yml</code> to the new host machine and run:</p>\n\n<pre><code>conda env create -f path/to/environment.yml\n</code></pre>\n"}, {"title": "How to activate an Anaconda environment", "question_body": "<p>I'm on Windows 8, using Anaconda 1.7.5 64bit.</p>\n\n<p>I created a new Anaconda environment with</p>\n\n<p><code>conda create -p ./test python=2.7 pip</code></p>\n\n<p>from <code>C:\\Pr\\TEMP\\venv\\</code>.</p>\n\n<p>This worked well (there is a folder with a new python distribution). conda tells me to type </p>\n\n<p><code>activate C:\\PR\\TEMP\\venv\\test</code> </p>\n\n<p>to activate the environment, however this returns:</p>\n\n<p><code>No environment named \"C:\\PR\\temp\\venv\\test\" exists in C:\\PR\\Anaconda\\envs</code></p>\n\n<p>How can I activate the environment? What am I doing wrong?</p>\n", "link": "https://stackoverflow.com/questions/20081338/how-to-activate-an-anaconda-environment", "question_id": 20081338, "accepted_answer_id": 21707160, "answer_body": "<p>If this happens you would need to set the PATH for your environment (so that it gets the right Python from the environment and Scripts\\ on Windows).</p>\n\n<p>Imagine you have created an environment called py33 by using:</p>\n\n<pre><code>conda create -n py33 python=3.3 anaconda\n</code></pre>\n\n<p>Here the folders are created by default in Anaconda\\envs, so you need to set the PATH as:</p>\n\n<pre><code>set PATH=C:\\Anaconda\\envs\\py33\\Scripts;C:\\Anaconda\\envs\\py33;%PATH%\n</code></pre>\n\n<p>Now it should work in the command window:</p>\n\n<pre><code>activate py33\n</code></pre>\n\n<p>The line above is the Windows equivalent to the code that normally appears in the tutorials for Mac and Linux:</p>\n\n<pre><code>$ source activate py33\n</code></pre>\n\n<p>More info:\n<a href=\"https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/8T8i11gO39U\" rel=\"noreferrer\">https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/8T8i11gO39U</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/17386880/does-anaconda-create-a-separate-pythonpath-variable-for-each-new-environment\">Does `anaconda` create a separate PYTHONPATH variable for each new environment?</a></p>\n"}, {"title": "anaconda update all possible packages?", "question_body": "<p>I tried the <code>conda search --outdated</code>, there are lots of outdated packages, for example the scipy is 0.17.1 but the latest is 0.18.0. However, when I do the <code>conda update --all</code>. It will not update any packages.</p>\n\n<p><strong>update 1</strong></p>\n\n<pre><code>conda update --all --alt-hint\n\nFetching package metadata .......\nSolving package specifications: ..........\n\n# All requested packages already installed.\n# packages in environment at /home/user/opt/anaconda2:\n#\n</code></pre>\n\n<p><strong>update 2</strong></p>\n\n<p>I can update those packages separately. I can do <code>conda update scipy</code>. But why I cannot update all of them in one go?</p>\n", "link": "https://stackoverflow.com/questions/38972052/anaconda-update-all-possible-packages", "question_id": 38972052, "accepted_answer_id": 44072944, "answer_body": "<p>TL;DR: <strong>dependency conflicts:</strong> Updating one <strong>requires</strong> <em>(by it's requirements)</em> to downgrade another</p>\n\n<p>You are right:</p>\n\n<pre><code>conda update --all\n</code></pre>\n\n<p>is actually the way to go. Conda always tries to upgrade the packages to the newest version in the series (say Python 2.x or 3.x). </p>\n\n<h2>Dependency conflicts</h2>\n\n<p>But it is possible that there are dependency conflicts (which prevent a further upgrade). Conda usually warns very explicitly if they occur.</p>\n\n<p>e.g. X requires Y &lt;5.0, so Y will never be >= 5.0</p>\n\n<p>That's why you 'cannot' upgrade them all.</p>\n\n<h3>Resolving</h3>\n\n<p><em>To add: maybe it could work but a newer version of X working with Y > 5.0 is not available in conda. It is possible to install with pip, since more packages are available in pip. But be aware that pip also installs packages if dependency conflicts exist and that it usually breaks your conda environment in the sense that you cannot reliably install with conda anymore. If you do that, do it as a last resort and after all packages have been installed with conda. It's rather a hack.</em></p>\n\n<p>A safe way you can try is to add <a href=\"https://conda-forge.org/\" rel=\"nofollow noreferrer\">conda-forge</a> as a channel when upgrading (add <code>-c conda-forge</code> as a flag) or any other channel you find that contains your package <em>if you really need this new version</em>. This way conda does also search in this places for available packages.</p>\n\n<p><strong>Considering your update</strong>: You <em>can</em> upgrade them each separately, but doing so will not only include an upgrade but also a downgrade of another package as well. Say, to add to the example above:</p>\n\n<p>X > 2.0 requires Y &lt; 5.0, X &lt; 2.0 requires Y > 5.0</p>\n\n<p>So upgrading Y > 5.0 implies downgrading X to &lt; 2.0 and vice versa.</p>\n\n<p>(<em>this is a pedagogical example, of course, but it's the same in reality, usually just with more complicated dependencies and sub-dependencies</em>)</p>\n\n<p>So you still cannot upgrade <em>them all</em> by doing the upgrades separately; the dependencies are just not satisfiable so earlier or later, an upgrade will downgrade an already upgraded package again. Or break the compatibility of the packages (which you usually don't want!), which is only possible by explicitly invoking an <em>ignore-dependencies</em> and <em>force</em>-command. But that is only to <em>hack</em> your way around issues, definitely not the normal-user case!</p>\n"}, {"title": "How to uninstall Anaconda completely from macOS", "question_body": "<p>How can I completely uninstall Anaconda from MacOS Sierra and revert back to the original Python? I have tried using <code>conda-clean -yes</code> but that doesn't work. I also remove the stuff in <code>~/.bash_profile</code> but it still uses the Anaconda python and I can still run the <code>conda</code> command.</p>\n", "link": "https://stackoverflow.com/questions/42182706/how-to-uninstall-anaconda-completely-from-macos", "question_id": 42182706, "accepted_answer_id": 42182997, "answer_body": "<p>To remove the configs:</p>\n\n<pre><code>conda install anaconda-clean\nanaconda-clean --yes\n</code></pre>\n\n<p>Once the configs are removed you can delete the anaconda install folder, which is usually under your home dir:</p>\n\n<pre><code>rm -rf ~/anaconda3\n</code></pre>\n\n<p>Also, the <code>anaconda-clean --yes</code> command creates a backup in your home directory of the format <code>~/.anaconda_backup/&lt;timestamp&gt;</code>. Make sure to delete that one also.</p>\n\n<hr>\n\n<p><strong>EDIT (v5.2.0)</strong>: Now if you want to clean all, you will also have to delete the two last lines added to your <code>.bash_profile</code>. They look like:</p>\n\n<pre><code># added by Anaconda3 5.2.0 installer\nexport PATH=\"/Users/ody/anaconda3/bin:$PATH\"\n</code></pre>\n"}, {"title": "How do I revert to a previous package in Anaconda?", "question_body": "<p>If I do </p>\n\n<pre><code>conda info pandas\n</code></pre>\n\n<p>I can see all of the packages available.</p>\n\n<p>I updated my <code>pandas</code> to the latest this morning, but I need to revert to a prior version now. I tried</p>\n\n<pre><code>conda update pandas 0.13.1\n</code></pre>\n\n<p>but that didn't work. How do I specify which version to use?</p>\n", "link": "https://stackoverflow.com/questions/23974217/how-do-i-revert-to-a-previous-package-in-anaconda", "question_id": 23974217, "accepted_answer_id": 23974240, "answer_body": "<p>I had to use the <code>install</code> function instead:</p>\n\n<pre><code>conda install pandas=0.13.1\n</code></pre>\n"}, {"title": "Anaconda vs. EPD Enthought vs. manual installation of Python", "question_body": "<p>What are the relative merits / downsides of various Python bundles (EPD / Anaconda) vs. a manual install?</p>\n\n<p>I have installed EPD academic, and I have no issues with it. It provides more packages that I think I will ever need, and it is very easy to update using enpkg enstaller. The EPD academic licence requires yearly renewal however and the free version does not do updates as easily.</p>\n\n<p>At the moment I really only use a handful of packages such as <a href=\"https://en.wikipedia.org/wiki/Pandas_%28software%29\">Pandas</a>, <a href=\"http://en.wikipedia.org/wiki/NumPy\">NumPy</a>, <a href=\"http://en.wikipedia.org/wiki/SciPy\">SciPy</a>, <a href=\"http://en.wikipedia.org/wiki/Matplotlib\">matplotlib</a>, <a href=\"http://en.wikipedia.org/wiki/IPython\">IPython</a>, <a href=\"http://statsmodels.sourceforge.net/\">Statsmodels</a> and their respective dependencies. </p>\n\n<p>For such limited use am I better off with manual install and <code>pip install --upgrade 'package'</code> or do the bundles offer anything over and above this?</p>\n", "link": "https://stackoverflow.com/questions/15762943/anaconda-vs-epd-enthought-vs-manual-installation-of-python", "question_id": 15762943, "accepted_answer_id": 16021216, "answer_body": "<p><strong>Update 2015</strong>: Nowadays I always recommend Anaconda. It includes lots of Python packages for scientific computing, data science, web development, etc. It also provides a superior environment tool, <code>conda</code>, which allows to easily switch between environments, even between Python 2 and 3. It is also updated very quickly as soon as a new version of a package is released, and you can just do <code>conda update packagename</code> to update it.</p>\n\n<p><strong>Original answer below</strong>:</p>\n\n<p>On Windows, what is complicated is to compile the math packages, so I think a manual install is a viable option only if you are interested only in <code>Python</code>, without other packages.</p>\n\n<p>Therefore better chose either EPD (now Canopy) or Anaconda.</p>\n\n<p>Anaconda has around 270 packages, including the most important for most scientific applications and data analysis, that is, <a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"nofollow noreferrer\">NumPy</a>, <a href=\"http://en.wikipedia.org/wiki/SciPy\" rel=\"nofollow noreferrer\">SciPy</a>, <a href=\"https://en.wikipedia.org/wiki/Pandas_%28software%29\" rel=\"nofollow noreferrer\">Pandas</a>, <a href=\"http://en.wikipedia.org/wiki/IPython\" rel=\"nofollow noreferrer\">IPython</a>, <a href=\"http://en.wikipedia.org/wiki/Matplotlib\" rel=\"nofollow noreferrer\">matplotlib</a>, <a href=\"https://en.wikipedia.org/wiki/Scikit-learn\" rel=\"nofollow noreferrer\">Scikit-learn</a>.\nSo if this is enough for you, I would choose Anaconda.</p>\n\n<p>Instead, if you are interested in other packages, and even more if you use any of the Enthought packages (<a href=\"http://code.enthought.com/chaco/\" rel=\"nofollow noreferrer\">Chaco</a> for example is very useful for realtime data visualization), then EPD/Canopy is probably a better choice. The Academic version has a larger number of packages in the base install, and many more in the repository. Anaconda also includes Chaco.</p>\n"}, {"title": "What is the difference between pyenv, virtualenv, anaconda?", "question_body": "<p>I am a ruby programmer trying to learn python. I am pretty family with pyenv since it is like a copy and paste from rbenv. Pyenv helps allow to have more than one version of python in a system and also to isolate the python without touching sensitive part of system.</p>\n\n<p>I suppose every python installation come with pip package. What I still don't understand is, there are many good python libs out there that suggest to use this virtualenv and anaconda. I can even find virtualenv plugin for pyenv. </p>\n\n<p>Now I am getting confused with the purpose of these two pyenv and virtualenv.\nworse inside pyenv there is a virtualenv plugin.</p>\n\n<p>my questions are:</p>\n\n<ul>\n<li>what is the difference between pyenv and virtualenv?</li>\n<li>Is there any difference in using  pip command inside both pyenv and virtualenv?</li>\n<li>what does this pyenv virutalenv do?</li>\n</ul>\n\n<p>your explanation with example will be highly appreciated.</p>\n", "link": "https://stackoverflow.com/questions/38217545/what-is-the-difference-between-pyenv-virtualenv-anaconda", "question_id": 38217545, "accepted_answer_id": 39928067, "answer_body": "<p><em>Edit: It's worth mentioning <code>pip</code> here as well, as <code>conda</code> and <code>pip</code> have similarities and differences that are relevant to this topic</em>.</p>\n\n<p><strong>pip: the Python Package Manager.</strong></p>\n\n<ul>\n<li>You might think of <code>pip</code> as the python equivalent of the ruby <code>gem</code> command</li>\n<li><code>pip</code> is not included with python by default.</li>\n<li>You may install Python using <a href=\"https://github.com/Homebrew/brew/blob/master/docs/Homebrew-and-Python.md\" rel=\"noreferrer\">homebrew</a>, which will install pip automatically: <code>brew install python</code></li>\n<li>The final version of OSX did not include pip by default. To add pip to your mac system's version of python, you can <code>sudo easy_install pip</code></li>\n<li>You can find and publish python packages using <a href=\"https://pypi.python.org/pypi\" rel=\"noreferrer\">PyPI: The Python Package Index</a></li>\n<li>The requirements.txt file is comparable to the ruby <code>gemfile</code></li>\n<li>To create a requirements text file, <code>pip freeze &gt; requirements.txt</code></li>\n<li>Note, at this point, we have python installed on our system, and we have created a requirements.txt file that outlines all of the python packages that have been installed on your system.</li>\n</ul>\n\n<p><strong>pyenv: Python Version Manager</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/yyuu/pyenv#simple-python-version-management-pyenv\" rel=\"noreferrer\">From the docs</a>: <em>pyenv lets you easily switch between multiple versions of Python. It's simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well. This project was forked from rbenv and ruby-build, and modified for Python.</em></li>\n<li>Many folks <a href=\"https://softwareengineering.stackexchange.com/questions/63859/why-do-people-hesitate-to-use-python-3\">hesitate to use python3</a>.</li>\n<li>If you need to use different versions of python, <code>pyenv</code> lets you manage this easily.</li>\n</ul>\n\n<p><strong>virtualenv: Python Environment Manager.</strong></p>\n\n<ul>\n<li><a href=\"https://virtualenv.pypa.io/en/stable/\" rel=\"noreferrer\">From the docs</a>: <em>The basic problem being addressed is one of dependencies and versions, and indirectly permissions. Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these applications? If you install everything into /usr/lib/python2.7/site-packages (or whatever your platform\u2019s standard location is), it\u2019s easy to end up in a situation where you unintentionally upgrade an application that shouldn\u2019t be upgraded.</em></li>\n<li>To create a <code>virtualenv</code>, simply invoke <code>virtualenv ENV</code>, where <code>ENV</code> is is a directory to place the new virtual environment.</li>\n<li>To initialize the <code>virtualenv</code>, you need to <code>source ENV/bin/activate</code>. To stop using, simply call <code>deactivate</code>.</li>\n<li>Once you activate the <code>virtualenv</code>, you might install all of a workspace's package requirements by running <code>pip install -r</code> against the project's <code>requirements.txt</code> file.</li>\n</ul>\n\n<p><strong>Anaconda: Package Manager + Environment Manager + Additional Scientific Libraries.</strong></p>\n\n<ul>\n<li><a href=\"https://docs.continuum.io/anaconda/pkg-docs\" rel=\"noreferrer\">From the docs</a>: <em>Anaconda 4.2.0 includes an easy installation of Python (2.7.12, 3.4.5, and/or 3.5.2) and updates of over 100 pre-built and tested scientific and analytic Python packages that include NumPy, Pandas, SciPy, Matplotlib, and IPython, with over 620 more packages available via a simple <code>conda install &lt;packagename&gt;</code></em></li>\n<li>As a web developer, I haven't used Anaconda. It's ~3GB including all the packages.</li>\n<li>There is a slimmed down <code>miniconda</code> version, which seems like it could be a more simple option than using <code>pip</code> + <code>virtualenv</code>, although I don't have experience using it personally.</li>\n<li>While <code>conda</code> allows you to install packages, these packages are separate than PyPI packages, so you may still need to use pip additionally depending on the types of packages you need to install. </li>\n</ul>\n\n<p><em>See also:</em></p>\n\n<ul>\n<li><a href=\"https://conda.io/docs/commands.html#conda-vs-pip-vs-virtualenv-commands\" rel=\"noreferrer\">conda vs pip vs virtualenv</a> (section in documentation from anaconda)</li>\n<li><a href=\"https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda\">the difference between pip and conda</a> (stackoverflow)</li>\n<li><a href=\"https://stackoverflow.com/questions/29950300/what-is-the-relationship-between-virtualenv-and-pyenv\">the relationship between virtualenv and pyenv</a> (stackoverflow)</li>\n</ul>\n"}, {"title": "What are the differences between Conda and Anaconda", "question_body": "<p><strong>Post-question update:</strong></p>\n\n<p>See <a href=\"https://geohackweek.github.io/Introductory/01-conda-tutorial/\" rel=\"noreferrer\">Introduction to Conda</a> for more details.</p>\n\n<hr>\n\n<p><strong>The problem:</strong></p>\n\n<p>I first installed <em>Anaconda</em> on my ubuntu at <code>~/anaconda</code>, when I was trying to update my anaconda, according to the <a href=\"http://docs.continuum.io/anaconda/install.html\" rel=\"noreferrer\">documentation</a> from Continuum Analytics, I should use the following commands:</p>\n\n<pre><code>conda update conda\nconda update anaconda\n</code></pre>\n\n<p>Then I realized that I did not have <em>conda</em> installed, so I installed it using the documentation from <a href=\"http://conda.pydata.org/docs/intro.html#update-anaconda-to-latest-version\" rel=\"noreferrer\">here</a>.</p>\n\n<p>After <em>conda</em> is installed, when I run <code>conda update anaconda</code>, I got the following error:</p>\n\n<blockquote>\n  <p>Error: package 'anaconda' is not installed in /home/xiang/miniconda</p>\n</blockquote>\n\n<p>It appears conda is assuming my anaconda is installed under <code>/home/xiang/miniconda</code> which is <em>NOT</em> true.</p>\n\n<p><strong>The questions:</strong></p>\n\n<ol>\n<li>What is the differences between <em>conda</em> and <em>anaconda</em>?</li>\n<li>How can I tell <em>conda</em> where my <em>anaconda</em> is installed?</li>\n</ol>\n", "link": "https://stackoverflow.com/questions/30034840/what-are-the-differences-between-conda-and-anaconda", "question_id": 30034840, "accepted_answer_id": 30057885, "answer_body": "<p>conda is the package manager. Anaconda is a set of about a hundred packages including conda, numpy, scipy, ipython notebook, and so on. </p>\n\n<p>You installed Miniconda, which is a smaller alternative to Anaconda that is just conda and its dependencies, not those listed above. </p>\n\n<p>Once you have Miniconda, you can easily install Anaconda into it with <code>conda install anaconda</code>.</p>\n"}, {"title": "Is it ok having both Anacondas 2.7 and 3.5 installed in the same time?", "question_body": "<p>I am using currently Anaconda with Python 2.7, but I will need to use Python 3.5. Is it ok to have them installed both in the same time? Should I expect some problems?<br>\nI am on a 64-bit Win8.</p>\n", "link": "https://stackoverflow.com/questions/37442494/is-it-ok-having-both-anacondas-2-7-and-3-5-installed-in-the-same-time", "question_id": 37442494, "accepted_answer_id": 37442560, "answer_body": "<p>My understanding is you don't need to install Anaconda again to start using a different version of python. Instead, conda has the <a href=\"http://conda.pydata.org/docs/py2or3.html\">ability to separately manage python 2 and 3 environments</a>.</p>\n"}, {"title": "How do I prevent Conda from activating the base environment by default?", "question_body": "<p>I recently installed anaconda2 on my Mac. By default Conda is configured to activate the base environment when I open a fresh terminal session.</p>\n\n<p>I want access to the Conda commands (i.e. I want the path to Conda added to my $PATH which Conda does when initialised so that's fine).</p>\n\n<p>But I don't ordinarily program in python, and I don't want Conda to activate an environment by default.</p>\n\n<p>When first executing <code>conda init</code> from the prompt, Conda adds the following to my <code>.bash_profile</code>:</p>\n\n<pre><code># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/Users/geoff/anaconda2/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\nif [ -f \"/Users/geoff/anaconda2/etc/profile.d/conda.sh\" ]; then\n    . \"/Users/geoff/anaconda2/etc/profile.d/conda.sh\"\nelse\n    export PATH=\"/Users/geoff/anaconda2/bin:$PATH\"\nfi\n# fi\nunset __conda_setup\n# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;\n</code></pre>\n\n<p>If I comment out the whole block, then I can't activate any Conda environments.</p>\n\n<p>I tried to comment out the whole block except for</p>\n\n<pre><code>export PATH=\"/Users/geoff/anaconda2/bin:$PATH\"\n</code></pre>\n\n<p>But then when I started a new session and tried to activate an environment, I got this error message:</p>\n\n<pre><code>CommandNotFoundError: Your shell has not been properly configured to use 'conda activate'.\n</code></pre>\n\n<p><a href=\"https://askubuntu.com/questions/849470/how-do-i-activate-a-conda-environment-in-my-bashrc\">This question</a> (and others like it) are helpful, but doesn't ultimately answer my question and is more suited for linux users.</p>\n\n<p>For clarification, I'm not asking to remove the <code>(base)</code> from my <code>$PS1</code> I'm asking for Conda not to activate base when I open a terminal session.</p>\n", "link": "https://stackoverflow.com/questions/54429210/how-do-i-prevent-conda-from-activating-the-base-environment-by-default", "question_id": 54429210, "accepted_answer_id": 54560785, "answer_body": "<p>I have conda 4.6 with a similar block of code that was added by conda. In my case, there's a conda configuration setting to disable the automatic base activation:</p>\n\n<pre><code>conda config --set auto_activate_base false\n</code></pre>\n\n<p>The first time you run it, it'll create a <code>./condarc</code> in your home directory with that setting to override the default.</p>\n\n<p>This wouldn't de-clutter your <code>.bash_profile</code> but it's a cleaner solution without manual editing that section that conda manages.</p>\n"}, {"title": "pip throws TypeError: parse() got an unexpected keyword argument &#39;transport_encoding&#39; when trying to install new packages", "question_body": "<p>I am using the latest version of Anaconda3. I just installed it and I am trying to download some packages. I am using the Anaconda Prompt. While trying to use pip to do anything (including upgrading existing packages) I get the following traceback.</p>\n\n<pre><code>    Exception:\nTraceback (most recent call last):\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\basecommand.py\", line 215, in main\n    status = self.run(options, args)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\commands\\install.py\", line 335, in run\n    wb.build(autobuilding=True)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\wheel.py\", line 749, in build\n    self.requirement_set.prepare_files(self.finder)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\req\\req_set.py\", line 380, in prepare_files\n    ignore_dependencies=self.ignore_dependencies))\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\req\\req_set.py\", line 487, in _prepare_file\n    req_to_install, finder)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\req\\req_set.py\", line 428, in _check_skip_installed\n    req_to_install, upgrade_allowed)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\index.py\", line 465, in find_requirement\n    all_candidates = self.find_all_candidates(req.name)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\index.py\", line 423, in find_all_candidates\n    for page in self._get_pages(url_locations, project_name):\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\index.py\", line 568, in _get_pages\n    page = self._get_page(location)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\index.py\", line 683, in _get_page\n    return HTMLPage.get_page(link, session=self.session)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\index.py\", line 811, in get_page\n    inst = cls(resp.content, resp.url, resp.headers)\n  File \"C:\\Users\\csprock\\Anaconda3\\lib\\site-packages\\pip\\index.py\", line 731, in __init__\n    namespaceHTMLElements=False,\nTypeError: parse() got an unexpected keyword argument 'transport_encoding'\n</code></pre>\n\n<p>Any ideas? (this problem only started after I installed tensorflow) Thanks. </p>\n", "link": "https://stackoverflow.com/questions/46499808/pip-throws-typeerror-parse-got-an-unexpected-keyword-argument-transport-enco", "question_id": 46499808, "accepted_answer_id": null}, {"title": "Using Pip to install packages to Anaconda Environment", "question_body": "<p>conda 4.2.13\nMacOSX 10.12.1</p>\n\n<p>I am trying to install packages from <code>pip</code> to a fresh environment (virtual) created using anaconda.  <a href=\"http://conda.pydata.org/docs/using/pkgs.html#install-non-conda-packages\" rel=\"noreferrer\">In the Anaconda docs</a> it says this is perfectly fine.  It is done the same way as for virtualenv.  </p>\n\n<blockquote>\n  <p>Activate the environment where you want to put the program, then pip install a program...</p>\n</blockquote>\n\n<p>I created an empty environment in Ananconda like this:</p>\n\n<pre><code>conda create -n shrink_venv\n</code></pre>\n\n<p>Activate it:</p>\n\n<pre><code>source activate shrink_venv\n</code></pre>\n\n<p>I then can see in the terminal that I am working in my env <code>(shrink_venv)</code>.  Problem is coming up, when I try to install a package using <code>pip</code>:</p>\n\n<pre><code>(shrink_venv): pip install Pillow\n\nRequirement already satisfied (use --upgrade to upgrade): Pillow in /Library/Python/2.7/site-packages\n</code></pre>\n\n<p>So I can see it thinks the requirement is satisfied from the system-wide package.  So it seems the environment is not working correctly, definitely not like it said in the docs.  Am I doing something wrong here?</p>\n\n<p>Just a note, I know you can use <code>conda install</code> for the packages, but I have had an issue with Pillow from anaconda, so I wanted to get it from <code>pip</code>, and since the docs say that is fine.</p>\n\n<p>Output of <code>which -a pip</code>:</p>\n\n<pre><code>/usr/local/bin/pip\n/Users/my_user/anaconda/bin/pip\n</code></pre>\n\n<p>** UPDATE **\nI see this is pretty common issue. What I have found is that the conda env doesn't play well with the PYTHONPATH. The system seems to always look in the PYTHONPATH locations even when you're using a conda environment. Now, I always run <code>unset PYTHONPATH</code> when using a conda environment, and it works much better. I'm on a mac.</p>\n", "link": "https://stackoverflow.com/questions/41060382/using-pip-to-install-packages-to-anaconda-environment", "question_id": 41060382, "accepted_answer_id": null}, {"title": "How is Anaconda related to Python?", "question_body": "<p>I am a beginner and I want to learn computer programming. So, for now, I have started learning Python by myself with some knowledge about programming in C and Fortran.</p>\n\n<p>Now, I have installed Python version 3.6.0 and I have struggled finding a suitable text for learning Python in this version. Even the online lecture series ask for versions 2.7 and 2.5 . </p>\n\n<p>Now that I have got a book which, however, makes codes in version 2 and <em>tries</em> to make it <em>as close as possible</em> in version 3 (according to the author); the author recommends \"downloading Anaconda for Windows\" for installing Python.</p>\n\n<p>So, my <strong>question</strong> is: What is this <strong>'Anaconda'</strong>? I saw that it was some open data science platform. What does it mean? Is it some editor or something like Pycharm, IDLE or something?</p>\n\n<p>Also, I downloaded my Python (the one that I am using right now) for Windows from Python.org and I didn't need to install any \"open data science platform\".\nSo what is this happening? </p>\n\n<p>Please explain in easy language. I don't have too much knowledge about these.</p>\n", "link": "https://stackoverflow.com/questions/42096280/how-is-anaconda-related-to-python", "question_id": 42096280, "accepted_answer_id": 42096429, "answer_body": "<p><strong>Anaconda</strong> is a python and R <em>distribution</em>. It aims to provide everything you need (python wise) for data science \"out of the box\".</p>\n\n<p>It includes:</p>\n\n<ul>\n<li>The core python language</li>\n<li>100+ python \"packages\" (libraries)</li>\n<li>Spyder (IDE/editor - like pycharm) and Jupyter</li>\n<li><code>conda</code>, Anaconda's own package manager, used for updating Anaconda and packages</li>\n</ul>\n\n<p>Your course may have recommended it as it comes with these extras but if you don't need them and are getting on fine with vanilla python that's OK too.</p>\n\n<p>Learn more: <a href=\"https://www.anaconda.com/distribution/\" rel=\"noreferrer\">https://www.anaconda.com/distribution/</a></p>\n"}, {"title": "The environment is inconsistent, please check the package plan carefully", "question_body": "<p>I tried to update or install new packages from anaconda and lately, this message has appeared:</p>\n\n<pre><code>The environment is inconsistent, please check the package plan carefully\nThe following package are causing the inconsistency:\n\n   - defaults/win-32::anaconda==5.3.1=py37_0\n\ndone\n</code></pre>\n\n<p>I tried with <code>conda clean --all</code> and then <code>conda update --all</code> but it persists.</p>\n\n<p><strong>Conda Info</strong></p>\n\n<pre><code>active environment : base\n    active env location : C:\\Users\\NAME\\Continuum\n            shell level : 1\n       user config file : C:\\Users\\NAME\\.condarc\n populated config files : C:\\Users\\NAME\\.condarc\n          conda version : 4.6.11\n    conda-build version : 3.17.7\n         python version : 3.7.3.final.0\n       base environment : C:\\Users\\NAME\\Continuum  (writable)\n           channel URLs : https://repo.anaconda.com/pkgs/main/win-32\n                          https://repo.anaconda.com/pkgs/main/noarch\n                          https://repo.anaconda.com/pkgs/free/win-32\n                          https://repo.anaconda.com/pkgs/free/noarch\n                          https://repo.anaconda.com/pkgs/r/win-32\n                          https://repo.anaconda.com/pkgs/r/noarch\n                          https://repo.anaconda.com/pkgs/msys2/win-32\n                          https://repo.anaconda.com/pkgs/msys2/noarch\n          package cache : C:\\Users\\NAME\\Continuum\\pkgs\n                          C:\\Users\\NAME\\.conda\\pkgs\n                          C:\\Users\\NAME\\AppData\\Local\\conda\\conda\\pkgs\n       envs directories : C:\\Users\\NAME\\Continuum\\envs\n                          C:\\Users\\NAME\\.conda\\envs\n                          C:\\Users\\NAME\\AppData\\Local\\conda\\conda\\envs\n               platform : win-32\n             user-agent : conda/4.6.11 requests/2.21.0 CPython/3.7.3 Windows/10 Windows/10.0.17763\n          administrator : False\n             netrc file : None\n           offline mode : False\n</code></pre>\n", "link": "https://stackoverflow.com/questions/55527354/the-environment-is-inconsistent-please-check-the-package-plan-carefully", "question_id": 55527354, "accepted_answer_id": 55624247, "answer_body": "<p>I had faced the same problem. Simply running</p>\n\n<pre><code>conda install anaconda\n</code></pre>\n\n<p>solved the problem for me.</p>\n"}, {"title": "Should conda, or conda-forge be used for Python environments?", "question_body": "<p><code>Conda</code> and <code>conda-forge</code> are both Python package managers. What is the appropriate choice when a package exists in both repositories? Django, for example, can be installed with either, but the difference between the two is several dependencies (conda-forge has many more). There is no explanation for these differences, not even a simple README.</p>\n\n<p>Which one should be used? Conda or conda-forge? Does it matter?</p>\n", "link": "https://stackoverflow.com/questions/39857289/should-conda-or-conda-forge-be-used-for-python-environments", "question_id": 39857289, "accepted_answer_id": 39862730, "answer_body": "<p>The short answer is that, in my experience generally, it doesn't matter which you use.</p>\n\n<p>The long answer:</p>\n\n<p>So <code>conda-forge</code> is an additional channel from which packages may be installed. In this sense, it is not any more special than the default channel, or any of the other hundreds (thousands?) of channels that people have posted packages to. You can add your own channel if you sign up at <a href=\"https://anaconda.org\" rel=\"noreferrer\">https://anaconda.org</a> and upload your own Conda packages.</p>\n\n<p>Here we need to make the distinction, which I think you're not clear about from your phrasing in the question, between <code>conda</code>, the cross-platform package manager, and <code>conda-forge</code>, the package channel. Anaconda Inc. (formerly Continuum IO), the main developers of the <code>conda</code> software, also maintain a separate channel of packages, which is the default when you type <code>conda install packagename</code> without changing any options.</p>\n\n<p>There are two ways to change the options for channels. One is to specify a channel every time you install a package:</p>\n\n<pre><code>conda install -c some-channel packagename\n</code></pre>\n\n<p>Of course, the package has to exist on that channel. If you find yourself using the same channel often, then you might want to add it to your configuration. You can write</p>\n\n<pre><code>conda config --add channels some-channel\n</code></pre>\n\n<p>to add the channel <code>some-channel</code> to the top of the <code>channels</code> configuration list. This gives <code>some-channel</code> the highest priority (priority determines (<a href=\"http://conda.pydata.org/docs/channels.html\" rel=\"noreferrer\">in part</a>) which channel is selected when more than one channel has a particular package). To add the channel to the end of the list and give it the lowest priority, type</p>\n\n<pre><code>conda config --append channels some-channel\n</code></pre>\n\n<p>If you would like to remove the channel that you added, you can do so by writing</p>\n\n<pre><code>conda config --remove channels some-channel\n</code></pre>\n\n<p>See</p>\n\n<pre><code>conda config -h\n</code></pre>\n\n<p>for more options.</p>\n\n<p>With all of that said, there are four main reasons to use the <code>conda-forge</code> channel instead of the <code>defaults</code> channel maintained by Anaconda:</p>\n\n<ol>\n<li>Packages on <code>conda-forge</code> <em>may</em> be more up-to-date than those on the <code>defaults</code> channel</li>\n<li>There are packages on the <code>conda-forge</code> channel that aren't available from <code>defaults</code></li>\n<li>You would prefer to use a dependency such as <code>openblas</code> (from <code>conda-forge</code>) instead of <code>mkl</code> (from <code>defaults</code>).</li>\n<li>If you are installing a package that requires a compiled library (e.g., a C extension or a wrapper around a C library), it <em>may</em> reduce the chance of incompatibilities if you install all of the packages in an environment from a single channel due to binary compatibility of the base C library (but this advice may be out of date/change in the future).</li>\n</ol>\n"}]