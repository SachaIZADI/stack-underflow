[{"title": "Does Django scale?", "question_body": "<p>I'm building a web application with Django. The reasons I chose Django were:</p>\n\n<ul>\n<li>I wanted to work with free/open-source tools.</li>\n<li>I like Python and feel it's a <strong>long-term</strong> language, whereas regarding Ruby I wasn't sure, and PHP seemed like a huge hassle to learn.</li>\n<li>I'm building a prototype for an idea and wasn't thinking too much about the future. Development speed was the main factor, and I already knew Python.</li>\n<li>I knew the migration to Google App Engine would be easier should I choose to do so in the future.</li>\n<li>I heard Django was \"nice\".</li>\n</ul>\n\n<p>Now that I'm getting closer to thinking about publishing my work, I start being concerned about scale. The only information I found about the scaling capabilities of Django is provided by the Django team (I'm not saying anything to disregard them, but this is clearly not objective information...).</p>\n\n<p><strong>My questions:</strong></p>\n\n<ul>\n<li>What's the \"largest\" site that's built on Django today? (I measure size mostly by user traffic)</li>\n<li>Can Django deal with <em>100,000 users daily</em>, each visiting the site for a couple of hours?</li>\n<li>Could a site like Stack Overflow run on Django?</li>\n</ul>\n", "link": "https://stackoverflow.com/questions/886221/does-django-scale", "question_id": 886221, "accepted_answer_id": 886645, "answer_body": "<ol>\n<li><p><strong>\"What are the largest sites built on Django today?\"</strong></p>\n\n<p>There isn't any single place that collects information about traffic on Django built sites, so I'll have to take a stab at it using data from various locations.  First, we have a list of Django sites on the front page of <a href=\"http://www.djangoproject.com/\" rel=\"noreferrer\">the main Django project page</a> and then a list of Django built sites at <a href=\"http://www.djangosites.org/\" rel=\"noreferrer\">djangosites.org</a>.  Going through the lists and picking some that I know have decent traffic we see:</p>\n\n<ul>\n<li><p><strong><a href=\"http://instagram.com\" rel=\"noreferrer\">Instagram</a></strong>: <a href=\"http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances\" rel=\"noreferrer\">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a>.</p></li>\n<li><p><strong><a href=\"http://pinterest.com/\" rel=\"noreferrer\">Pinterest</a></strong>: <a href=\"http://www.alexa.com/siteinfo/Pinterest.com\" rel=\"noreferrer\">Alexa rank 37 (21.4.2015)</a> and 70 Million users in 2013</p></li>\n<li><p><strong><a href=\"http://bitbucket.org/\" rel=\"noreferrer\">Bitbucket</a></strong>: <a href=\"https://blog.bitbucket.org/2015/02/05/bitbucket-2014-in-review/\" rel=\"noreferrer\">200TB of Code and 2.500.000 Users</a></p></li>\n<li><p><strong><a href=\"http://disqus.com\" rel=\"noreferrer\">Disqus</a></strong>: <a href=\"http://pyvideo.org/video/418/pycon-2011--disqus--serving-400-million-people-wi\" rel=\"noreferrer\">Serving 400 million people with Python</a>.</p></li>\n<li><p><strong><a href=\"http://curse.com/\" rel=\"noreferrer\">curse.com</a></strong>: <a href=\"http://www.quantcast.com/curse.com\" rel=\"noreferrer\">600k daily visits</a>.</p></li>\n<li><p><strong><a href=\"http://tabblo.com/\" rel=\"noreferrer\">tabblo.com</a></strong>: <a href=\"http://www.quantcast.com/tabblo.com\" rel=\"noreferrer\">44k daily visits</a>, see Ned Batchelder's posts <a href=\"http://nedbatchelder.com/blog/200902/infrastructure_for_modern_web_sites.html\" rel=\"noreferrer\">Infrastructure for modern web sites</a>.</p></li>\n<li><p><strong><a href=\"http://chesspark.com/\" rel=\"noreferrer\">chesspark.com</a></strong>: <a href=\"http://www.alexa.com/siteinfo/chesspark.com\" rel=\"noreferrer\">Alexa</a> rank about 179k.</p></li>\n<li><p><strong><a href=\"http://pownce.com/\" rel=\"noreferrer\">pownce.com</a></strong> (no longer active): <a href=\"http://www.alexa.com/siteinfo/pownce.com\" rel=\"noreferrer\">alexa</a> rank about 65k.\nMike Malone of Pownce, in his EuroDjangoCon presentation on <strong><a href=\"http://www.slideshare.net/road76/scaling-django\" rel=\"noreferrer\">Scaling Django Web Apps</a></strong> says \"hundreds of hits per second\".  This is a very good presentation on how to scale Django, and makes some good points including (current) shortcomings in Django scalability.</p></li>\n<li><p>HP had a site built with Django 1.5: <a href=\"http://www.eprintcenter.com\" rel=\"noreferrer\">ePrint center</a>. However, as for novemer/2015 the entire website was migrated and this link is just a redirect. This website was a world-wide service attending subscription to Instant Ink and related services HP offered (*).</p></li>\n</ul></li>\n<li><p><strong>\"Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?\"</strong></p>\n\n<p>Yes, see above.</p></li>\n<li><p><strong>\"Could a site like Stack Overflow run on Django?\"</strong></p>\n\n<p>My gut feeling is yes but, as others answered and Mike Malone mentions in his presentation, database design is critical. Strong proof might also be found at www.cnprog.com if we can find any reliable traffic stats. Anyway, it's not just something that will happen by throwing together a bunch of Django models :)</p></li>\n</ol>\n\n<p>There are, of course, many more sites and bloggers of interest, but I have got to stop somewhere!</p>\n\n<hr>\n\n<p>Blog post about <a href=\"http://web.archive.org/web/20130307032621/http://concentricsky.com/blog/2009/oct/michaelmoorecom\" rel=\"noreferrer\">Using Django to build high-traffic site michaelmoore.com</a> described as a <a href=\"http://www.alexa.com/siteinfo/http%3A%2F%2Fmichaelmoore.com\" rel=\"noreferrer\">top 10,000 website</a>.  <a href=\"http://www.quantcast.com/michaelmoore.com\" rel=\"noreferrer\">Quantcast stats</a> and <a href=\"http://siteanalytics.compete.com/michaelmoore.com/\" rel=\"noreferrer\">compete.com stats</a>.</p>\n\n<hr>\n\n<p><sub>(*) The author of the edit, including such reference, used to work as outsourced developer in that project.</sub></p>\n"}, {"title": "differentiate null=True, blank=True in django", "question_body": "<p>When we add a database field in django we generally write <code>models.CharField(max_length=100, null=True, blank=True)</code>. The same is done with <code>ForeignKey</code>, <code>DecimalField</code> etc. What is the basic difference in having </p>\n\n<ol>\n<li><code>null=True</code> only</li>\n<li><code>blank=True</code> only</li>\n<li><code>null=True</code>, <code>blank=True</code></li>\n</ol>\n\n<p>in respect to different (<code>CharField</code>, <code>ForeignKey</code>, <code>ManyToManyField</code>, <code>DateTimeField</code>) fields. What are the advantages/disadvantages of using 1/2/3?</p>\n", "link": "https://stackoverflow.com/questions/8609192/differentiate-null-true-blank-true-in-django", "question_id": 8609192, "accepted_answer_id": 8609425, "answer_body": "<p><code>null=True</code> sets <code>NULL</code> (versus <code>NOT NULL</code>) on the column in your DB. Blank values for Django field types such as <code>DateTimeField</code> or <code>ForeignKey</code> will be stored as <code>NULL</code> in the DB.</p>\n\n<p><code>blank=True</code> determines whether the field will be required in forms. This includes the admin and your own custom forms. If <code>blank=True</code> then the field will not be required, whereas if it's <code>False</code> the field cannot be blank.</p>\n\n<p>The combo of the two is so frequent because typically if you're going to allow a field to be blank in your form, you're going to also need your database to allow <code>NULL</code> values for that field. The exception is <code>CharField</code>s and <code>TextField</code>s, which in Django are <em>never</em> saved as <code>NULL</code>. Blank values are stored in the DB as an empty string (<code>''</code>).</p>\n\n<p>A few examples:</p>\n\n<pre><code>models.DateTimeField(blank=True) # raises IntegrityError if blank\n\nmodels.DateTimeField(null=True) # NULL allowed, but must be filled out in a form\n</code></pre>\n\n<p>Obviously those two options don't make logical sense to use (though, there might be a use case for <code>null=True, blank=False</code> if you want a field to always be required in forms, but optional when dealing with an object through something like the shell.)</p>\n\n<pre><code>models.CharField(blank=True) # No problem, blank is stored as ''\n\nmodels.CharField(null=True) # NULL allowed, but will never be set as NULL\n</code></pre>\n\n<p><code>CHAR</code> and <code>TEXT</code> types are never saved as <code>NULL</code> by Django, so <code>null=True</code> is unnecessary. However, you can manually set one of these fields to <code>None</code> to force set it as <code>NULL</code>. If you have a scenario where that might be necessary, you should still include <code>null=True</code>.</p>\n"}, {"title": "Need a minimal Django file upload example", "question_body": "<p>As a newbie to Django, I am having difficulty making an upload app in Django 1.3. I could not find any up-to-date example/snippets. May someone post a minimal but complete (Model, View, Template) example code to do so?</p>\n", "link": "https://stackoverflow.com/questions/5871730/need-a-minimal-django-file-upload-example", "question_id": 5871730, "accepted_answer_id": 8542030, "answer_body": "<p>Phew, Django documentation really does not have good example about this. I spent over 2 hours to dig up all the pieces to understand how this works. With that knowledge I implemented a project that makes possible to upload files and show them as list. To download  source for the project, visit <a href=\"https://github.com/axelpale/minimal-django-file-upload-example\" rel=\"noreferrer\">https://github.com/axelpale/minimal-django-file-upload-example</a> or clone it:</p>\n\n<pre><code>&gt; git clone https://github.com/axelpale/minimal-django-file-upload-example.git\n</code></pre>\n\n<p><strong>Update 2013-01-30:</strong> The source at GitHub has also implementation for Django 1.4 in addition to 1.3. Even though there is few changes the following tutorial is also useful for 1.4.</p>\n\n<p><strong>Update 2013-05-10:</strong> Implementation for Django 1.5 at GitHub. Minor changes in redirection in urls.py and usage of url template tag in list.html. Thanks to <a href=\"https://github.com/hubert3\" rel=\"noreferrer\">hubert3</a> for the effort.</p>\n\n<p><strong>Update 2013-12-07:</strong> Django 1.6 supported at GitHub. One import changed in myapp/urls.py. Thanks goes to <a href=\"https://github.com/Arthedian\" rel=\"noreferrer\">Arthedian</a>.</p>\n\n<p><strong>Update 2015-03-17:</strong> Django 1.7 supported at GitHub, thanks to <a href=\"https://github.com/aronysidoro\" rel=\"noreferrer\">aronysidoro</a>.</p>\n\n<p><strong>Update 2015-09-04:</strong> Django 1.8 supported at GitHub, thanks to <a href=\"https://github.com/nerogit\" rel=\"noreferrer\">nerogit</a>.</p>\n\n<p><strong>Update 2016-07-03:</strong> Django 1.9 supported at GitHub, thanks to <a href=\"https://github.com/daavve\" rel=\"noreferrer\">daavve</a> and <a href=\"https://github.com/nerogit\" rel=\"noreferrer\">nerogit</a></p>\n\n<h2>Project tree</h2>\n\n<p>A basic Django 1.3 project with single app and media/ directory for uploads. </p>\n\n<pre><code>minimal-django-file-upload-example/\n    src/\n        myproject/\n            database/\n                sqlite.db\n            media/\n            myapp/\n                templates/\n                    myapp/\n                        list.html\n                forms.py\n                models.py\n                urls.py\n                views.py\n            __init__.py\n            manage.py\n            settings.py\n            urls.py\n</code></pre>\n\n<h2>1. Settings: myproject/settings.py</h2>\n\n<p>To upload and serve files, you need to specify where Django stores uploaded files and from what URL Django serves them. MEDIA_ROOT and MEDIA_URL are in settings.py by default but they are empty. See the first lines in <a href=\"https://docs.djangoproject.com/en/dev/topics/files/\" rel=\"noreferrer\">Django Managing Files</a> for details. Remember also set the database and add myapp to INSTALLED_APPS</p>\n\n<pre><code>...\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n...\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'database.sqlite3'),\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',\n        'PORT': '',\n    }\n}\n...\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n...\nINSTALLED_APPS = (\n    ...\n    'myapp',\n)\n</code></pre>\n\n<h2>2. Model: myproject/myapp/models.py</h2>\n\n<p>Next you need a model with a FileField. This particular field stores files e.g. to media/documents/2011/12/24/ based on current date and MEDIA_ROOT. See <a href=\"https://docs.djangoproject.com/en/dev/ref/models/fields/#filefield\" rel=\"noreferrer\">FileField reference</a>.</p>\n\n<pre><code># -*- coding: utf-8 -*-\nfrom django.db import models\n\nclass Document(models.Model):\n    docfile = models.FileField(upload_to='documents/%Y/%m/%d')\n</code></pre>\n\n<h2>3. Form: myproject/myapp/forms.py</h2>\n\n<p>To handle upload nicely, you need a form. This form has only one field but that is enough. See <a href=\"https://docs.djangoproject.com/en/dev/ref/forms/fields/#filefield\" rel=\"noreferrer\">Form FileField reference</a> for details.</p>\n\n<pre><code># -*- coding: utf-8 -*-\nfrom django import forms\n\nclass DocumentForm(forms.Form):\n    docfile = forms.FileField(\n        label='Select a file',\n        help_text='max. 42 megabytes'\n    )\n</code></pre>\n\n<h2>4. View: myproject/myapp/views.py</h2>\n\n<p>A view where all the magic happens. Pay attention how <code>request.FILES</code> are handled. For me, it was really hard to spot the fact that <code>request.FILES['docfile']</code> can be saved to models.FileField just like that. The model's save() handles the storing of the file to the filesystem automatically.</p>\n\n<pre><code># -*- coding: utf-8 -*-\nfrom django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\n\nfrom myproject.myapp.models import Document\nfrom myproject.myapp.forms import DocumentForm\n\ndef list(request):\n    # Handle file upload\n    if request.method == 'POST':\n        form = DocumentForm(request.POST, request.FILES)\n        if form.is_valid():\n            newdoc = Document(docfile = request.FILES['docfile'])\n            newdoc.save()\n\n            # Redirect to the document list after POST\n            return HttpResponseRedirect(reverse('myapp.views.list'))\n    else:\n        form = DocumentForm() # A empty, unbound form\n\n    # Load documents for the list page\n    documents = Document.objects.all()\n\n    # Render list page with the documents and the form\n    return render_to_response(\n        'myapp/list.html',\n        {'documents': documents, 'form': form},\n        context_instance=RequestContext(request)\n    )\n</code></pre>\n\n<h2>5. Project URLs: myproject/urls.py</h2>\n\n<p>Django does not serve MEDIA_ROOT by default. That would be dangerous in production environment. But in development stage, we could cut short. Pay attention to the last line. That line enables Django to serve files from MEDIA_URL. This works only in developement stage.</p>\n\n<p>See <a href=\"https://docs.djangoproject.com/en/dev/howto/static-files/#django.conf.urls.static.static\" rel=\"noreferrer\">django.conf.urls.static.static reference</a> for details. See also <a href=\"https://stackoverflow.com/questions/446026/django-how-do-you-serve-media-stylesheets-and-link-to-them-within-templates\">this discussion about serving media files</a>.</p>\n\n<pre><code># -*- coding: utf-8 -*-\nfrom django.conf.urls import patterns, include, url\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = patterns('',\n    (r'^', include('myapp.urls')),\n) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre>\n\n<h2>6. App URLs: myproject/myapp/urls.py</h2>\n\n<p>To make the view accessible, you must specify urls for it. Nothing special here.</p>\n\n<pre><code># -*- coding: utf-8 -*-\nfrom django.conf.urls import patterns, url\n\nurlpatterns = patterns('myapp.views',\n    url(r'^list/$', 'list', name='list'),\n)\n</code></pre>\n\n<h2>7. Template: myproject/myapp/templates/myapp/list.html</h2>\n\n<p>The last part: template for the list and the upload form below it. The form must have enctype-attribute set to \"multipart/form-data\" and method set to \"post\" to make upload to Django possible. See <a href=\"https://docs.djangoproject.com/en/dev/topics/http/file-uploads/\" rel=\"noreferrer\">File Uploads documentation</a> for details.</p>\n\n<p>The FileField has many attributes that can be used in templates. E.g. {{ document.docfile.url }} and {{ document.docfile.name }} as in the template. See more about these in <a href=\"https://docs.djangoproject.com/en/dev/topics/files/#using-files-in-models\" rel=\"noreferrer\">Using files in models article</a> and <a href=\"https://docs.djangoproject.com/en/dev/ref/files/file/#django.core.files.File\" rel=\"noreferrer\">The File object documentation</a>.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;Minimal Django File Upload Example&lt;/title&gt;   \n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;!-- List of uploaded documents --&gt;\n    {% if documents %}\n        &lt;ul&gt;\n        {% for document in documents %}\n            &lt;li&gt;&lt;a href=\"{{ document.docfile.url }}\"&gt;{{ document.docfile.name }}&lt;/a&gt;&lt;/li&gt;\n        {% endfor %}\n        &lt;/ul&gt;\n    {% else %}\n        &lt;p&gt;No documents.&lt;/p&gt;\n    {% endif %}\n\n        &lt;!-- Upload form. Note enctype attribute! --&gt;\n        &lt;form action=\"{% url 'list' %}\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n            {% csrf_token %}\n            &lt;p&gt;{{ form.non_field_errors }}&lt;/p&gt;\n            &lt;p&gt;{{ form.docfile.label_tag }} {{ form.docfile.help_text }}&lt;/p&gt;\n            &lt;p&gt;\n                {{ form.docfile.errors }}\n                {{ form.docfile }}\n            &lt;/p&gt;\n            &lt;p&gt;&lt;input type=\"submit\" value=\"Upload\" /&gt;&lt;/p&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt; \n</code></pre>\n\n<h2>8. Initialize</h2>\n\n<p>Just run syncdb and runserver.</p>\n\n<pre><code>&gt; cd myproject\n&gt; python manage.py syncdb\n&gt; python manage.py runserver\n</code></pre>\n\n<h2>Results</h2>\n\n<p>Finally, everything is ready. On default Django developement environment the list of uploaded documents can be seen at <code>localhost:8000/list/</code>. Today the files are uploaded to /path/to/myproject/media/documents/2011/12/17/ and can be opened from the list.</p>\n\n<p>I hope this answer will help someone as much as it would have helped me.</p>\n"}, {"title": "How to combine 2 or more querysets in a Django view?", "question_body": "<p>I am trying to build the search for a Django site I am building, and in the search I am searching in 3 different models. And to get pagination on the search result list I would like to use a generic object_list view to display the results. But to do that i have to merge 3 querysets into one.</p>\n\n<p>How can i do that? I've tried this:</p>\n\n<pre><code>result_list = []            \npage_list = Page.objects.filter(\n    Q(title__icontains=cleaned_search_term) | \n    Q(body__icontains=cleaned_search_term))\narticle_list = Article.objects.filter(\n    Q(title__icontains=cleaned_search_term) | \n    Q(body__icontains=cleaned_search_term) | \n    Q(tags__icontains=cleaned_search_term))\npost_list = Post.objects.filter(\n    Q(title__icontains=cleaned_search_term) | \n    Q(body__icontains=cleaned_search_term) | \n    Q(tags__icontains=cleaned_search_term))\n\nfor x in page_list:\n    result_list.append(x)\nfor x in article_list:\n    result_list.append(x)\nfor x in post_list:\n    result_list.append(x)\n\nreturn object_list(\n    request, \n    queryset=result_list, \n    template_object_name='result',\n    paginate_by=10, \n    extra_context={\n        'search_term': search_term},\n    template_name=\"search/result_list.html\")\n</code></pre>\n\n<p>But this doesn't work I get an error when I try to use that list in the generic view. The list is missing the clone attribute.</p>\n\n<p>Anybody know how I can merge the three lists, <code>page_list</code>, <code>article_list</code> and <code>post_list</code>?</p>\n", "link": "https://stackoverflow.com/questions/431628/how-to-combine-2-or-more-querysets-in-a-django-view", "question_id": 431628, "accepted_answer_id": 434755, "answer_body": "<p>Concatenating the querysets into a list is the simplest approach. If the database will be hit for all querysets anyway (e.g. because the result needs to be sorted), this won't add further cost.</p>\n\n<pre><code>from itertools import chain\nresult_list = list(chain(page_list, article_list, post_list))\n</code></pre>\n\n<p>Using <code>itertools.chain</code> is faster than looping each list and appending elements one by one, since <code>itertools</code> is implemented in C. It also consumes less memory than converting each queryset into a list before concatenating.</p>\n\n<p>Now it's possible to sort the resulting list e.g. by date (as requested in hasen j's comment to another answer). The <code>sorted()</code> function conveniently accepts a generator and returns a list:</p>\n\n<pre><code>result_list = sorted(\n    chain(page_list, article_list, post_list),\n    key=lambda instance: instance.date_created)\n</code></pre>\n\n<p>If you're using Python 2.4 or later, you can use <code>attrgetter</code> instead of a lambda. I remember reading about it being faster, but I didn't see a noticeable speed difference for a million item list.</p>\n\n<pre><code>from operator import attrgetter\nresult_list = sorted(\n    chain(page_list, article_list, post_list),\n    key=attrgetter('date_created'))\n</code></pre>\n"}, {"title": "How do I do a not equal in Django queryset filtering?", "question_body": "<p>In Django model QuerySets, I see that there is a <code>__gt</code> and <code>__lt</code> for comparitive values, but is there a <code>__ne</code>/<code>!=</code>/<code>&lt;&gt;</code> (<strong>not equals</strong>?)</p>\n\n<p>I want to filter out using a not equals:</p>\n\n<p>Example:</p>\n\n<pre><code>Model:\n    bool a;\n    int x;\n</code></pre>\n\n<p>I want</p>\n\n<pre><code>results = Model.objects.exclude(a=true, x!=5)\n</code></pre>\n\n<p>The <code>!=</code> is not correct syntax. I tried <code>__ne</code>, <code>&lt;&gt;</code>.</p>\n\n<p>I ended up using:</p>\n\n<pre><code>results = Model.objects.exclude(a=true, x__lt=5).exclude(a=true, x__gt=5)\n</code></pre>\n", "link": "https://stackoverflow.com/questions/687295/how-do-i-do-a-not-equal-in-django-queryset-filtering", "question_id": 687295, "accepted_answer_id": 1154977, "answer_body": "<p>Maybe <a href=\"http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects\" rel=\"noreferrer\">Q objects</a> could be of help for this problem. I've never used them but it seems they can be negated and combined much like normal python expressions.</p>\n\n<p>Update: I Just tried it out, it seems to work pretty well:</p>\n\n<pre><code>&gt;&gt;&gt; from myapp.models import Entry\n&gt;&gt;&gt; from django.db.models import Q\n\n&gt;&gt;&gt; Entry.objects.filter(~Q(id = 3))\n\n[&lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, ...]\n</code></pre>\n"}, {"title": "How to temporarily disable a foreign key constraint in MySQL?", "question_body": "<p>Is it possible to temporarily disable constraints in MySQL?</p>\n\n<p>I have two Django models, each with a ForeignKey to the other one. Deleting instances of a model returns an error because of the ForeignKey constraint:</p>\n\n<pre><code>cursor.execute(\"DELETE FROM myapp_item WHERE n = %s\", n)\ntransaction.commit_unless_managed()  #a foreign key constraint fails here\n\ncursor.execute(\"DELETE FROM myapp_style WHERE n = %s\", n)\ntransaction.commit_unless_managed()\n</code></pre>\n\n<p>Is it possible to temporarily disable constraints and delete anyway?</p>\n", "link": "https://stackoverflow.com/questions/15501673/how-to-temporarily-disable-a-foreign-key-constraint-in-mysql", "question_id": 15501673, "accepted_answer_id": 15501754, "answer_body": "<p>Try <code>DISABLE KEYS</code> or    </p>\n\n<pre><code>SET FOREIGN_KEY_CHECKS=0;\n</code></pre>\n\n<p>make sure to</p>\n\n<pre><code>SET FOREIGN_KEY_CHECKS=1;\n</code></pre>\n\n<p>after.</p>\n"}, {"title": "How to debug in Django, the good way?", "question_body": "<p>So, I started learning to code in <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a> and later <a href=\"http://en.wikipedia.org/wiki/Django_%28web_framework%29\" rel=\"noreferrer\">Django</a>. The first times it was hard looking at tracebacks and actually figure out what I did wrong and where the syntax error was. Some time has passed now and some way along the way, I guess I got a routine in debugging my Django code. As this was done early in my coding experience, I sat down and wondered if how I was doing this was ineffective and could be done faster. I usually manage to find and correct the bugs in my code, but I wonder if I should be doing it faster?</p>\n\n<p>I usually just use the debug info Django gives when enabled. When things do end up as I thought it would, I break the code flow a lot with a syntax error, and look at the variables at that point in the flow to figure out, where the code does something other than what I wanted.</p>\n\n<p>But can this be improved? Are there some good tools or better ways to debug your Django code?</p>\n", "link": "https://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way", "question_id": 1118183, "accepted_answer_id": 1118271, "answer_body": "<p>There are a bunch of ways to do it, but the most straightforward is to simply \nuse the <a href=\"https://docs.python.org/2/library/pdb.html\" rel=\"noreferrer\">Python debugger</a>. Just add following line in to a Django view function:</p>\n\n<pre><code>import pdb; pdb.set_trace()\n</code></pre>\n\n<p>or </p>\n\n<pre><code>breakpoint()  #from Python3.7\n</code></pre>\n\n<p>If you try to load that page in your browser, the browser will hang and you get a prompt to carry on debugging on actual executing code.</p>\n\n<p>However there are other options (I am not recommending them):</p>\n\n<pre><code>* return HttpResponse({variable to inspect})\n\n* print {variable to inspect}\n\n* raise Exception({variable to inspect})\n</code></pre>\n\n<p>But the Python Debugger (pdb) is highly recommended for all types of Python code. If you are already into pdb, you'd also want to have a look at <a href=\"http://pypi.python.org/pypi/ipdb/\" rel=\"noreferrer\"><strong>IPDB</strong></a> that uses <a href=\"http://ipython.org/\" rel=\"noreferrer\"><strong>ipython</strong></a> for debugging.</p>\n\n<p>Some more useful extension to pdb are</p>\n\n<p><a href=\"https://pypi.python.org/pypi/pdbpp/\" rel=\"noreferrer\"><strong>pdb++</strong></a>, suggested by <a href=\"https://stackoverflow.com/users/5792269/antash\">Antash</a>.</p>\n\n<p><a href=\"https://pypi.python.org/pypi/pudb\" rel=\"noreferrer\"><strong>pudb</strong></a>, suggested by <a href=\"https://stackoverflow.com/users/5081188/patdujour\">PatDuJour</a>.</p>\n\n<p><a href=\"https://mike.tig.as/blog/2010/09/14/pdb/\" rel=\"noreferrer\"><strong>Using the Python debugger in Django</strong></a>, suggested by <a href=\"https://stackoverflow.com/users/884640/seafangs\">Seafangs</a>.</p>\n"}, {"title": "Is there a list of Pytz Timezones?", "question_body": "<p>I would like to know what are all the possible values for the timezone argument in the Python library pytz. How to do it?</p>\n\n<h2>SOLUTION</h2>\n\n<pre><code>for tz in pytz.all_timezones:\n    print tz\n\n\nAfrica/Abidjan\nAfrica/Accra\nAfrica/Addis_Ababa\nAfrica/Algiers\nAfrica/Asmara\nAfrica/Asmera\nAfrica/Bamako\nAfrica/Bangui\nAfrica/Banjul\nAfrica/Bissau\nAfrica/Blantyre\nAfrica/Brazzaville\nAfrica/Bujumbura\nAfrica/Cairo\nAfrica/Casablanca\nAfrica/Ceuta\nAfrica/Conakry\nAfrica/Dakar\nAfrica/Dar_es_Salaam\nAfrica/Djibouti\nAfrica/Douala\nAfrica/El_Aaiun\nAfrica/Freetown\nAfrica/Gaborone\nAfrica/Harare\nAfrica/Johannesburg\nAfrica/Juba\nAfrica/Kampala\nAfrica/Khartoum\nAfrica/Kigali\nAfrica/Kinshasa\nAfrica/Lagos\nAfrica/Libreville\nAfrica/Lome\nAfrica/Luanda\nAfrica/Lubumbashi\nAfrica/Lusaka\nAfrica/Malabo\nAfrica/Maputo\nAfrica/Maseru\nAfrica/Mbabane\nAfrica/Mogadishu\nAfrica/Monrovia\nAfrica/Nairobi\nAfrica/Ndjamena\nAfrica/Niamey\nAfrica/Nouakchott\nAfrica/Ouagadougou\nAfrica/Porto-Novo\nAfrica/Sao_Tome\nAfrica/Timbuktu\nAfrica/Tripoli\nAfrica/Tunis\nAfrica/Windhoek\nAmerica/Adak\nAmerica/Anchorage\nAmerica/Anguilla\nAmerica/Antigua\nAmerica/Araguaina\nAmerica/Argentina/Buenos_Aires\nAmerica/Argentina/Catamarca\nAmerica/Argentina/ComodRivadavia\nAmerica/Argentina/Cordoba\nAmerica/Argentina/Jujuy\nAmerica/Argentina/La_Rioja\nAmerica/Argentina/Mendoza\nAmerica/Argentina/Rio_Gallegos\nAmerica/Argentina/Salta\nAmerica/Argentina/San_Juan\nAmerica/Argentina/San_Luis\nAmerica/Argentina/Tucuman\nAmerica/Argentina/Ushuaia\nAmerica/Aruba\nAmerica/Asuncion\nAmerica/Atikokan\nAmerica/Atka\nAmerica/Bahia\nAmerica/Bahia_Banderas\nAmerica/Barbados\nAmerica/Belem\nAmerica/Belize\nAmerica/Blanc-Sablon\nAmerica/Boa_Vista\nAmerica/Bogota\nAmerica/Boise\nAmerica/Buenos_Aires\nAmerica/Cambridge_Bay\nAmerica/Campo_Grande\nAmerica/Cancun\nAmerica/Caracas\nAmerica/Catamarca\nAmerica/Cayenne\nAmerica/Cayman\nAmerica/Chicago\nAmerica/Chihuahua\nAmerica/Coral_Harbour\nAmerica/Cordoba\nAmerica/Costa_Rica\nAmerica/Creston\nAmerica/Cuiaba\nAmerica/Curacao\nAmerica/Danmarkshavn\nAmerica/Dawson\nAmerica/Dawson_Creek\nAmerica/Denver\nAmerica/Detroit\nAmerica/Dominica\nAmerica/Edmonton\nAmerica/Eirunepe\nAmerica/El_Salvador\nAmerica/Ensenada\nAmerica/Fort_Wayne\nAmerica/Fortaleza\nAmerica/Glace_Bay\nAmerica/Godthab\nAmerica/Goose_Bay\nAmerica/Grand_Turk\nAmerica/Grenada\nAmerica/Guadeloupe\nAmerica/Guatemala\nAmerica/Guayaquil\nAmerica/Guyana\nAmerica/Halifax\nAmerica/Havana\nAmerica/Hermosillo\nAmerica/Indiana/Indianapolis\nAmerica/Indiana/Knox\nAmerica/Indiana/Marengo\nAmerica/Indiana/Petersburg\nAmerica/Indiana/Tell_City\nAmerica/Indiana/Vevay\nAmerica/Indiana/Vincennes\nAmerica/Indiana/Winamac\nAmerica/Indianapolis\nAmerica/Inuvik\nAmerica/Iqaluit\nAmerica/Jamaica\nAmerica/Jujuy\nAmerica/Juneau\nAmerica/Kentucky/Louisville\nAmerica/Kentucky/Monticello\nAmerica/Knox_IN\nAmerica/Kralendijk\nAmerica/La_Paz\nAmerica/Lima\nAmerica/Los_Angeles\nAmerica/Louisville\nAmerica/Lower_Princes\nAmerica/Maceio\nAmerica/Managua\nAmerica/Manaus\nAmerica/Marigot\nAmerica/Martinique\nAmerica/Matamoros\nAmerica/Mazatlan\nAmerica/Mendoza\nAmerica/Menominee\nAmerica/Merida\nAmerica/Metlakatla\nAmerica/Mexico_City\nAmerica/Miquelon\nAmerica/Moncton\nAmerica/Monterrey\nAmerica/Montevideo\nAmerica/Montreal\nAmerica/Montserrat\nAmerica/Nassau\nAmerica/New_York\nAmerica/Nipigon\nAmerica/Nome\nAmerica/Noronha\nAmerica/North_Dakota/Beulah\nAmerica/North_Dakota/Center\nAmerica/North_Dakota/New_Salem\nAmerica/Ojinaga\nAmerica/Panama\nAmerica/Pangnirtung\nAmerica/Paramaribo\nAmerica/Phoenix\nAmerica/Port-au-Prince\nAmerica/Port_of_Spain\nAmerica/Porto_Acre\nAmerica/Porto_Velho\nAmerica/Puerto_Rico\nAmerica/Rainy_River\nAmerica/Rankin_Inlet\nAmerica/Recife\nAmerica/Regina\nAmerica/Resolute\nAmerica/Rio_Branco\nAmerica/Rosario\nAmerica/Santa_Isabel\nAmerica/Santarem\nAmerica/Santiago\nAmerica/Santo_Domingo\nAmerica/Sao_Paulo\nAmerica/Scoresbysund\nAmerica/Shiprock\nAmerica/Sitka\nAmerica/St_Barthelemy\nAmerica/St_Johns\nAmerica/St_Kitts\nAmerica/St_Lucia\nAmerica/St_Thomas\nAmerica/St_Vincent\nAmerica/Swift_Current\nAmerica/Tegucigalpa\nAmerica/Thule\nAmerica/Thunder_Bay\nAmerica/Tijuana\nAmerica/Toronto\nAmerica/Tortola\nAmerica/Vancouver\nAmerica/Virgin\nAmerica/Whitehorse\nAmerica/Winnipeg\nAmerica/Yakutat\nAmerica/Yellowknife\nAntarctica/Casey\nAntarctica/Davis\nAntarctica/DumontDUrville\nAntarctica/Macquarie\nAntarctica/Mawson\nAntarctica/McMurdo\nAntarctica/Palmer\nAntarctica/Rothera\nAntarctica/South_Pole\nAntarctica/Syowa\nAntarctica/Vostok\nArctic/Longyearbyen\nAsia/Aden\nAsia/Almaty\nAsia/Amman\nAsia/Anadyr\nAsia/Aqtau\nAsia/Aqtobe\nAsia/Ashgabat\nAsia/Ashkhabad\nAsia/Baghdad\nAsia/Bahrain\nAsia/Baku\nAsia/Bangkok\nAsia/Beirut\nAsia/Bishkek\nAsia/Brunei\nAsia/Calcutta\nAsia/Choibalsan\nAsia/Chongqing\nAsia/Chungking\nAsia/Colombo\nAsia/Dacca\nAsia/Damascus\nAsia/Dhaka\nAsia/Dili\nAsia/Dubai\nAsia/Dushanbe\nAsia/Gaza\nAsia/Harbin\nAsia/Hebron\nAsia/Ho_Chi_Minh\nAsia/Hong_Kong\nAsia/Hovd\nAsia/Irkutsk\nAsia/Istanbul\nAsia/Jakarta\nAsia/Jayapura\nAsia/Jerusalem\nAsia/Kabul\nAsia/Kamchatka\nAsia/Karachi\nAsia/Kashgar\nAsia/Kathmandu\nAsia/Katmandu\nAsia/Kolkata\nAsia/Krasnoyarsk\nAsia/Kuala_Lumpur\nAsia/Kuching\nAsia/Kuwait\nAsia/Macao\nAsia/Macau\nAsia/Magadan\nAsia/Makassar\nAsia/Manila\nAsia/Muscat\nAsia/Nicosia\nAsia/Novokuznetsk\nAsia/Novosibirsk\nAsia/Omsk\nAsia/Oral\nAsia/Phnom_Penh\nAsia/Pontianak\nAsia/Pyongyang\nAsia/Qatar\nAsia/Qyzylorda\nAsia/Rangoon\nAsia/Riyadh\nAsia/Saigon\nAsia/Sakhalin\nAsia/Samarkand\nAsia/Seoul\nAsia/Shanghai\nAsia/Singapore\nAsia/Taipei\nAsia/Tashkent\nAsia/Tbilisi\nAsia/Tehran\nAsia/Tel_Aviv\nAsia/Thimbu\nAsia/Thimphu\nAsia/Tokyo\nAsia/Ujung_Pandang\nAsia/Ulaanbaatar\nAsia/Ulan_Bator\nAsia/Urumqi\nAsia/Vientiane\nAsia/Vladivostok\nAsia/Yakutsk\nAsia/Yekaterinburg\nAsia/Yerevan\nAtlantic/Azores\nAtlantic/Bermuda\nAtlantic/Canary\nAtlantic/Cape_Verde\nAtlantic/Faeroe\nAtlantic/Faroe\nAtlantic/Jan_Mayen\nAtlantic/Madeira\nAtlantic/Reykjavik\nAtlantic/South_Georgia\nAtlantic/St_Helena\nAtlantic/Stanley\nAustralia/ACT\nAustralia/Adelaide\nAustralia/Brisbane\nAustralia/Broken_Hill\nAustralia/Canberra\nAustralia/Currie\nAustralia/Darwin\nAustralia/Eucla\nAustralia/Hobart\nAustralia/LHI\nAustralia/Lindeman\nAustralia/Lord_Howe\nAustralia/Melbourne\nAustralia/NSW\nAustralia/North\nAustralia/Perth\nAustralia/Queensland\nAustralia/South\nAustralia/Sydney\nAustralia/Tasmania\nAustralia/Victoria\nAustralia/West\nAustralia/Yancowinna\nBrazil/Acre\nBrazil/DeNoronha\nBrazil/East\nBrazil/West\nCET\nCST6CDT\nCanada/Atlantic\nCanada/Central\nCanada/East-Saskatchewan\nCanada/Eastern\nCanada/Mountain\nCanada/Newfoundland\nCanada/Pacific\nCanada/Saskatchewan\nCanada/Yukon\nChile/Continental\nChile/EasterIsland\nCuba\nEET\nEST\nEST5EDT\nEgypt\nEire\nEtc/GMT\nEtc/GMT+0\nEtc/GMT+1\nEtc/GMT+10\nEtc/GMT+11\nEtc/GMT+12\nEtc/GMT+2\nEtc/GMT+3\nEtc/GMT+4\nEtc/GMT+5\nEtc/GMT+6\nEtc/GMT+7\nEtc/GMT+8\nEtc/GMT+9\nEtc/GMT-0\nEtc/GMT-1\nEtc/GMT-10\nEtc/GMT-11\nEtc/GMT-12\nEtc/GMT-13\nEtc/GMT-14\nEtc/GMT-2\nEtc/GMT-3\nEtc/GMT-4\nEtc/GMT-5\nEtc/GMT-6\nEtc/GMT-7\nEtc/GMT-8\nEtc/GMT-9\nEtc/GMT0\nEtc/Greenwich\nEtc/UCT\nEtc/UTC\nEtc/Universal\nEtc/Zulu\nEurope/Amsterdam\nEurope/Andorra\nEurope/Athens\nEurope/Belfast\nEurope/Belgrade\nEurope/Berlin\nEurope/Bratislava\nEurope/Brussels\nEurope/Bucharest\nEurope/Budapest\nEurope/Chisinau\nEurope/Copenhagen\nEurope/Dublin\nEurope/Gibraltar\nEurope/Guernsey\nEurope/Helsinki\nEurope/Isle_of_Man\nEurope/Istanbul\nEurope/Jersey\nEurope/Kaliningrad\nEurope/Kiev\nEurope/Lisbon\nEurope/Ljubljana\nEurope/London\nEurope/Luxembourg\nEurope/Madrid\nEurope/Malta\nEurope/Mariehamn\nEurope/Minsk\nEurope/Monaco\nEurope/Moscow\nEurope/Nicosia\nEurope/Oslo\nEurope/Paris\nEurope/Podgorica\nEurope/Prague\nEurope/Riga\nEurope/Rome\nEurope/Samara\nEurope/San_Marino\nEurope/Sarajevo\nEurope/Simferopol\nEurope/Skopje\nEurope/Sofia\nEurope/Stockholm\nEurope/Tallinn\nEurope/Tirane\nEurope/Tiraspol\nEurope/Uzhgorod\nEurope/Vaduz\nEurope/Vatican\nEurope/Vienna\nEurope/Vilnius\nEurope/Volgograd\nEurope/Warsaw\nEurope/Zagreb\nEurope/Zaporozhye\nEurope/Zurich\nGB\nGB-Eire\nGMT\nGMT+0\nGMT-0\nGMT0\nGreenwich\nHST\nHongkong\nIceland\nIndian/Antananarivo\nIndian/Chagos\nIndian/Christmas\nIndian/Cocos\nIndian/Comoro\nIndian/Kerguelen\nIndian/Mahe\nIndian/Maldives\nIndian/Mauritius\nIndian/Mayotte\nIndian/Reunion\nIran\nIsrael\nJamaica\nJapan\nKwajalein\nLibya\nMET\nMST\nMST7MDT\nMexico/BajaNorte\nMexico/BajaSur\nMexico/General\nNZ\nNZ-CHAT\nNavajo\nPRC\nPST8PDT\nPacific/Apia\nPacific/Auckland\nPacific/Chatham\nPacific/Chuuk\nPacific/Easter\nPacific/Efate\nPacific/Enderbury\nPacific/Fakaofo\nPacific/Fiji\nPacific/Funafuti\nPacific/Galapagos\nPacific/Gambier\nPacific/Guadalcanal\nPacific/Guam\nPacific/Honolulu\nPacific/Johnston\nPacific/Kiritimati\nPacific/Kosrae\nPacific/Kwajalein\nPacific/Majuro\nPacific/Marquesas\nPacific/Midway\nPacific/Nauru\nPacific/Niue\nPacific/Norfolk\nPacific/Noumea\nPacific/Pago_Pago\nPacific/Palau\nPacific/Pitcairn\nPacific/Pohnpei\nPacific/Ponape\nPacific/Port_Moresby\nPacific/Rarotonga\nPacific/Saipan\nPacific/Samoa\nPacific/Tahiti\nPacific/Tarawa\nPacific/Tongatapu\nPacific/Truk\nPacific/Wake\nPacific/Wallis\nPacific/Yap\nPoland\nPortugal\nROC\nROK\nSingapore\nTurkey\nUCT\nUS/Alaska\nUS/Aleutian\nUS/Arizona\nUS/Central\nUS/East-Indiana\nUS/Eastern\nUS/Hawaii\nUS/Indiana-Starke\nUS/Michigan\nUS/Mountain\nUS/Pacific\nUS/Pacific-New\nUS/Samoa\nUTC\nUniversal\nW-SU\nWET\nZulu\n</code></pre>\n", "link": "https://stackoverflow.com/questions/13866926/is-there-a-list-of-pytz-timezones", "question_id": 13866926, "accepted_answer_id": 13867319, "answer_body": "<p>You can list all the available timezones with <code>pytz.all_timezones</code>:</p>\n\n<pre><code>In [40]: import pytz\nIn [41]: pytz.all_timezones\nOut[42]: \n['Africa/Abidjan',\n 'Africa/Accra',\n 'Africa/Addis_Ababa',\n ...]\n</code></pre>\n\n<p>There is also <code>pytz.common_timezones</code>:</p>\n\n<pre><code>In [45]: len(pytz.common_timezones)\nOut[45]: 403\n\nIn [46]: len(pytz.all_timezones)\nOut[46]: 563\n</code></pre>\n"}, {"title": "What is a &quot;slug&quot; in Django?", "question_body": "<p>When I read Django code I often see in models what is called a \"slug\". I am not quite sure what this is, but I do know it has something to do with URLs. How and when is this slug-thing supposed to be used? </p>\n\n<p>(I have read its definition in <a href=\"http://docs.djangoproject.com/en/dev/glossary/\" rel=\"noreferrer\">this glossary</a>.)</p>\n", "link": "https://stackoverflow.com/questions/427102/what-is-a-slug-in-django", "question_id": 427102, "accepted_answer_id": 427160, "answer_body": "<p>It's a way of generating a valid URL, generally using data already obtained. For instance, using the title of an article to generate a URL. I'd advise to generate the slug, using a function, given a title (or other piece of data), rather than setting it manually.</p>\n\n<p>An example:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;title&gt; The 46 Year Old Virgin &lt;/title&gt;\n&lt;content&gt; A silly comedy movie &lt;/content&gt;\n&lt;slug&gt; the-46-year-old-virgin &lt;/slug&gt;\n</code></pre>\n\n<p>Now let's pretend that we have a Django model such as:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>class Article(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField(max_length=1000)\n    slug = models.SlugField(max_length=40)\n</code></pre>\n\n<p>How would you reference this object with a URL, with a meaningful name? You could use Article.id so the URL would look like this:</p>\n\n<pre><code>www.example.com/article/23\n</code></pre>\n\n<p>Or, you could reference the title like so:</p>\n\n<pre><code>www.example.com/article/The 46 Year Old Virgin\n</code></pre>\n\n<p>Problem is, spaces aren't valid in URLs, they need to be replaced by <code>%20</code> which is ugly, making it the following:</p>\n\n<pre><code>www.example.com/article/The%2046%20Year%20Old%20Virgin\n</code></pre>\n\n<p>That's not solving our meaningful URL. Wouldn't this be better:</p>\n\n<pre><code>www.example.com/article/the-46-year-old-virgin\n</code></pre>\n\n<p>That's a slug. <code>the-46-year-old-virgin</code>. All letters are downcased and spaces are replaced by hyphens <code>-</code>. See the URL of this very webpage for an example!</p>\n"}, {"title": "How to check Django version", "question_body": "<p>I have to use <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a> and <a href=\"http://en.wikipedia.org/wiki/Django_%28web_framework%29\" rel=\"noreferrer\">Django</a> for our application. So I have two versions of Python, 2.6 and 2.7. Now I have installed Django. I could run the sample application for testing Django succesfuly. But how do I make sure whether Django uses the 2.6 or 2.7 version and what version of modules Django uses?</p>\n", "link": "https://stackoverflow.com/questions/6468397/how-to-check-django-version", "question_id": 6468397, "accepted_answer_id": 6468505, "answer_body": "<p>Django 1.5 supports Python 2.6.5 and later.</p>\n\n<p>If you're under Linux and want to check the Python version you're using, run <code>python -V</code> from the command line.</p>\n\n<p>If you want to check the Django version, open a Python console and type</p>\n\n<pre><code>&gt;&gt;&gt; import django\n&gt;&gt;&gt; django.VERSION\n(2, 0, 0, 'final', 0)\n</code></pre>\n"}, {"title": "Django - Set Up A Scheduled Job?", "question_body": "<p>I've been working on a web app using Django, and I'm curious if there is a way to schedule a job to run periodically. </p>\n\n<p>Basically I just want to run through the database and make some calculations/updates on an automatic, regular basis, but I can't seem to find any documentation on doing this.</p>\n\n<p>Does anyone know how to set this up?</p>\n\n<p>To clarify:  I know I can set up a <code>cron</code> job to do this, but I'm curious if there is some feature in Django that provides this functionality.   I'd like people to be able to deploy this app themselves without having to do much config (preferably zero).</p>\n\n<p>I've considered triggering these actions \"retroactively\" by simply checking if a job should have been run since the last time a request was sent to the site, but I'm hoping for something a bit cleaner.</p>\n", "link": "https://stackoverflow.com/questions/573618/django-set-up-a-scheduled-job", "question_id": 573618, "accepted_answer_id": 573659, "answer_body": "<p>One solution that I have employed is to do this:</p>\n\n<p>1) Create a <a href=\"http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands\" rel=\"nofollow noreferrer\">custom management command</a>, e.g. </p>\n\n<pre><code>python manage.py my_cool_command\n</code></pre>\n\n<p>2) Use <code>cron</code> (on Linux) or <code>at</code> (on Windows) to run my command at the required times.</p>\n\n<p>This is a simple solution that doesn't require installing a heavy AMQP stack. However there are nice advantages to using something like Celery, mentioned in the other answers. In particular, with Celery it is nice to not have to spread your application logic out into crontab files. However the cron solution works quite nicely for a small to medium sized application and where you don't want a lot of external dependencies.</p>\n\n<p>EDIT:</p>\n\n<p>In later version of windows the <code>at</code> command is deprecated for Windows 8, Server 2012 and above. You can use <code>schtasks.exe</code> for same use.</p>\n\n<p>**** UPDATE ****\nThis the new <a href=\"https://docs.djangoproject.com/en/2.2/howto/custom-management-commands/#howto-custom-management-commands\" rel=\"nofollow noreferrer\">link</a> of django doc for writing the custom management command</p>\n"}, {"title": "Filtering for empty or NULL names in a queryset", "question_body": "<p>I have <code>first_name</code>, <code>last_name</code> &amp; <code>alias</code> (optional) which I need to search for. So, I need a query to give me all the names that have an alias set.</p>\n\n<p>Only if I could do:</p>\n\n<pre><code>Name.objects.filter(alias!=\"\")\n</code></pre>\n\n<p>So, what is the equivalent to the above?</p>\n", "link": "https://stackoverflow.com/questions/844556/filtering-for-empty-or-null-names-in-a-queryset", "question_id": 844556, "accepted_answer_id": 844572, "answer_body": "<p>You could do this:</p>\n\n<pre><code>Name.objects.exclude(alias__isnull=True)\n</code></pre>\n\n<p>If you need to exclude null values <em>and</em> empty strings, the preferred way to do so is to chain together the conditions like so:</p>\n\n<pre><code>Name.objects.exclude(alias__isnull=True).exclude(alias__exact='')\n</code></pre>\n\n<p>Chaining these methods together basically checks each condition independently: in the above example, we exclude rows where <code>alias</code> is either null <em>or</em> an empty string, so you get all <code>Name</code> objects that have a not-null, not-empty <code>alias</code> field. The generated SQL would look something like:</p>\n\n<pre><code>SELECT * FROM Name WHERE alias IS NOT NULL AND alias != \"\"\n</code></pre>\n\n<p>You can also pass multiple arguments to a single call to <code>exclude</code>, which would ensure that only objects that meet <em>every</em> condition get excluded:</p>\n\n<pre><code>Name.objects.exclude(some_field=True, other_field=True)\n</code></pre>\n\n<p>Here, rows in which <code>some_field</code> <em>and</em> <code>other_field</code> are true get excluded, so we get all rows where both fields are not true. The generated SQL code would look a little like this:</p>\n\n<pre><code>SELECT * FROM Name WHERE NOT (some_field = TRUE AND other_field = TRUE)\n</code></pre>\n\n<p>Alternatively, if your logic is more complex than that, you could use Django's <a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#q-objects\" rel=\"noreferrer\">Q objects</a>:</p>\n\n<pre><code>from django.db.models import Q\nName.objects.exclude(Q(alias__isnull=True) | Q(alias__exact=''))\n</code></pre>\n\n<p>For more info see <a href=\"https://docs.djangoproject.com/en/dev/topics/db/queries/\" rel=\"noreferrer\">this page</a> and <a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets\" rel=\"noreferrer\">this page</a> in the Django docs.</p>\n\n<p><sub>As an aside: My SQL examples are just an analogy--the actual generated SQL code will probably look different. You'll get a deeper understanding of how Django queries work by actually looking at the SQL they generate.</sub></p>\n"}, {"title": "Separation of business logic and data access in django", "question_body": "<p>I am writing a project in Django and I see that 80% of the code is in the file <code>models.py</code>. This code is confusing and, after a certain time, I cease to understand what is really happening.</p>\n\n<p>Here is what bothers me:</p>\n\n<ol>\n<li>I find it ugly that my model level (which was supposed to be\nresponsible only for the work with data from a database) is also\nsending email, walking on API to other services, etc. </li>\n<li>Also, I find it unacceptable to place business logic in the view, because\nthis way it becomes difficult to control. For example, in my\napplication there are at least three ways to create new\ninstances of <code>User</code>, but technically it should create them uniformly. </li>\n<li>I do not always notice when the methods and\nproperties of my models become non-deterministic and when they develop\nside effects.</li>\n</ol>\n\n<p>Here is a simple example. At first, the <code>User</code> model was like this:</p>\n\n<pre><code>class User(db.Models):\n\n    def get_present_name(self):\n        return self.name or 'Anonymous'\n\n    def activate(self):\n        self.status = 'activated'\n        self.save()\n</code></pre>\n\n<p>Over time, it turned into this:</p>\n\n<pre><code>class User(db.Models):\n\n    def get_present_name(self): \n        # property became non-deterministic in terms of database\n        # data is taken from another service by api\n        return remote_api.request_user_name(self.uid) or 'Anonymous' \n\n    def activate(self):\n        # method now has a side effect (send message to user)\n        self.status = 'activated'\n        self.save()\n        send_mail('Your account is activated!', '\u2026', [self.email])\n</code></pre>\n\n<p>What I want is to separate entities in my code:</p>\n\n<ol>\n<li><strong>Entities of my database, database level: What contains my application?</strong></li>\n<li><strong>Entities of my application, business logic level: What can make my application?</strong></li>\n</ol>\n\n<p>What are the good practices to implement such an approach that can be applied in Django?</p>\n", "link": "https://stackoverflow.com/questions/12578908/separation-of-business-logic-and-data-access-in-django", "question_id": 12578908, "accepted_answer_id": 12857584, "answer_body": "<p>It seems like you are asking about the difference between the <em>data model</em> and the <em>domain model</em> \u2013\u00a0the latter is where you can find the business logic and entities as perceived by your end user, the former is where you actually store your data. </p>\n\n<p>Furthermore, I've interpreted the 3rd part of your question as: how to notice failure to keep these models separate. </p>\n\n<p>These are two very different concepts and it's always hard to keep them separate. However, there are some common patterns and tools that can be used for this purpose. </p>\n\n<h2>About the Domain Model</h2>\n\n<p>The first thing you need to recognize is that your domain model is not really about data; it is about <em>actions</em> and <em>questions</em> such as \"activate this user\", \"deactivate this user\", \"which users are currently activated?\", and \"what is this user's name?\". In classical terms: it's about <em>queries</em> and <em>commands</em>. </p>\n\n<h2>Thinking in Commands</h2>\n\n<p>Let's start by looking at the commands in your example: \"activate this user\" and \"deactivate this user\". The nice thing about commands is that they can easily be expressed by small given-when-then scenario's: </p>\n\n<blockquote>\n  <p><strong>given</strong> an inactive user <br/>\n  <strong>when</strong> the admin activates this user <br/>\n  <strong>then</strong> the user becomes active <br/>\n  <strong>and</strong> a confirmation e-mail is sent to the user <br/>\n  <strong>and</strong> an entry is added to the system log<br/>\n   (etc. etc.)</p>\n</blockquote>\n\n<p>Such scenario's are useful to see how different parts of your infrastructure can be affected by a single command \u2013\u00a0in this case your database (some kind of 'active' flag), your mail server, your system log, etc. </p>\n\n<p>Such scenario's also really help you in setting up a Test Driven Development environment. </p>\n\n<p>And finally, thinking in commands really helps you create a task-oriented application. Your users will appreciate this :-)</p>\n\n<h2>Expressing Commands</h2>\n\n<p>Django provides two easy ways of expressing commands; they are both valid options and it is not unusual to mix the two approaches. </p>\n\n<h3>The service layer</h3>\n\n<p>The <em>service module</em> has already been <a href=\"https://stackoverflow.com/a/12579490/383793\">described by @Hedde</a>. Here you define a separate module and each command is represented as a function. </p>\n\n<p><strong>services.py</strong></p>\n\n<pre><code>def activate_user(user_id):\n    user = User.objects.get(pk=user_id)\n\n    # set active flag\n    user.active = True\n    user.save()\n\n    # mail user\n    send_mail(...)\n\n    # etc etc\n</code></pre>\n\n<h3>Using forms</h3>\n\n<p>The other way is to use a Django Form for each command. I prefer this approach, because it combines multiple closely related aspects:</p>\n\n<ul>\n<li>execution of the command (what does it do?)</li>\n<li>validation of the command parameters (can it do this?)</li>\n<li>presentation of the command (how can I do this?)</li>\n</ul>\n\n<p><strong>forms.py</strong></p>\n\n<pre><code>class ActivateUserForm(forms.Form):\n\n    user_id = IntegerField(widget = UsernameSelectWidget, verbose_name=\"Select a user to activate\")\n    # the username select widget is not a standard Django widget, I just made it up\n\n    def clean_user_id(self):\n        user_id = self.cleaned_data['user_id']\n        if User.objects.get(pk=user_id).active:\n            raise ValidationError(\"This user cannot be activated\")\n        # you can also check authorizations etc. \n        return user_id\n\n    def execute(self):\n        \"\"\"\n        This is not a standard method in the forms API; it is intended to replace the \n        'extract-data-from-form-in-view-and-do-stuff' pattern by a more testable pattern. \n        \"\"\"\n        user_id = self.cleaned_data['user_id']\n\n        user = User.objects.get(pk=user_id)\n\n        # set active flag\n        user.active = True\n        user.save()\n\n        # mail user\n        send_mail(...)\n\n        # etc etc\n</code></pre>\n\n<h2>Thinking in Queries</h2>\n\n<p>You example did not contain any queries, so I took the liberty of making up a few useful queries. I prefer to use the term \"question\", but queries is the classical terminology. Interesting queries are: \"What is the name of this user?\", \"Can this user log in?\", \"Show me a list of deactivated users\", and \"What is the geographical distribution of deactivated users?\" </p>\n\n<p>Before embarking on answering these queries, you should always ask yourself two questions: is this a <em>presentational</em> query just for my templates, and/or a <em>business logic</em> query tied to executing my commands, and/or a <em>reporting</em> query. </p>\n\n<p>Presentational queries are merely made to improve the user interface. The answers to business logic queries directly affect the execution of your commands. Reporting queries are merely for analytical purposes and have looser time constraints. These categories are not mutually exclusive. </p>\n\n<p>The other question is: \"do I have complete control over the answers?\" For example, when querying the user's name (in this context)  we do not have any control over the outcome, because we rely on an external API. </p>\n\n<h2>Making Queries</h2>\n\n<p>The most basic query in Django is the use of the Manager object: </p>\n\n<pre><code>User.objects.filter(active=True)\n</code></pre>\n\n<p>Of course, this only works if the data is actually represented in your data model. This is not always the case. In those cases, you can consider the options below. </p>\n\n<h3>Custom tags and filters</h3>\n\n<p>The first alternative is useful for queries that are merely presentational: custom tags and template filters. </p>\n\n<p><strong>template.html</strong></p>\n\n<pre><code>&lt;h1&gt;Welcome, {{ user|friendly_name }}&lt;/h1&gt;\n</code></pre>\n\n<p><strong>template_tags.py</strong></p>\n\n<pre><code>@register.filter\ndef friendly_name(user):\n    return remote_api.get_cached_name(user.id)\n</code></pre>\n\n<h3>Query methods</h3>\n\n<p>If your query is not merely presentational, you could add queries to your <strong>services.py</strong> (if you are using that), or introduce a <strong>queries.py</strong> module: </p>\n\n<p><strong>queries.py</strong></p>\n\n<pre><code>def inactive_users():\n    return User.objects.filter(active=False)\n\n\ndef users_called_publysher():\n    for user in User.objects.all():\n        if remote_api.get_cached_name(user.id) == \"publysher\":\n            yield user \n</code></pre>\n\n<h3>Proxy models</h3>\n\n<p>Proxy models are very useful in the context of business logic and reporting. You basically define an enhanced subset of your model. You can override a Manager\u2019s base QuerySet by overriding the <a href=\"https://docs.djangoproject.com/en/2.0/topics/db/managers/#modifying-a-manager-s-initial-queryset\" rel=\"noreferrer\"><code>Manager.get_queryset()</code></a> method. </p>\n\n<p><strong>models.py</strong></p>\n\n<pre><code>class InactiveUserManager(models.Manager):\n    def get_queryset(self):\n        query_set = super(InactiveUserManager, self).get_queryset()\n        return query_set.filter(active=False)\n\nclass InactiveUser(User):\n    \"\"\"\n    &gt;&gt;&gt; for user in InactiveUser.objects.all():\n    \u2026        assert user.active is False \n    \"\"\"\n\n    objects = InactiveUserManager()\n    class Meta:\n        proxy = True\n</code></pre>\n\n<h3>Query models</h3>\n\n<p>For queries that are inherently complex, but are executed quite often, there is the possibility of query models. A query model is a form of denormalization where relevant data for a single query is stored in a separate model. The trick of course is to keep the denormalized model in sync with the primary model. Query models can only be used if changes are entirely under your control. </p>\n\n<p><strong>models.py</strong></p>\n\n<pre><code>class InactiveUserDistribution(models.Model):\n    country = CharField(max_length=200)\n    inactive_user_count = IntegerField(default=0)\n</code></pre>\n\n<p>The first option is to update these models in your commands. This is very useful if these models are only changed by one or two commands. </p>\n\n<p><strong>forms.py</strong></p>\n\n<pre><code>class ActivateUserForm(forms.Form):\n    # see above\n\n    def execute(self):\n        # see above\n        query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\n        query_model.inactive_user_count -= 1\n        query_model.save()\n</code></pre>\n\n<p>A better option would be to use custom signals. These signals are of course emitted by your commands. Signals have the advantage that you can keep multiple query models in sync with your original model. Furthermore, signal processing can be offloaded to background tasks, using Celery or similar frameworks. </p>\n\n<p><strong>signals.py</strong></p>\n\n<pre><code>user_activated = Signal(providing_args = ['user'])\nuser_deactivated = Signal(providing_args = ['user'])\n</code></pre>\n\n<p><strong>forms.py</strong></p>\n\n<pre><code>class ActivateUserForm(forms.Form):\n    # see above\n\n    def execute(self):\n        # see above\n        user_activated.send_robust(sender=self, user=user)\n</code></pre>\n\n<p><strong>models.py</strong></p>\n\n<pre><code>class InactiveUserDistribution(models.Model):\n    # see above\n\n@receiver(user_activated)\ndef on_user_activated(sender, **kwargs):\n        user = kwargs['user']\n        query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\n        query_model.inactive_user_count -= 1\n        query_model.save()\n</code></pre>\n\n<h2>Keeping it clean</h2>\n\n<p>When using this approach, it becomes ridiculously easy to determine if your code stays clean. Just follow these guidelines:</p>\n\n<ul>\n<li>Does my model contain methods that do more than managing database state? You should extract a command. </li>\n<li>Does my model contain properties that do not map to database fields? You should extract a query. </li>\n<li>Does my model reference infrastructure that is not my database (such as mail)? You should extract a command.</li>\n</ul>\n\n<p>The same goes for views (because views often suffer from the same problem). </p>\n\n<ul>\n<li>Does my view actively manage database models? You should extract a command.</li>\n</ul>\n\n<h2>Some References</h2>\n\n<p><a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-models\" rel=\"noreferrer\">Django documentation: proxy models</a></p>\n\n<p><a href=\"https://docs.djangoproject.com/en/dev/topics/signals/\" rel=\"noreferrer\">Django documentation: signals</a></p>\n\n<p><a href=\"https://rads.stackoverflow.com/amzn/click/com/0321125215\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">Architecture: Domain Driven Design</a></p>\n"}, {"title": "Creating a JSON response using Django and Python", "question_body": "<p>I'm trying to convert a server side Ajax response script into a Django HttpResponse, but apparently it's not working.</p>\n\n<p>This is the server-side script:</p>\n\n<pre><code>/* RECEIVE VALUE */\n$validateValue=$_POST['validateValue'];\n$validateId=$_POST['validateId'];\n$validateError=$_POST['validateError'];\n\n/* RETURN VALUE */\n$arrayToJs = array();\n$arrayToJs[0] = $validateId;\n$arrayToJs[1] = $validateError;\n\nif($validateValue ==\"Testuser\"){  // Validate??\n    $arrayToJs[2] = \"true\";       // RETURN TRUE\n    echo '{\"jsonValidateReturn\":'.json_encode($arrayToJs).'}';  // RETURN ARRAY WITH success\n}\nelse{\n    for($x=0;$x&lt;1000000;$x++){\n        if($x == 990000){\n            $arrayToJs[2] = \"false\";\n            echo '{\"jsonValidateReturn\":'.json_encode($arrayToJs).'}';   // RETURNS ARRAY WITH ERROR.\n        }\n    }\n}\n</code></pre>\n\n<p>And this is the converted code</p>\n\n<pre><code>def validate_user(request):\n    if request.method == 'POST':\n        vld_value = request.POST.get('validateValue')\n        vld_id = request.POST.get('validateId')\n        vld_error = request.POST.get('validateError')\n\n        array_to_js = [vld_id, vld_error, False]\n\n        if vld_value == \"TestUser\":\n            array_to_js[2] = True\n            x = simplejson.dumps(array_to_js)\n            return HttpResponse(x)\n        else:\n            array_to_js[2] = False\n            x = simplejson.dumps(array_to_js)\n            error = 'Error'\n            return render_to_response('index.html',{'error':error},context_instance=RequestContext(request))\n    return render_to_response('index.html',context_instance=RequestContext(request))\n</code></pre>\n\n<p>I'm using simplejson to encode the Python list (so it will return a JSON array). I couldn't figure out the problem yet. But I think that I did something wrong about the 'echo'.</p>\n", "link": "https://stackoverflow.com/questions/2428092/creating-a-json-response-using-django-and-python", "question_id": 2428092, "accepted_answer_id": 2428119, "answer_body": "<p>I usually use a dictionary, not a list to return JSON content. </p>\n\n<pre><code>import json\n\nfrom django.http import HttpResponse\n\nresponse_data = {}\nresponse_data['result'] = 'error'\nresponse_data['message'] = 'Some error message'\n</code></pre>\n\n<p>Pre-Django 1.7 you'd return it like this:</p>\n\n<pre><code>return HttpResponse(json.dumps(response_data), content_type=\"application/json\")\n</code></pre>\n\n<p>For Django 1.7+, use <a href=\"https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects\" rel=\"noreferrer\"><code>JsonResponse</code></a> as shown in <a href=\"https://stackoverflow.com/a/24411716/7376\">this SO answer</a> like so : </p>\n\n<pre><code>from django.http import JsonResponse\nreturn JsonResponse({'foo':'bar'})\n</code></pre>\n"}, {"title": "Extending the User model with custom fields in Django", "question_body": "<p>What's the best way to extend the User model (bundled with Django's authentication app) with custom fields? I would also possibly like to use the email as the username (for authentication purposes).</p>\n\n<p>I've already seen a <a href=\"http://scottbarnham.com/blog/2008/08/21/extending-the-django-user-model-with-inheritance/\" rel=\"noreferrer\">few</a> <a href=\"http://www.b-list.org/weblog/2006/jun/06/django-tips-extending-user-model/\" rel=\"noreferrer\">ways</a> to do it, but can't decide on which one is the best.</p>\n", "link": "https://stackoverflow.com/questions/44109/extending-the-user-model-with-custom-fields-in-django", "question_id": 44109, "accepted_answer_id": 44178, "answer_body": "<p>The least painful and indeed Django-recommended way of doing this is through a <code>OneToOneField(User)</code> property.</p>\n\n<blockquote>\n  <h2><a href=\"https://docs.djangoproject.com/en/dev/topics/auth/customizing/#extending-the-existing-user-model\" rel=\"noreferrer\">Extending the existing User model</a></h2>\n  \n  <p>&hellip;</p>\n  \n  <p>If you wish to store information related to <code>User</code>, you can use a <a href=\"https://docs.djangoproject.com/en/dev/ref/models/fields/#ref-onetoone\" rel=\"noreferrer\">one-to-one relationship</a> to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user.</p>\n</blockquote>\n\n<p>That said, extending <code>django.contrib.auth.models.User</code> and supplanting it also works...</p>\n\n<blockquote>\n  <h2><a href=\"https://docs.djangoproject.com/en/dev/topics/auth/customizing/#substituting-a-custom-user-model\" rel=\"noreferrer\">Substituting a custom User model</a></h2>\n  \n  <p>Some kinds of projects may have authentication requirements for which Django\u2019s built-in <code>User</code> model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.</p>\n  \n  <p><em>[Ed: <strong>Two warnings and a notification follow</strong>, mentioning that this is <strong>pretty drastic</strong>.]</em></p>\n</blockquote>\n\n<p>I would definitely stay away from changing the actual User class in your Django source tree and/or copying and altering the auth module.</p>\n"}, {"title": "No module named pkg_resources", "question_body": "<p>I'm deploying a Django app to a dev server and am hitting this error when I run <code>pip install -r requirements.txt</code>:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"/var/www/mydir/virtualenvs/dev/bin/pip\", line 5, in &lt;module&gt;\n    from pkg_resources import load_entry_point\nImportError: No module named pkg_resources\n</code></pre>\n\n<p><code>pkg_resources</code> appears to be distributed with <code>setuptools</code>.  Initially I thought this might not be installed to the Python in the virtualenv, so I installed <code>setuptools 2.6</code> (same version as Python) to the Python site-packages in the virtualenv with the following command:</p>\n\n<pre><code>sh setuptools-0.6c11-py2.6.egg --install-dir /var/www/mydir/virtualenvs/dev/lib/python2.6/site-packages\n</code></pre>\n\n<p><strong>EDIT:</strong> This only happens inside the virtualenv.  If I open a console outside the virtualenv then <code>pkg_resources</code> is present, but I am still getting the same error.</p>\n\n<p>Any ideas as to why <code>pkg_resources</code> is not on the path?</p>\n", "link": "https://stackoverflow.com/questions/7446187/no-module-named-pkg-resources", "question_id": 7446187, "accepted_answer_id": 10538412, "answer_body": "<p><strong>July 2018 Update</strong> </p>\n\n<p>Most people should now use <code>pip install setuptools</code> (possibly with <code>sudo</code>).</p>\n\n<p>Some may need to (re)install the <code>python-setuptools</code> package via their package manager (<code>apt-get install</code>, <code>yum install</code>, etc.).</p>\n\n<p>This issue can be highly dependent on your OS and dev environment. See the legacy/other answers below if the above isn't working for you.</p>\n\n<p><strong>Explanation</strong></p>\n\n<p>This error message is caused by a missing/broken Python <code>setuptools</code> package. Per Matt M.'s comment and <a href=\"https://github.com/pypa/setuptools/issues/581\" rel=\"noreferrer\">setuptools issue #581</a>, the bootstrap script referred to below is no longer the recommended installation method.</p>\n\n<p>The bootstrap script instructions will remain below, in case it's still helpful to anyone.</p>\n\n<p><strong>Legacy Answer</strong></p>\n\n<p>I encountered the same <code>ImportError</code> today while trying to use pip. Somehow the <code>setuptools</code> package had been deleted in my Python environment.</p>\n\n<p>To fix the issue, run the setup script for <code>setuptools</code>:</p>\n\n<pre><code>wget https://bootstrap.pypa.io/ez_setup.py -O - | python\n</code></pre>\n\n<p>(or if you don't have <code>wget</code> installed (e.g. OS X), try</p>\n\n<pre><code>curl https://bootstrap.pypa.io/ez_setup.py | python\n</code></pre>\n\n<p>possibly with <code>sudo</code> prepended.)</p>\n\n<p>If you have any version of <a href=\"http://pythonhosted.org/setuptools/merge-faq.html\" rel=\"noreferrer\"><code>distribute</code></a>, or any <code>setuptools</code> below 0.6, you will have to uninstall it first.*</p>\n\n<p>See <a href=\"https://pypi.python.org/pypi/setuptools/0.9.8#installation-instructions\" rel=\"noreferrer\">Installation Instructions</a> for further details.</p>\n\n<hr>\n\n<p>* If you already have a working <code>distribute</code>, upgrading it to the \"compatibility wrapper\" that switches you over to <code>setuptools</code> is easier. But if things are already broken, don't try that.</p>\n"}, {"title": "Capturing url parameters in request.GET", "question_body": "<p>I am currently defining regular expressions in order to capture parameters in a url, as described in the tutorial. How do I access parameters from the url as part the <code>HttpRequest</code> object? My <code>HttpRequest.GET</code> currently returns an empty <code>QueryDict</code> object. </p>\n\n<p>I'd like to learn how to do this without a library so I can get to know Django better. </p>\n", "link": "https://stackoverflow.com/questions/150505/capturing-url-parameters-in-request-get", "question_id": 150505, "accepted_answer_id": 150518, "answer_body": "<p><strong>When url is like: <code>domain/search/?q=haha</code></strong>,\n Then you would use <code>request.GET.get('q', '')</code>.</p>\n\n<p><code>q</code> is the parameter you want, And <code>''</code> is the default value if <code>q</code> isn't found.</p>\n\n<p><strong>However, if you are instead just configuring your <code>URLconf</code></strong>, Then your captures from the <code>regex</code> are passed to the function as arguments (or named arguments).</p>\n\n<p>Such as:</p>\n\n<pre><code>(r'^user/(?P&lt;username&gt;\\w{0,50})/$', views.profile_page,),\n</code></pre>\n\n<p>Then in your <code>views.py</code> you would have </p>\n\n<pre><code>def profile_page(request, username):\n    # Rest of the method\n</code></pre>\n"}, {"title": "In a Django form, how do I make a field readonly (or disabled) so that it cannot be edited?", "question_body": "<p>In a Django form, how do I make a field read-only (or disabled)?</p>\n\n<p>When the form is being used to create a new entry, all fields should be enabled - but when the record is in update mode some fields need to be read-only.</p>\n\n<p>For example, when creating a new <code>Item</code> model, all fields must be editable, but while updating the record, is there a way to disable the <code>sku</code> field so that it is visible, but cannot be edited?</p>\n\n<pre><code>class Item(models.Model):\n    sku = models.CharField(max_length=50)\n    description = models.CharField(max_length=200)\n    added_by = models.ForeignKey(User)\n\n\nclass ItemForm(ModelForm):\n    class Meta:\n        model = Item\n        exclude = ('added_by')\n\ndef new_item_view(request):\n    if request.method == 'POST':\n        form = ItemForm(request.POST)\n        # Validate and save\n    else:\n            form = ItemForm()\n    # Render the view\n</code></pre>\n\n<p>Can class <code>ItemForm</code> be reused? What changes would be required in the <code>ItemForm</code> or <code>Item</code> model class? Would I need to write another class, \"<code>ItemUpdateForm</code>\", for updating the item?</p>\n\n<pre><code>def update_item_view(request):\n    if request.method == 'POST':\n        form = ItemUpdateForm(request.POST)\n        # Validate and save\n    else:\n        form = ItemUpdateForm()\n</code></pre>\n", "link": "https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot", "question_id": 324477, "accepted_answer_id": 325038, "answer_body": "<p>As pointed out in <a href=\"https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot/34538169#34538169\">this answer</a>, Django 1.9 added the <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#disabled\" rel=\"noreferrer\">Field.disabled</a> attribute:</p>\n\n<blockquote>\n  <p>The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won\u2019t be editable by users. Even if a user tampers with the field\u2019s value submitted to the server, it will be ignored in favor of the value from the form\u2019s initial data.</p>\n</blockquote>\n\n<p>With Django 1.8 and earlier, to disable entry on the widget and prevent malicious POST hacks you must scrub the input in addition to setting the <code>readonly</code> attribute on the form field:</p>\n\n<pre><code>class ItemForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.pk:\n            self.fields['sku'].widget.attrs['readonly'] = True\n\n    def clean_sku(self):\n        instance = getattr(self, 'instance', None)\n      \u00a0 if instance and instance.pk:\n        \u00a0 \u00a0 return instance.sku\n      \u00a0 else:\n        \u00a0 \u00a0 return self.cleaned_data['sku']\n</code></pre>\n\n<p>Or, replace <code>if instance and instance.pk</code> with another condition indicating you're editing.  You could also set the attribute <code>disabled</code> on the input field, instead of <code>readonly</code>.</p>\n\n<p>The <code>clean_sku</code> function will ensure that the <code>readonly</code> value won't be overridden by a <code>POST</code>.</p>\n\n<p>Otherwise, there is no built-in Django form field which will render a value while rejecting bound input data.  If this is what you desire, you should instead create a separate <code>ModelForm</code> that excludes the uneditable field(s), and just print them inside your template.</p>\n"}, {"title": "How can I upgrade specific packages using pip and a requirements file?", "question_body": "<p>I'm using pip with a requirements file, in a virtualenv, for my Django projects.  I'm trying to upgrade some packages, notably Django itself, and I'm getting an error about source code conflicts:</p>\n\n<pre><code>Source in `&lt;virtualenv`&gt;/build/Django has version 1.2.3 that conflicts with Django==1.2.4 (from -r requirements/apps.txt (line 3))\n</code></pre>\n\n<p>That's after updating the version number of Django from 1.2.3 to 1.2.4 in my requirements file.  I'm using this command to actually do the upgrade:</p>\n\n<pre><code>pip --install --upgrade -E `&lt;virtualenv dir`&gt; --requirement `&lt;requirements file`&gt;\n</code></pre>\n\n<p>I can't find any flag that triggers a total package re-download.  I even tried running an uninstall command first, then the install but no dice.  Maybe I'm missing something?</p>\n", "link": "https://stackoverflow.com/questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "question_id": 4536103, "accepted_answer_id": 4583509, "answer_body": "<p>I'm not sure if it's exactly your problem, but in my case, I wasn't able to upgrade Django to 1.2.4 - I was always finishing with 1.2.3 version, so I uninstalled Django with:</p>\n\n<pre><code>&lt;virtualenv&gt;/bin/pip uninstall Django\n</code></pre>\n\n<p>Then I removed <code>&lt;virtualenv&gt;/build/Django</code> directory and finally I installed the proper version with:</p>\n\n<pre><code>&lt;virtualenv&gt;/bin/pip install Django\n</code></pre>\n\n<p>Hope this will help.</p>\n"}, {"title": "How to reset Django admin password?", "question_body": "<p>I am using Django (version 1.3) and have forgotten both admin username and password. How to reset both?</p>\n\n<p>And is it possible to make a normal user into admin, and then remove admin status?</p>\n", "link": "https://stackoverflow.com/questions/6358030/how-to-reset-django-admin-password", "question_id": 6358030, "accepted_answer_id": 6358121, "answer_body": "<pre><code>python manage.py changepassword &lt;user_name&gt;\n</code></pre>\n\n<p><a href=\"https://docs.djangoproject.com/en/stable/topics/auth/default/#changing-passwords\" rel=\"noreferrer\">see docs</a> </p>\n"}, {"title": "django revert last migration", "question_body": "<p>I've made a migration that added a new table and want to revert it and delete the migration, without creating a new migration.</p>\n\n<p>How do I do it? Is there a command to revert last migration and then I can simply delete the migration file?</p>\n", "link": "https://stackoverflow.com/questions/32123477/django-revert-last-migration", "question_id": 32123477, "accepted_answer_id": null}, {"title": "No module named MySQLdb", "question_body": "<p>I am using Python version 2.5.4 and install MySQL version 5.0 and Django. Django is working fine with Python, but not MySQL. I am using it in Windows Vista.</p>\n", "link": "https://stackoverflow.com/questions/454854/no-module-named-mysqldb", "question_id": 454854, "accepted_answer_id": null}, {"title": "Can I access constants in settings.py from templates in Django?", "question_body": "<p>I have some stuff in settings.py that I'd like to be able to access from a template, but I can't figure out how to do it. I already tried</p>\n\n<pre><code>{{CONSTANT_NAME}}\n</code></pre>\n\n<p>but that doesn't seem to work. Is this possible?</p>\n", "link": "https://stackoverflow.com/questions/433162/can-i-access-constants-in-settings-py-from-templates-in-django", "question_id": 433162, "accepted_answer_id": 433255, "answer_body": "<p>Django provides access to certain, frequently-used settings constants to the template such as <code>settings.MEDIA_URL</code> and some of the language settings if you use django's built in generic views or pass in a context instance keyword argument in the <code>render_to_response</code> shortcut function.  Here's an example of each case:</p>\n\n<pre><code>from django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom django.views.generic.simple import direct_to_template\n\ndef my_generic_view(request, template='my_template.html'):\n    return direct_to_template(request, template)\n\ndef more_custom_view(request, template='my_template.html'):\n    return render_to_response(template, {}, context_instance=RequestContext(request))\n</code></pre>\n\n<p>These views will both have several frequently used settings like <code>settings.MEDIA_URL</code> available to the template as <code>{{ MEDIA_URL }}</code>, etc.</p>\n\n<p>If you're looking for access to other constants in the settings, then simply unpack the constants you want and add them to the context dictionary you're using in your view function, like so:</p>\n\n<pre><code>from django.conf import settings\nfrom django.shortcuts import render_to_response\n\ndef my_view_function(request, template='my_template.html'):\n    context = {'favorite_color': settings.FAVORITE_COLOR}\n    return render_to_response(template, context)\n</code></pre>\n\n<p>Now you can access <code>settings.FAVORITE_COLOR</code> on your template as <code>{{ favorite_color }}</code>.  </p>\n"}, {"title": "How can I get the full/absolute URL (with domain) in Django?", "question_body": "<p>How can I get the full/absolute URL (e.g. <code>https://example.com/some/path</code>) in Django <a href=\"https://stackoverflow.com/questions/892997/how-do-i-get-the-server-name-in-django-for-a-complete-url\">without the Sites module</a>? That's just silly... I shouldn't need to query my DB to snag the URL!</p>\n\n<p>I want to use it with <code>reverse()</code>.</p>\n", "link": "https://stackoverflow.com/questions/2345708/how-can-i-get-the-full-absolute-url-with-domain-in-django", "question_id": 2345708, "accepted_answer_id": 2345954, "answer_body": "<p>Use handy <a href=\"http://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.build_absolute_uri\" rel=\"noreferrer\">request.build_absolute_uri()</a> method on request, pass it the relative url and it'll give you full one.</p>\n\n<p>By default, the absolute URL for <code>request.get_full_path()</code> is returned, but you can pass it a relative URL as the first argument to convert it to an absolute URL.</p>\n"}, {"title": "What&#39;s the difference between django OneToOneField and ForeignKey?", "question_body": "<p>What's the difference between django OneToOneField and ForeignKey?</p>\n", "link": "https://stackoverflow.com/questions/5870537/whats-the-difference-between-django-onetoonefield-and-foreignkey", "question_id": 5870537, "accepted_answer_id": 5891861, "answer_body": "<p>Be careful to realize that there are some differences between <code>OneToOneField(SomeModel)</code> and <code>ForeignKey(SomeModel, unique=True)</code>. As stated in <a href=\"http://djangobook.com/model-definition-reference/#leanpub-auto-onetoonefield\" rel=\"noreferrer\"><em>The Definitive Guide to Django</em></a>:</p>\n\n<blockquote>\n  <p><strong>OneToOneField</strong></p>\n  \n  <p>A one-to-one relationship. Conceptually, this is similar to a <code>ForeignKey</code> with <code>unique=True</code>, but the \"reverse\" side of the relation will directly return a single object.</p>\n</blockquote>\n\n<p>In contrast to the <code>OneToOneField</code> \"reverse\" relation, a <code>ForeignKey</code> \"reverse\" relation returns a <code>QuerySet</code>.</p>\n\n<h2>Example</h2>\n\n<p>For example, if we have the following two models (full model code below):</p>\n\n<ol>\n<li><code>Car</code> model uses <code>OneToOneField(Engine)</code></li>\n<li><code>Car2</code> model uses <code>ForeignKey(Engine2, unique=True)</code></li>\n</ol>\n\n<p>From within <code>python manage.py shell</code> execute the following:</p>\n\n<h3><code>OneToOneField</code> Example</h3>\n\n<pre><code>&gt;&gt;&gt; from testapp.models import Car, Engine\n&gt;&gt;&gt; c = Car.objects.get(name='Audi')\n&gt;&gt;&gt; e = Engine.objects.get(name='Diesel')\n&gt;&gt;&gt; e.car\n&lt;Car: Audi&gt;\n</code></pre>\n\n<h3><code>ForeignKey</code> with <code>unique=True</code> Example</h3>\n\n<pre><code>&gt;&gt;&gt; from testapp.models import Car2, Engine2\n&gt;&gt;&gt; c2 = Car2.objects.get(name='Mazda')\n&gt;&gt;&gt; e2 = Engine2.objects.get(name='Wankel')\n&gt;&gt;&gt; e2.car2_set.all()\n[&lt;Car2: Mazda&gt;]\n</code></pre>\n\n<h2>Model Code</h2>\n\n<pre><code>from django.db import models\n\nclass Engine(models.Model):\n    name = models.CharField(max_length=25)\n\n    def __unicode__(self):\n        return self.name\n\nclass Car(models.Model):\n    name = models.CharField(max_length=25)\n    engine = models.OneToOneField(Engine)\n\n    def __unicode__(self):\n        return self.name\n\nclass Engine2(models.Model):\n    name = models.CharField(max_length=25)\n\n    def __unicode__(self):\n        return self.name\n\nclass Car2(models.Model):\n    name = models.CharField(max_length=25)\n    engine = models.ForeignKey(Engine2, unique=True, on_delete=models.CASCADE)\n\n    def __unicode__(self):\n        return self.name\n</code></pre>\n"}, {"title": "How to define two fields &quot;unique&quot; as couple", "question_body": "<p>Is there a way to define a couple of fields as unique in Django?</p>\n\n<p>I have a table of volumes (of journals) and I don't want more then one volume number for the same journal.</p>\n\n<pre><code>class Volume(models.Model):\n    id = models.AutoField(primary_key=True)\n    journal_id = models.ForeignKey(Journals, db_column='jid', null=True, verbose_name = \"Journal\")\n    volume_number = models.CharField('Volume Number', max_length=100)\n    comments = models.TextField('Comments', max_length=4000, blank=True)\n</code></pre>\n\n<p>I tried to put <code>unique = True</code> as attribute in the fields <code>journal_id</code> and <code>volume_number</code> but it doesn't work.</p>\n", "link": "https://stackoverflow.com/questions/2201598/how-to-define-two-fields-unique-as-couple", "question_id": 2201598, "accepted_answer_id": 2201687, "answer_body": "<p>There is a simple solution for you called <a href=\"https://docs.djangoproject.com/en/dev/ref/models/options/#unique-together\" rel=\"noreferrer\">unique_together</a> which does exactly what you want.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>class MyModel(models.Model):\n  field1 = models.CharField(max_length=50)\n  field2 = models.CharField(max_length=50)\n\n  class Meta:\n    unique_together = ('field1', 'field2',)\n</code></pre>\n\n<p><strong>And in your case:</strong></p>\n\n<pre><code>class Volume(models.Model):\n  id = models.AutoField(primary_key=True)\n  journal_id = models.ForeignKey(Journals, db_column='jid', null=True, verbose_name = \"Journal\")\n  volume_number = models.CharField('Volume Number', max_length=100)\n  comments = models.TextField('Comments', max_length=4000, blank=True)\n\n  class Meta:\n    unique_together = ('journal_id', 'volume_number',)\n</code></pre>\n"}, {"title": "Where can I find the error logs of nginx, using fastcgi and django", "question_body": "<p>I'm using django with fastcgi + nginx. I want to know where the logs (error) are stored in this case</p>\n", "link": "https://stackoverflow.com/questions/1706111/where-can-i-find-the-error-logs-of-nginx-using-fastcgi-and-django", "question_id": 1706111, "accepted_answer_id": 1707300, "answer_body": "<p>errors are stored in nginx log file. you can specify it in root of nginx config file.</p>\n\n<pre><code>error_log  /var/log/nginx/nginx_error.log  warn;\n</code></pre>\n"}, {"title": "What is `related_name` used for in Django?", "question_body": "<p>What is the <code>related_name</code> argument useful for on <code>ManyToManyField</code> and <code>ForeignKey</code> fields? For example, given the following code, what is the effect of <code>related_name='maps'</code>?</p>\n\n<pre><code>class Map(db.Model):\n    members = models.ManyToManyField(User, related_name='maps',\n                                     verbose_name=_('members'))\n</code></pre>\n", "link": "https://stackoverflow.com/questions/2642613/what-is-related-name-used-for-in-django", "question_id": 2642613, "accepted_answer_id": 2642645, "answer_body": "<p>The <code>related_name</code> attribute specifies the name of the reverse relation from the <code>User</code> model back to your model.</p>\n\n<p>If you don't specify a <code>related_name</code>, Django automatically creates one using the name of your model with the suffix <code>_set</code>, for instance <code>User.map_set.all()</code>. </p>\n\n<p>If you <em>do</em> specify, e.g. <code>related_name=maps</code> on the <code>User</code> model, <code>User.map_set</code> will still work, but the <code>User.maps.</code> syntax is obviously a bit cleaner and less clunky; so for example, if you had a user object <code>current_user</code>, you could use <code>current_user.maps.all()</code> to get all instances of your <code>Map</code> model that have a relation to <code>current_user</code>. </p>\n\n<p>The <a href=\"http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects\" rel=\"noreferrer\">Django documentation</a> has more details.</p>\n"}, {"title": "Why does DEBUG=False setting make my django Static Files Access fail?", "question_body": "<p>Am building an app using Django as my workhorse. All has been well so far - specified db settings, configured static directories, urls, views etc. But trouble started sneaking in the moment I wanted to render my own beautiful and custom 404.html and 500.html pages.</p>\n\n<p>I read the docs on custom error handling, and set necessary configurations in UrlsConf, created corresponding views and added the 404.html and the 500.html to my app's template directory (specified in the settings.py too).</p>\n\n<p>But the docs say <code>you can actually view custom error views until Debug is Off</code>, so I did turn it off to test my stuff, and that's when stuff goes berserk!</p>\n\n<p>Not only do I fail to view the custom 404.html (actually, it loads, but because my error pages each contain a graphic error message -as some nice image), the source of the error page loads, but nothing else loads! Not even linked CSS or Javascript!</p>\n\n<p>Generally, once I set <code>DEBUG = False</code>, all views will load, but any linked content (CSS, Javascript, Images, etc) wont load! What's happening? Is there something am missing, concerning static files and the <code>DEBUG</code> setting?</p>\n", "link": "https://stackoverflow.com/questions/5836674/why-does-debug-false-setting-make-my-django-static-files-access-fail", "question_id": 5836674, "accepted_answer_id": 5836728, "answer_body": "<p>With debug turned off Django won't handle static files for you any more - your production web server (Apache or something) should take care of that.</p>\n"}, {"title": "Favorite Django Tips &amp; Features?", "question_body": "<p>Inspired by the question series 'Hidden features of ...', I am curious to hear about your favorite Django tips or lesser known but useful features you know of.</p>\n\n<ul>\n<li>Please, include only one tip per answer.</li>\n<li>Add Django version requirements if there are any.</li>\n</ul>\n", "link": "https://stackoverflow.com/questions/550632/favorite-django-tips-features", "question_id": 550632, "accepted_answer_id": null}]