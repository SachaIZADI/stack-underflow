[{"title": "Get the data received in a Flask request", "question_body": "<p>I want to be able to get the data sent to my Flask app.  I've tried accessing <code>request.data</code> but it is an empty string. How do you access request data?</p>\n\n<pre><code>@app.route('/', methods=['GET', 'POST'])\ndef parse_request():\n    data = request.data  # data is empty\n    # need posted data here\n</code></pre>\n\n<hr>\n\n<p>The answer to this question led me to ask <a href=\"https://stackoverflow.com/q/10999990\">Get raw POST body in Python Flask regardless of Content-Type header</a> next, which is about getting the raw data rather than the parsed data.</p>\n", "link": "https://stackoverflow.com/questions/10434599/get-the-data-received-in-a-flask-request", "question_id": 10434599, "accepted_answer_id": 16664376, "answer_body": "<p>The <a href=\"https://flask.palletsprojects.com/api/#flask.Request\" rel=\"noreferrer\">docs</a> describe the attributes available on the request.  In most common cases <code>request.data</code> will be empty because it's used as a fallback:</p>\n\n<blockquote>\n  <p><code>request.data</code> Contains the incoming request data as string in case it came with a mimetype Flask does not handle.</p>\n</blockquote>\n\n<ul>\n<li><a href=\"https://flask.palletsprojects.com/api/#flask.Request.args\" rel=\"noreferrer\"><code>request.args</code></a>: the key/value pairs in the URL query string</li>\n<li><a href=\"https://flask.palletsprojects.com/api/#flask.Request.form\" rel=\"noreferrer\"><code>request.form</code></a>: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded</li>\n<li><a href=\"https://flask.palletsprojects.com/api/#flask.Request.files\" rel=\"noreferrer\"><code>request.files</code></a>: the files in the body, which Flask keeps separate from <code>form</code>. HTML forms must use <code>enctype=multipart/form-data</code> or files will not be uploaded.</li>\n<li><a href=\"https://flask.palletsprojects.com/api/#flask.Request.values\" rel=\"noreferrer\"><code>request.values</code></a>: combined <code>args</code> and <code>form</code>, preferring <code>args</code> if keys overlap</li>\n<li><a href=\"https://flask.palletsprojects.com/api/#flask.Request.json\" rel=\"noreferrer\"><code>request.json</code></a>: parsed JSON data. The request must have the <code>application/json</code> content type, or use <a href=\"https://flask.palletsprojects.com/api/#flask.Request.get_json\" rel=\"noreferrer\"><code>request.get_json(force=True)</code></a> to ignore the content type.</li>\n</ul>\n\n<p>All of these are <a href=\"https://werkzeug.palletsprojects.com/datastructures/#werkzeug.datastructures.MultiDict\" rel=\"noreferrer\"><code>MultiDict</code></a> instances (except for <code>json</code>). You can access values using:</p>\n\n<ul>\n<li><code>request.form['name']</code>: use indexing if you know the key exists</li>\n<li><code>request.form.get('name')</code>: use <code>get</code> if the key might not exist</li>\n<li><code>request.form.getlist('name')</code>: use <code>getlist</code> if the key is sent multiple times and you want a list of values. <code>get</code> only returns the first value.</li>\n</ul>\n"}, {"title": "How to serve static files in Flask", "question_body": "<p>So this is embarrassing. I've got an application that I threw together in <code>Flask</code> and for now it is just serving up a single static HTML page with some links to CSS and JS. And I can't find where in the documentation <code>Flask</code> describes returning static files. Yes, I could use <code>render_template</code> but I know the data is not templatized. I'd have thought <code>send_file</code> or <code>url_for</code> was the right thing, but I could not get those to work. In the meantime, I am opening the files, reading content, and rigging up a <code>Response</code> with appropriate mimetype:</p>\n\n<pre><code>import os.path\n\nfrom flask import Flask, Response\n\n\napp = Flask(__name__)\napp.config.from_object(__name__)\n\n\ndef root_dir():  # pragma: no cover\n    return os.path.abspath(os.path.dirname(__file__))\n\n\ndef get_file(filename):  # pragma: no cover\n    try:\n        src = os.path.join(root_dir(), filename)\n        # Figure out how flask returns static files\n        # Tried:\n        # - render_template\n        # - send_file\n        # This should not be so non-obvious\n        return open(src).read()\n    except IOError as exc:\n        return str(exc)\n\n\n@app.route('/', methods=['GET'])\ndef metrics():  # pragma: no cover\n    content = get_file('jenkins_analytics.html')\n    return Response(content, mimetype=\"text/html\")\n\n\n@app.route('/', defaults={'path': ''})\n@app.route('/&lt;path:path&gt;')\ndef get_resource(path):  # pragma: no cover\n    mimetypes = {\n        \".css\": \"text/css\",\n        \".html\": \"text/html\",\n        \".js\": \"application/javascript\",\n    }\n    complete_path = os.path.join(root_dir(), path)\n    ext = os.path.splitext(path)[1]\n    mimetype = mimetypes.get(ext, \"text/html\")\n    content = get_file(complete_path)\n    return Response(content, mimetype=mimetype)\n\n\nif __name__ == '__main__':  # pragma: no cover\n    app.run(port=80)\n</code></pre>\n\n<p>Someone want to give a code sample or url for this? I know this is going to be dead simple.</p>\n", "link": "https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask", "question_id": 20646822, "accepted_answer_id": 20648053, "answer_body": "<p>The preferred method is to use nginx or another web server to serve static files; they'll be able to do it more efficiently than Flask.</p>\n\n<p>However, you can use <a href=\"http://flask.pocoo.org/docs/latest/api/#flask.send_from_directory\" rel=\"noreferrer\"><code>send_from_directory</code></a> to send files from a directory, which can be pretty convenient in some situations:</p>\n\n<pre><code>from flask import Flask, request, send_from_directory\n\n# set the project root directory as the static folder, you can set others.\napp = Flask(__name__, static_url_path='')\n\n@app.route('/js/&lt;path:path&gt;')\ndef send_js(path):\n    return send_from_directory('js', path)\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>\n\n<p>Do <strong>not</strong> use <code>send_file</code> or <code>send_static_file</code> with a user-supplied path.</p>\n\n<p><code>send_static_file</code> example:</p>\n\n<pre><code>from flask import Flask, request\n# set the project root directory as the static folder, you can set others.\napp = Flask(__name__, static_url_path='')\n\n@app.route('/')\ndef root():\n    return app.send_static_file('index.html')\n</code></pre>\n"}, {"title": "Return JSON response from Flask view", "question_body": "<p>I have a function that analyzes a CSV file with Pandas and produces a dict with summary information. I want to return the results as a response from a Flask view. How do I return a JSON response?</p>\n\n<pre><code>@app.route(\"/summary\")\ndef summary():\n    d = make_summary()\n    # send it back as json\n</code></pre>\n", "link": "https://stackoverflow.com/questions/13081532/return-json-response-from-flask-view", "question_id": 13081532, "accepted_answer_id": 13089975, "answer_body": "<p>Pass the summary data to the <a href=\"http://flask.pocoo.org/docs/latest/api/#flask.json.jsonify\" rel=\"noreferrer\"><code>jsonify</code></a> function, which returns a JSON response.</p>\n\n<pre><code>from flask import jsonify\n\n@app.route('/summary')\ndef summary():\n    d = make_summary()\n    return jsonify(d)\n</code></pre>\n\n<p>As of Flask 0.11, you can pass any JSON-serializable type, not just dict, as the top level object.</p>\n"}, {"title": "Configure Flask dev server to be visible across the network", "question_body": "<p>I'm not sure if this is Flask specific, but when I run an app in dev mode (<code>http://localhost:5000</code>), I cannot access it from other machines on the network (with <code>http://[dev-host-ip]:5000</code>). With Rails in dev mode, for example, it works fine. I couldn't find any docs regarding the Flask dev server configuration. Any idea what should be configured to enable this?</p>\n", "link": "https://stackoverflow.com/questions/7023052/configure-flask-dev-server-to-be-visible-across-the-network", "question_id": 7023052, "accepted_answer_id": 7027113, "answer_body": "<p>While this is possible, you should not use the Flask dev server in production. The Flask dev server is not designed to be particularly secure, stable, or efficient. See the docs on <a href=\"http://flask.pocoo.org/docs/dev/deploying/\" rel=\"noreferrer\">deploying</a> for correct solutions.</p>\n\n<hr>\n\n<p>Add a parameter to your <code>app.run()</code>.  By default it runs on localhost, change it to <code>app.run(host= '0.0.0.0')</code> to run on your machines IP address.</p>\n\n<p>Documented on the Flask site under \"Externally Visible Server\" on the <a href=\"http://flask.pocoo.org/docs/quickstart/#a-minimal-application\" rel=\"noreferrer\">Quickstart page</a>:</p>\n\n<blockquote>\n  <p>Externally Visible Server</p>\n  \n  <p>If you run the server you will notice that the server is only\n  available from your own computer, not from any other in the network.\n  This is the default because in debugging mode a user of the\n  application can execute arbitrary Python code on your computer. If you\n  have debug disabled or trust the users on your network, you can make\n  the server publicly available.</p>\n  \n  <p>Just change the call of the <code>run()</code> method to look like this:</p>\n  \n  <p><code>app.run(host='0.0.0.0')</code></p>\n  \n  <p>This tells your operating system to listen on a public IP.</p>\n</blockquote>\n"}, {"title": "How do you get a query string on Flask?", "question_body": "<p>Not obvious from the flask documention on how to get the query string. I am new, looked at the docs, could not find!   </p>\n\n<p>So</p>\n\n<pre><code>@app.route('/')\n@app.route('/data')\ndef data():\n    query_string=??????\n    return render_template(\"data.html\")\n</code></pre>\n", "link": "https://stackoverflow.com/questions/11774265/how-do-you-get-a-query-string-on-flask", "question_id": 11774265, "accepted_answer_id": 11774434, "answer_body": "<pre><code>from flask import request\n\n@app.route('/data')\ndef data():\n    # here we want to get the value of user (i.e. ?user=some-value)\n    user = request.args.get('user')\n</code></pre>\n"}, {"title": "How can I get the named parameters from a URL using Flask?", "question_body": "<p>When the user accesses this URL running on my flask app, I want the web service to be able to handle the parameters specified after the question mark:</p>\n\n<pre><code>http://10.1.1.1:5000/login?username=alex&amp;password=pw1\n\n#I just want to be able to manipulate the parameters\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    username = request.form['username']\n    print(username)\n    password = request.form['password']\n    print(password)\n</code></pre>\n", "link": "https://stackoverflow.com/questions/24892035/how-can-i-get-the-named-parameters-from-a-url-using-flask", "question_id": 24892035, "accepted_answer_id": 24892131, "answer_body": "<p>Use <a href=\"http://flask.pocoo.org/docs/api/#flask.Request.args\" rel=\"noreferrer\"><code>request.args</code></a> to get parsed contents of query string:</p>\n\n<pre><code>from flask import request\n\n@app.route(...)\ndef login():\n    username = request.args.get('username')\n    password = request.args.get('password')\n</code></pre>\n"}, {"title": "How to get POSTed JSON in Flask?", "question_body": "<p>I'm trying to build a simple API using Flask, in which I now want to read some POSTed JSON. I do the POST with the Postman Chrome extension, and the JSON I POST is simply <code>{\"text\":\"lalala\"}</code>. I try to read the JSON using the following method:</p>\n\n<pre><code>@app.route('/api/add_message/&lt;uuid&gt;', methods=['GET', 'POST'])\ndef add_message(uuid):\n    content = request.json\n    print content\n    return uuid\n</code></pre>\n\n<p>On the browser it correctly returns the UUID I put in the GET, but on the console, it just prints out <code>None</code> (where I expect it to print out the <code>{\"text\":\"lalala\"}</code>. Does anybody know how I can get the posted JSON from within the Flask method? </p>\n", "link": "https://stackoverflow.com/questions/20001229/how-to-get-posted-json-in-flask", "question_id": 20001229, "accepted_answer_id": 20001283, "answer_body": "<p>First of all, the <code>.json</code> attribute is a property that delegates to the <a href=\"https://flask.palletsprojects.com/api/#flask.Request.get_json\" rel=\"nofollow noreferrer\"><code>request.get_json()</code> method</a>, which documents why you see <code>None</code> here. </p>\n\n<p>You need to set the request content type to <code>application/json</code> for the <code>.json</code> property and <code>.get_json()</code> method (with no arguments) to work as either will produce <code>None</code> otherwise. See the <a href=\"https://flask.palletsprojects.com/api/#flask.Request.json\" rel=\"nofollow noreferrer\">Flask <code>Request</code> documentation</a>:</p>\n\n<blockquote>\n  <p>This will contain the parsed JSON data if the mimetype indicates JSON (<em>application/json</em>, see <a href=\"https://flask.palletsprojects.com/api/#flask.Request.is_json\" rel=\"nofollow noreferrer\"><code>is_json()</code></a>), otherwise it will be <code>None</code>.</p>\n</blockquote>\n\n<p>You can tell <code>request.get_json()</code> to skip the content type requirement by passing it the <code>force=True</code> keyword argument.</p>\n\n<p>Note that if an <em>exception</em> is raised at this point (possibly resulting in a 400 Bad Request response), your JSON <em>data</em> is invalid. It is in some way malformed; you may want to check it with a JSON validator.</p>\n"}, {"title": "How to use cURL to send Cookies?", "question_body": "<p>I read that <a href=\"https://stackoverflow.com/questions/7181785/send-cookies-with-curl\">Send cookies with curl</a> works, but not for me</p>\n\n<p>I have a <code>REST</code> endpoint as </p>\n\n<pre><code>class LoginResource(restful.Resource):\n    def get(self):\n        print(session)\n        if 'USER_TOKEN' in session:\n            return 'OK'\n        return 'not authorized', 401\n</code></pre>\n\n<p>when I try to access as </p>\n\n<pre><code>curl -v -b ~/Downloads/cookies.txt -c ~/Downloads/cookies.txt http://127.0.0.1:5000/\n* About to connect() to 127.0.0.1 port 5000 (#0)\n*   Trying 127.0.0.1...\n* connected\n* Connected to 127.0.0.1 (127.0.0.1) port 5000 (#0)\n&gt; GET / HTTP/1.1\n&gt; User-Agent: curl/7.27.0\n&gt; Host: 127.0.0.1:5000\n&gt; Accept: */*\n&gt;\n* HTTP 1.0, assume close after body\n&lt; HTTP/1.0 401 UNAUTHORIZED\n&lt; Content-Type: application/json\n&lt; Content-Length: 16\n&lt; Server: Werkzeug/0.8.3 Python/2.7.2\n&lt; Date: Sun, 14 Apr 2013 04:45:45 GMT\n&lt;\n* Closing connection #0\n\"not authorized\"%\n</code></pre>\n\n<p>where my <code>~/Downloads/cookies.txt</code> is</p>\n\n<pre><code>cat ~/Downloads/cookies.txt\nUSER_TOKEN=in\n</code></pre>\n\n<p>and the server receives nothing</p>\n\n<pre><code>127.0.0.1 - - [13/Apr/2013 21:43:52] \"GET / HTTP/1.1\" 401 -\n127.0.0.1 - - [13/Apr/2013 21:45:30] \"GET / HTTP/1.1\" 401 -\n&lt;SecureCookieSession {}&gt;\n&lt;SecureCookieSession {}&gt;\n127.0.0.1 - - [13/Apr/2013 21:45:45] \"GET / HTTP/1.1\" 401 -\n</code></pre>\n\n<p>what is that I am missing?</p>\n", "link": "https://stackoverflow.com/questions/15995919/how-to-use-curl-to-send-cookies", "question_id": 15995919, "accepted_answer_id": 15996114, "answer_body": "<p>This worked for me</p>\n\n<pre><code> curl -v --cookie \"USER_TOKEN=Yes\" http://127.0.0.1:5000/\n</code></pre>\n\n<p>I could see the value in backend using</p>\n\n<pre><code>print request.cookies\n</code></pre>\n"}, {"title": "json.dumps vs flask.jsonify", "question_body": "<p>I am not sure I understand the purpose of the <code>flask.jsonify</code> method. I try to make a JSON string from this:</p>\n\n<pre><code>data = {\"id\": str(album.id), \"title\": album.title}\n</code></pre>\n\n<p>but what I get with <code>json.dumps</code> differs from what I get with <code>flask.jsonify</code>.</p>\n\n<pre><code>json.dumps(data): [{\"id\": \"4ea856fd6506ae0db42702dd\", \"title\": \"Business\"}]\nflask.jsonify(data): {\"id\":\u2026, \"title\":\u2026}\n</code></pre>\n\n<p>Obviously I need to get a result that looks more like what <code>json.dumps</code> returns. What am I doing wrong?</p>\n", "link": "https://stackoverflow.com/questions/7907596/json-dumps-vs-flask-jsonify", "question_id": 7907596, "accepted_answer_id": 13172658, "answer_body": "<p>The <code>jsonify()</code> function in flask returns a <code>flask.Response()</code> object that already has the appropriate content-type header 'application/json' for use with json responses. Whereas, the <code>json.dumps()</code> method will just return an encoded string, which would require manually adding the MIME type header.</p>\n\n<p>See more about the <code>jsonify()</code> function <a href=\"http://flask.pocoo.org/docs/api/#flask.json.jsonify\" rel=\"noreferrer\">here</a> for full reference.</p>\n\n<p>Edit:\nAlso, I've noticed that <code>jsonify()</code> handles kwargs or dictionaries, while <code>json.dumps()</code> additionally supports lists and others.</p>\n"}, {"title": "Typical AngularJS workflow and project structure (with Python Flask)", "question_body": "<p>I am pretty new to this whole MV* client-side framework frenzy. It doesn't have to be AngularJS, but I picked it because it feels more natural to me than either Knockout, Ember or Backbone. Anyway what is the workflow like? Do people start with developing a client-side application in AngularJS and then hooking up the back-end to it?</p>\n\n<p>Or the other way around by first building the back-end in Django, Flask, Rails and then attaching an AngularJS app to it? Is there a \"right\" way of doing it, or is it just a personal preference in the end?</p>\n\n<p>I am also not sure whether to structure my project according to the Flask or AngularJS? community practices.</p>\n\n<p>For example, Flask's minitwit app is structured like so:</p>\n\n<pre><code>minitwit\n|-- minitwit.py\n|-- static\n   |-- css, js, images, etc...\n`-- templates\n   |-- html files and base layout\n</code></pre>\n\n<p>AngularJS tutorial app is structured like this:</p>\n\n<pre><code>angular-phonecat\n|-- app\n    `-- css\n    `-- img\n    `-- js\n    `-- lib\n    `-- partials\n    `-- index.html\n|-- scripts\n `-- node.js server and test server files\n</code></pre>\n\n<p>I could picture a Flask app by itself, and it's fairly easy to see AngularJS app like ToDo List by itself but when it comes to using both of these technologies I don't understand how they work together. It almost seems like I don't need a server-side web-framework when you already have AngularJS, a simple Python web server will suffice. In the AngularJS to-do app for example they use MongoLab to talk to the database using Restful API. There was no need having a web framework on the back-end.</p>\n\n<p>Maybe I am just awfully confused, and AngularJS is nothing more than a fancy jQuery library so I should use just like I would use jQuery in my Flask projects (assuming I change the AngularJS template syntax to something that doesn't conflict with Jinja2). I hope my questions make some sense. I mainly work on the back-end and this client-side framework is an unknown territory for me.</p>\n", "link": "https://stackoverflow.com/questions/11522151/typical-angularjs-workflow-and-project-structure-with-python-flask", "question_id": 11522151, "accepted_answer_id": 15144980, "answer_body": "<p>I would start out by organizing the Flask app in the standard structure as follows:</p>\n\n<pre><code>app\n|-- app.py\n|-- static\n    |-- css\n    |-- img\n    |-- js\n|-- templates\n</code></pre>\n\n<p>And as btford mentioned, if you are doing an Angular app, you'll want to focus on using Angular client-side templates and stay away from server-side templates. Using render_template('index.html') will cause Flask to interpret your angular templates as jinja templates, so they won't render correctly. Instead, you'll want to do the following:</p>\n\n<pre><code>@app.route(\"/\")\ndef index():\n    return send_file('templates/index.html')\n</code></pre>\n\n<p>Note that using send_file() means that the files will be cached, so you might want to use make_response() instead, at least for development:</p>\n\n<pre><code>    return make_response(open('templates/index.html').read())\n</code></pre>\n\n<p>Afterwards, build out the AngularJS part of your app, modifying the app structure so that it looks like this:</p>\n\n<pre><code>app\n|-- app.py\n|-- static\n    |-- css\n    |-- img\n    |-- js\n        |-- app.js, controllers.js, etc.\n    |-- lib\n        |-- angular\n            |-- angular.js, etc.\n    |-- partials\n|-- templates\n    |-- index.html\n</code></pre>\n\n<p>Make sure your index.html includes AngularJS, as well as any other files:</p>\n\n<pre><code>&lt;script src=\"static/lib/angular/angular.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>At this point, you haven't yet constructed your RESTful API, so you can have your js controllers return predefined sample data (only a temporary setup). When you're ready, implement the RESTful API and hook it up to your angular app with angular-resource.js.</p>\n\n<p>EDIT: I put together an app template that, though a little more complex that what I've described above, illustrates how one could build an app with AngularJS + Flask, complete with communication between AngularJS and a simple Flask API. Here it is if you want to check it out: <a href=\"https://github.com/rxl/angular-flask\">https://github.com/rxl/angular-flask</a></p>\n"}, {"title": "Can Flask have optional URL parameters?", "question_body": "<p>Is it possible to directly declare a flask URL optional parameter?</p>\n\n<p>Currently I'm proceeding the following way:</p>\n\n<pre><code>@user.route('/&lt;userId&gt;')\n@user.route('/&lt;userId&gt;/&lt;username&gt;')\ndef show(userId, username=None):\n    pass\n</code></pre>\n\n<p>How can I directly say that <code>username</code> is optional?</p>\n", "link": "https://stackoverflow.com/questions/14032066/can-flask-have-optional-url-parameters", "question_id": 14032066, "accepted_answer_id": 14032302, "answer_body": "<p>Another way is to write</p>\n\n<pre><code>@user.route('/&lt;user_id&gt;', defaults={'username': None})\n@user.route('/&lt;user_id&gt;/&lt;username&gt;')\ndef show(user_id, username):\n    pass\n</code></pre>\n\n<p>But I guess that you want to write a single route and mark <code>username</code> as optional?  If that's the case, I don't think it's possible.</p>\n"}, {"title": "Get IP address of visitors using Flask for Python", "question_body": "<p>I'm making a website where users can log on and download files, using the <a href=\"http://flask.pocoo.org/\" rel=\"noreferrer\">Flask micro-framework</a> (based on <a href=\"http://werkzeug.pocoo.org/\" rel=\"noreferrer\">Werkzeug</a>) which uses Python (2.6 in my case).</p>\n\n<p>I need to get the IP address of users when they log on (for logging purposes). \nDoes anyone know how to do this? Surely there is a way to do it with Python?</p>\n", "link": "https://stackoverflow.com/questions/3759981/get-ip-address-of-visitors-using-flask-for-python", "question_id": 3759981, "accepted_answer_id": 3760309, "answer_body": "<p>See the documentation on <a href=\"http://flask.pocoo.org/docs/quickstart/#accessing-request-data\" rel=\"noreferrer\">how to access the Request object</a> and then get from this same Request object, the attribute <code>remote_addr</code>.</p>\n\n<p><strong>Code example</strong></p>\n\n<pre><code>from flask import request\nfrom flask import jsonify\n\n@app.route(\"/get_my_ip\", methods=[\"GET\"])\ndef get_my_ip():\n    return jsonify({'ip': request.remote_addr}), 200\n</code></pre>\n\n<p>For more information see the <a href=\"http://werkzeug.pocoo.org/docs/wrappers/#werkzeug.wrappers.BaseRequest.remote_addr\" rel=\"noreferrer\">Werkzeug documentation</a>.</p>\n"}, {"title": "How to execute raw SQL in Flask-SQLAlchemy app", "question_body": "<p>How do you execute raw SQL in SQLAlchemy?</p>\n\n<p>I have a python web app that runs on flask and interfaces to the database through SQLAlchemy. </p>\n\n<p>I need a way to run the raw SQL. The query involves multiple table joins along with Inline views. </p>\n\n<p>I've tried:</p>\n\n<pre><code>connection = db.session.connection()\nconnection.execute( &lt;sql here&gt; )\n</code></pre>\n\n<p>But I keep getting gateway errors.</p>\n", "link": "https://stackoverflow.com/questions/17972020/how-to-execute-raw-sql-in-flask-sqlalchemy-app", "question_id": 17972020, "accepted_answer_id": 17987782, "answer_body": "<p>Have you tried:</p>\n\n<pre><code>result = db.engine.execute(\"&lt;sql here&gt;\")\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>from sqlalchemy import text\n\nsql = text('select name from penguins')\nresult = db.engine.execute(sql)\nnames = [row[0] for row in result]\nprint names\n</code></pre>\n"}, {"title": "Redirecting to URL in Flask", "question_body": "<p>I'm new to Python and Flask and I'm trying to do the equivalent of <code>Response.redirect</code> as in C# - ie: redirect to a specific URL - how do I go about this?</p>\n\n<p>Here is my code:</p>\n\n<pre><code>import os\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    # Bind to PORT if defined, otherwise default to 5000.\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port)\n</code></pre>\n", "link": "https://stackoverflow.com/questions/14343812/redirecting-to-url-in-flask", "question_id": 14343812, "accepted_answer_id": 14343957, "answer_body": "<p>You have to return a redirect:</p>\n\n<pre><code>import os\nfrom flask import Flask,redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return redirect(\"http://www.example.com\", code=302)\n\nif __name__ == '__main__':\n    # Bind to PORT if defined, otherwise default to 5000.\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port)\n</code></pre>\n\n<p>See <a href=\"http://flask.pocoo.org/docs/1.0/api/#flask.redirect\" rel=\"noreferrer\">the documentation on flask docs.</a> The default value for code is 302 so <code>code=302</code> can be omitted or replaced by other redirect code (one in 301, 302, 303, 305, and 307).</p>\n"}, {"title": "Can I serve multiple clients using just Flask app.run() as standalone?", "question_body": "<p>I know I can link Flask with Apache or other web servers. But, I was thinking of running Flask as a standalone server serving multiple clients simultaneously.</p>\n\n<p>Is this possible? Do I have to handle spawning multiple threads and managing them?</p>\n", "link": "https://stackoverflow.com/questions/14814201/can-i-serve-multiple-clients-using-just-flask-app-run-as-standalone", "question_id": 14814201, "accepted_answer_id": 14823968, "answer_body": "<p><a href=\"http://flask.pocoo.org/docs/api/#flask.Flask.run\" rel=\"nofollow noreferrer\"><code>flask.Flask.run</code></a> accepts additional keyword arguments (<code>**options</code>) that it forwards to <a href=\"http://werkzeug.pocoo.org/docs/serving/#werkzeug.serving.run_simple\" rel=\"nofollow noreferrer\"><code>werkzeug.serving.run_simple</code></a> - two of those arguments are <code>threaded</code> (a boolean) and <code>processes</code> (which you can set to a number greater than one to have werkzeug spawn more than one process to handle requests).</p>\n\n<p><code>threaded</code> defaults to <code>True</code> as of Flask 1.0, so for the latest versions of Flask, the default development server will be able to serve multiple clients simultaneously by default. For older versions of Flask, you can explicitly pass <code>threaded=True</code> to enable this behaviour.</p>\n\n<p>For example, you can do</p>\n\n<pre><code>if __name__ == '__main__':\n    app.run(threaded=True)\n</code></pre>\n\n<p>to handle multiple clients using threads in a way compatible with old Flask versions, or</p>\n\n<pre><code>if __name__ == '__main__':\n    app.run(threaded=False, processes=3)\n</code></pre>\n\n<p>to tell Werkzeug to spawn three processes to handle incoming requests, or just</p>\n\n<pre><code>if __name__ == '__main__':\n    app.run()\n</code></pre>\n\n<p>to handle multiple clients using threads if you know that you will be using Flask 1.0 or later.</p>\n\n<p>That being said, Werkzeug's <code>serving.run_simple</code> wraps the standard library's <a href=\"http://docs.python.org/2/library/wsgiref.html\" rel=\"nofollow noreferrer\"><code>wsgiref</code></a> package - and that package contains a reference implementation of WSGI, not a production-ready web server.  If you are going to use Flask in production (assuming that \"production\" is not a low-traffic internal application with no more than 10 concurrent users) make sure to stand it up behind a real web server (see the section of Flask's docs entitled <a href=\"http://flask.pocoo.org/docs/deploying/\" rel=\"nofollow noreferrer\">Deployment Options</a> for some suggested methods).</p>\n"}, {"title": "How do I get Flask to run on port 80?", "question_body": "<p>I have a Flask server running through port 5000, and it's fine. I can access it at <a href=\"http://example.com:5000\" rel=\"noreferrer\">http://example.com:5000</a></p>\n\n<p>But is it possible to simply access it at <a href=\"http://example.com\" rel=\"noreferrer\">http://example.com</a>? I'm assuming that means I have to change the port from 5000 to 80. But when I try that on Flask, I get this error message when I run it.</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"xxxxxx.py\", line 31, in &lt;module&gt;\napp.run(host=\"0.0.0.0\", port=int(\"80\"), debug=True)\n   File \"/usr/local/lib/python2.6/dist-packages/flask/app.py\", line 772, in run\nrun_simple(host, port, self, **options)\n  File \"/usr/local/lib/python2.6/dist-packages/werkzeug/serving.py\", line 706, in run_simple\n    test_socket.bind((hostname, port))\n  File \"&lt;string&gt;\", line 1, in bind\nsocket.error: [Errno 98] Address already in use\n</code></pre>\n\n<p>Running <code>lsof -i :80</code> returns </p>\n\n<pre><code>COMMAND   PID     USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME\napache2   467     root    3u  IPv4 92108840      0t0  TCP *:www (LISTEN)\napache2  4413 www-data    3u  IPv4 92108840      0t0  TCP *:www (LISTEN)\napache2 14346 www-data    3u  IPv4 92108840      0t0  TCP *:www (LISTEN)\napache2 14570 www-data    3u  IPv4 92108840      0t0  TCP *:www (LISTEN)\napache2 14571 www-data    3u  IPv4 92108840      0t0  TCP *:www (LISTEN)\napache2 14573 www-data    3u  IPv4 92108840      0t0  TCP *:www (LISTEN)\n</code></pre>\n\n<p>Do I need to kill these processes first? Is that safe? Or is there another way to keep Flask running on port 5000 but have the main website domain redirect somehow?</p>\n", "link": "https://stackoverflow.com/questions/20212894/how-do-i-get-flask-to-run-on-port-80", "question_id": 20212894, "accepted_answer_id": 20213086, "answer_body": "<p>So it's throwing up that error message because you have <code>apache2</code> running on port 80.</p>\n\n<p>If this is for development, I would just leave it as it is on port 5000.</p>\n\n<p>If it's for production either:</p>\n\n<p><strong>Not Recommended</strong></p>\n\n<ul>\n<li>Stop <code>apache2</code> first; </li>\n</ul>\n\n<p>Not recommended as it states in the documentation:</p>\n\n<blockquote>\n  <p>You can use the builtin server during development, but you should use a full deployment option for production applications. (Do not use the builtin development server in production.)</p>\n</blockquote>\n\n<p><strong>Recommended</strong></p>\n\n<ul>\n<li>Proxy <code>HTTP</code> traffic through <code>apache2</code> to Flask.</li>\n</ul>\n\n<p>This way, <code>apache2</code> can handle all your static files (which it's very good at - much better than the debug server built into Flask) and act as a reverse proxy for your dynamic content, passing those requests to Flask.</p>\n\n<p><a href=\"http://flask.pocoo.org/docs/deploying/mod_wsgi/#configuring-apache\" rel=\"noreferrer\">Here's a link</a> to the official documentation about setting up Flask with Apache + mod_wsgi.</p>\n\n<p><strong>Edit 1 - Clarification for @Djack</strong></p>\n\n<blockquote>\n  <p>Proxy HTTP traffic to Flask through apache2</p>\n</blockquote>\n\n<p>When a request comes to the server on port 80 (<code>HTTP</code>) or port 443 (<code>HTTPS</code>) a web server like Apache or Nginx handles the connection of the request and works out what to do with it. In our case a request received should be configured to be passed through to Flask on the WSGI protocol and handled by the Python code. This is the \"dynamic\" part. </p>\n\n<blockquote>\n  <p>reverse proxy for dynamic content</p>\n</blockquote>\n\n<p>There are a few advantages to configuring your web server like the above; </p>\n\n<ul>\n<li>SSL Termination - The web server will be optimized to handle HTTPS requests with only a little configuration. Don't \"roll your own\" in Python which is probably very insecure in comparison.</li>\n<li>Security - Opening a port to the internet requires careful consideration of security. Flask's development server is not designed for this and could have open bugs or security issues in comparison to a web server designed for this purpose. Note that a badly configured web server can also be insecure! </li>\n<li>Static File Handling - It is possible for the builtin Flask web server to handle static files however this is not recommended; Nginx/Apache are much more efficient at handling static files like images, CSS, Javascript files and will only pass \"dynamic\" requests (those where the content is often read from a database or the content changes) to be handled by the Python code. </li>\n<li>+more. This is bordering on scope for this question. If you want more info do some research into this area. </li>\n</ul>\n"}, {"title": "Python Flask, how to set content type", "question_body": "<p>I am using Flask and I return an XML file from a get request. How do I set the content type to xml ?</p>\n\n<p>e.g.</p>\n\n<pre><code>@app.route('/ajax_ddl')\ndef ajax_ddl():\n    xml = 'foo'\n    header(\"Content-type: text/xml\")\n    return xml\n</code></pre>\n", "link": "https://stackoverflow.com/questions/11773348/python-flask-how-to-set-content-type", "question_id": 11773348, "accepted_answer_id": 11774026, "answer_body": "<p>Try like this:</p>\n\n<pre><code>from flask import Response\n@app.route('/ajax_ddl')\ndef ajax_ddl():\n    xml = 'foo'\n    return Response(xml, mimetype='text/xml')\n</code></pre>\n\n<p>The actual Content-Type is based on the mimetype parameter and the charset (defaults to UTF-8).</p>\n\n<p>Response (and request) objects are documented here: <a href=\"http://werkzeug.pocoo.org/docs/wrappers/\" rel=\"noreferrer\">http://werkzeug.pocoo.org/docs/wrappers/</a></p>\n"}, {"title": "What are Flask Blueprints, exactly?", "question_body": "<p>I <em>have</em> read <a href=\"http://flask.pocoo.org/docs/blueprints/\">the official Flask documentation</a> on Blueprints and even <a href=\"http://maximebf.com/blog/2012/11/getting-bigger-with-flask/#.U6ttiZSwK7M\">one</a> or <a href=\"http://charlesleifer.com/blog/dont-sweat-small-stuff-use-flask-blueprints/\">two</a> blog posts on using them.</p>\n\n<p>I've even used them in my web app, but I don't completely understand what they are or how they fit into my app as a whole. How is it similar to an instance of my app but not quite? The documentation is comprehensive but I seek a layman explanation or an enlightening analogy to spark it for me. I was sufficiently perplexed when a colleague asked me to explain a Flask blueprint to them that I elected to ask here.</p>\n", "link": "https://stackoverflow.com/questions/24420857/what-are-flask-blueprints-exactly", "question_id": 24420857, "accepted_answer_id": 24420993, "answer_body": "<p>A blueprint is a template for generating a \"section\" of a web application.  You can think of it as a mold:</p>\n\n<p><img src=\"https://i.stack.imgur.com/kd1XW.jpg\" alt=\"A medallion mold with a gold medallion freshly removed from it\"></p>\n\n<p>You can take the blueprint and apply it to your application in several places. Each time you apply it the blueprint will create a new version of its structure in the plaster of your application.</p>\n\n<pre><code># An example\nfrom flask import Blueprint\n\ntree_mold = Blueprint(\"mold\", __name__)\n\n@tree_mold.route(\"/leaves\")\ndef leaves():\n    return \"This tree has leaves\"\n\n@tree_mold.route(\"/roots\")\ndef roots():\n    return \"And roots as well\"\n\n@tree_mold.route(\"/rings\")\n@tree_mold.route(\"/rings/&lt;int:year&gt;\")\ndef rings(year=None):\n    return \"Looking at the rings for {year}\".format(year=year)\n</code></pre>\n\n<p>This is a simple mold for working with trees - it says that any application that deals with trees should provide access to its leaves, its roots, and its rings (by year).  By itself, it is a hollow shell - it cannot route, it cannot respond, until it is impressed upon an application:</p>\n\n<pre><code>from tree_workshop import tree_mold\n\napp.register_blueprint(tree_mold, url_prefix=\"/oak\")\napp.register_blueprint(tree_mold, url_prefix=\"/fir\")\napp.register_blueprint(tree_mold, url_prefix=\"/ash\")\n</code></pre>\n\n<p>Once it is created it may be \"impressed\" on the application by using the <code>register_blueprint</code> function - this \"impresses\" the mold of the blueprint on the application at the locations specified by <code>url_prefix</code>.</p>\n"}, {"title": "Create dynamic URLs in Flask with url_for()", "question_body": "<p>Half of my Flask routes requires a variable say, <code>/&lt;variable&gt;/add</code> or <code>/&lt;variable&gt;/remove</code>. How do I create links to those locations?</p>\n\n<p><code>url_for()</code> takes one argument for the function to route to but I can't add arguments?</p>\n", "link": "https://stackoverflow.com/questions/7478366/create-dynamic-urls-in-flask-with-url-for", "question_id": 7478366, "accepted_answer_id": 7478705, "answer_body": "<p>It takes keyword arguments for the variables:</p>\n\n<pre><code>url_for('add', variable=foo)\n</code></pre>\n"}, {"title": "When should Flask.g be used?", "question_body": "<p>I <a href=\"https://github.com/mitsuhiko/flask/blob/master/CHANGES\" rel=\"noreferrer\">saw</a> that <code>g</code> will move from the request context to the app context in Flask 0.10, which made me confused about the intended use of <code>g</code>.</p>\n\n<p>My understanding (for Flask 0.9) is that:</p>\n\n<ul>\n<li><code>g</code> lives in the request context, i.e., created afresh when the requests starts, and available until it ends</li>\n<li><code>g</code> is intended to be used as a \"request blackboard\", where I can put stuff relevant for the duration of the request (i.e., set a flag at the beginning of the request and handle it at the end, possibly from a <code>before_request</code>/<code>after_request</code> pair)</li>\n<li>in addition to holding request-level-state, <code>g</code> can and should be used for resource management, i.e., holding database connections, etc.</li>\n</ul>\n\n<p>Which of these sentences are no longer true in Flask 0.10? Can someone point me to a resource discussing the <em>reasons</em> for the change? What should I use as a \"request blackboard\" in Flask 0.10 - should I create my own app/extension specific thread-local proxy and push it to the context stack <code>before_request</code>? What's the point of resource management at the application context, if my application lives for a long while (not like a request) and thus the resources are never freed?</p>\n", "link": "https://stackoverflow.com/questions/15083967/when-should-flask-g-be-used", "question_id": 15083967, "accepted_answer_id": 15101229, "answer_body": "<p><a href=\"https://speakerdeck.com/mitsuhiko/advanced-flask-patterns-1\" rel=\"noreferrer\">Advanced Flask Patterns</a>, as <a href=\"https://stackoverflow.com/questions/15083967/when-should-flask-g-be-used/15101229#comment21244306_15083967\">linked by Markus</a>, explains some of the changes to <code>g</code> in 0.10:</p>\n\n<ul>\n<li><code>g</code> now lives in the application context.</li>\n<li><a href=\"https://github.com/mitsuhiko/flask/blob/1949c4a9abc174bf29620f6dd8ceab9ed3ace2eb/flask/ctx.py#L230\" rel=\"noreferrer\">Every request pushes a new application context</a>, wiping the old one, so <code>g</code> can still be used to set flags per-request without change to code.</li>\n<li>The application context is popped <em>after</em> <code>teardown_request</code> is called. (Armin's presentation explains this is because things like creating DB connections are tasks which <em>setup</em> the environment for the request, and should not be handled inside <code>before_request</code> and <code>after_request</code>)</li>\n</ul>\n"}, {"title": "How to get http headers in flask?", "question_body": "<p>I am newbie to python and using Python Flask and generating REST API service.</p>\n\n<p>I want to check authorization header which is sent the client.</p>\n\n<p>But I can't find way to get HTTP header in flask.</p>\n\n<p>Any help for getting HTTP header authorization is appreciated.</p>\n", "link": "https://stackoverflow.com/questions/29386995/how-to-get-http-headers-in-flask", "question_id": 29386995, "accepted_answer_id": 29387151, "answer_body": "<pre><code>from flask import request\nrequest.headers.get('your-header-name')\n</code></pre>\n\n<p><code>request.headers</code> behaves like a dictionary, so you can also get your header like you would with any dictionary:</p>\n\n<pre><code>request.headers['your-header-name']\n</code></pre>\n"}, {"title": "Auto reloading python Flask app upon code changes", "question_body": "<p>I'm investigating how to develop a decent web app with Python. Since I don't want some high-order structures to get in my way, my choice fell on the lightweight <a href=\"http://flask.pocoo.org/community/\">Flask framework</a>. Time will tell if this was the right choice.</p>\n\n<p>So, now I've set up an Apache server with mod_wsgi, and my test site is running fine. However, I'd like to speed up the development routine by making the site automatically reload upon any changes in py or template files I make. I see that any changes in site's .wsgi file causes reloading (even without WSGIScriptReloading On in the apache config file), but I still have to prod it manually (ie, insert extra linebreak, save). Is there some way how to cause reload when I edit some of the app's py files? Or, I am expected to use IDE that refreshes the .wsgi file for me?</p>\n", "link": "https://stackoverflow.com/questions/16344756/auto-reloading-python-flask-app-upon-code-changes", "question_id": 16344756, "accepted_answer_id": 40150705, "answer_body": "<p>The current recommended way (Flask >= 0.11) is with the <code>flask</code> command line utility.</p>\n\n<p><a href=\"http://flask.pocoo.org/docs/0.11/server/\" rel=\"noreferrer\">http://flask.pocoo.org/docs/0.11/server/</a></p>\n\n<p>Example: </p>\n\n<pre><code>$ export FLASK_APP=main.py\n$ export FLASK_DEBUG=1\n$ python -m flask run\n</code></pre>\n\n<p>or in one command:</p>\n\n<pre><code>$ FLASK_APP=main.py FLASK_DEBUG=1 python -m flask run\n</code></pre>\n\n<p>I prefer <code>python -m flask run</code> rather than <code>flask run</code> because the former also works with <code>virtualenv</code>.</p>\n\n<p>If you want different port than the default (<code>5000</code>) add <code>--port</code> option.</p>\n\n<p>Example:</p>\n\n<pre><code>$ python -m flask run --port 8080\n</code></pre>\n\n<p>More options are available with: </p>\n\n<pre><code>$ python -m flask run --help\n</code></pre>\n"}, {"title": "What is the purpose of Flask&#39;s context stacks?", "question_body": "<p>I've been using the request/application context for some time without fully understanding how it works or why it was designed the way it was. What is the purpose of the \"stack\" when it comes to the request or application context? Are these two separate stacks, or are they both part of one stack? Is the request context pushed onto a stack, or is it a stack itself? Am I able to push/pop multiple contexts on top of eachother? If so, why would I want to do that?</p>\n\n<p>Sorry for all the questions, but I'm still confused after reading the documentation for Request Context and Application Context.</p>\n", "link": "https://stackoverflow.com/questions/20036520/what-is-the-purpose-of-flasks-context-stacks", "question_id": 20036520, "accepted_answer_id": 20041823, "answer_body": "<h1>Multiple Apps</h1>\n\n<p>The application context (and its purpose) is indeed confusing until you realize that Flask can have multiple apps. Imagine the situation where you want to have a single WSGI Python interpreter run multiple Flask application. We're not talking Blueprints here, we're talking entirely different Flask applications.</p>\n\n<p>You might set this up similar to the <a href=\"http://flask.pocoo.org/docs/patterns/appdispatch/\" rel=\"noreferrer\">Flask documentation section on \"Application Dispatching\"</a> example:</p>\n\n<pre><code>from werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = DispatcherMiddleware(frontend, {\n    '/backend':     backend\n})\n</code></pre>\n\n<p>Notice that there are two completely different Flask applications being created \"frontend\" and \"backend\". In other words, the <code>Flask(...)</code> application constructor has been called twice, creating two instances of a Flask application.</p>\n\n<h1>Contexts</h1>\n\n<p>When you are working with Flask, you often end up using global variables to access various functionality. For example, you probably have code that reads...</p>\n\n<pre><code>from flask import request\n</code></pre>\n\n<p>Then, during a view, you might use <code>request</code> to access the information of the current request. Obviously, <code>request</code> is not a normal global variable; in actuality, it is a <a href=\"http://flask.pocoo.org/docs/reqcontext/#diving-into-context-locals\" rel=\"noreferrer\">context local</a> value. In other words, there is some magic behind the scenes that says \"when I call <code>request.path</code>, get the <code>path</code> attribute from the <code>request</code> object of the CURRENT request.\" Two different requests will have a different results for <code>request.path</code>.</p>\n\n<p>In fact, even if you run Flask with multiple threads, Flask is smart enough to keep the request objects isolated. In doing so, it becomes possible for two threads, each handling a different request, to simultaneously call <code>request.path</code> and get the correct information for their respective requests.</p>\n\n<h1>Putting it Together</h1>\n\n<p>So we've already seen that Flask can handle multiple applications in the same interpreter, and also that because of the way that Flask allows you to use \"context local\" globals there must be some mechanism to determine what the \"current\" <em>request</em> is (in order to do things such as <code>request.path</code>).</p>\n\n<p>Putting these ideas together, it should also make sense that Flask must have some way to determine what the \"current\" application is!</p>\n\n<p>You probably also have code similar to the following:</p>\n\n<pre><code>from flask import url_for\n</code></pre>\n\n<p>Like our <code>request</code> example, the <code>url_for</code> function has logic that is dependent on the current environment. In this case, however, it is clear to see that the logic is heavily dependent on which app is considered the \"current\" app. In the frontend/backend example shown above, both the \"frontend\" and \"backend\" apps could have a \"/login\" route, and so <code>url_for('/login')</code> should return something different depending on if the view is handling the request for the frontend or backend app.</p>\n\n<h1>To answer your questions...</h1>\n\n<blockquote>\n  <p>What is the purpose of the \"stack\" when it comes to the request or\n  application context?</p>\n</blockquote>\n\n<p>From the Request Context docs:</p>\n\n<blockquote>\n  <p>Because the request context is internally maintained as a stack you\n  can push and pop multiple times. This is very handy to implement\n  things like internal redirects.</p>\n</blockquote>\n\n<p>In other words, even though you typically will have 0 or 1 items on these stack of \"current\" requests or \"current\" applications, it is possible that you could have more.</p>\n\n<p>The example given is where you would have your request return the results of an \"internal redirect\". Let's say a user requests A, but you want to return to the user B. In most cases, you issue a redirect to the user, and point the user to resource B, meaning the user will run a second request to fetch B. A slightly different way of handling this would be to do an internal redirect, which means that while processing A, Flask will make a new request to itself for resource B, and use the results of this second request as the results of the user's original request.</p>\n\n<blockquote>\n  <p>Are these two separate stacks, or are they both part of one stack?</p>\n</blockquote>\n\n<p>They are <a href=\"https://github.com/mitsuhiko/flask/blob/41b5d77e29e6158f7a67e9f9872efb323f1be18f/flask/globals.py#L55-L57\" rel=\"noreferrer\">two separate stacks</a>. However, this is an implementation detail. What's more important is not so much that there is a stack, but the fact that at any time you can get the \"current\" app or request (top of the stack).</p>\n\n<blockquote>\n  <p>Is the request context pushed onto a stack, or is it a stack itself?</p>\n</blockquote>\n\n<p>A \"request context\" is one item of the \"request context stack\". Similarly with the \"app context\" and \"app context stack\".</p>\n\n<blockquote>\n  <p>Am I able to push/pop multiple contexts on top of eachother? If so,\n  why would I want to do that?</p>\n</blockquote>\n\n<p>In a Flask application, you typically would not do this. One example of where you might want to is for an internal redirect (described above). Even in that case, however, you would probably end up having Flask handle a new request, and so Flask would do all of the pushing/popping for you.</p>\n\n<p>However, there are some cases where you'd want to manipulate the stack yourself.</p>\n\n<h2>Running code outside of a request</h2>\n\n<p>One typical problem people have is that they use the Flask-SQLAlchemy extension to set up a SQL database and model definition using code something like what is shown below...</p>\n\n<pre><code>app = Flask(__name__)\ndb = SQLAlchemy() # Initialize the Flask-SQLAlchemy extension object\ndb.init_app(app)\n</code></pre>\n\n<p>Then they use the <code>app</code> and <code>db</code> values in a script that should be run from the shell. For example, a \"setup_tables.py\" script...</p>\n\n<pre><code>from myapp import app, db\n\n# Set up models\ndb.create_all()\n</code></pre>\n\n<p>In this case, the Flask-SQLAlchemy extension knows about the <code>app</code> application, but during <code>create_all()</code> it will throw an error complaining about there not being an application context. This error is justified; you never told Flask what application it should be dealing with when running the <code>create_all</code> method.</p>\n\n<p>You might be wondering why you don't end up needing this <code>with app.app_context()</code> call when you run similar functions in your views. The reason is that Flask already handles the management of the application context for you when it is handling actual web requests. The problem really only comes up outside of these view functions (or other such callbacks), such as when using your models in a one-off script.</p>\n\n<p>The resolution is to push the application context yourself, which can be done by doing...</p>\n\n<pre><code>from myapp import app, db\n\n# Set up models\nwith app.app_context():\n    db.create_all()\n</code></pre>\n\n<p>This will push a new application context (using the application of <code>app</code>, remember there could be more than one application).</p>\n\n<h2>Testing</h2>\n\n<p>Another case where you would want to manipulate the stack is for testing. You could create a unit test that handles a request and you check the results:</p>\n\n<pre><code>import unittest\nfrom flask import request\n\nclass MyTest(unittest.TestCase):\n    def test_thing(self):\n        with app.test_request_context('/?next=http://example.com/') as ctx:\n            # You can now view attributes on request context stack by using `request`.\n\n        # Now the request context stack is empty\n</code></pre>\n"}, {"title": "Passing HTML to template using Flask/Jinja2", "question_body": "<p>I'm building an admin for Flask and SQLAlchemy, and I want to pass the HTML for the different inputs to my view using <code>render_template</code>. The templating framework seems to escape the html automatically, so all &lt;\"'> are converted to html entities. How can I disable that so that the HTML renders correctly?</p>\n", "link": "https://stackoverflow.com/questions/3206344/passing-html-to-template-using-flask-jinja2", "question_id": 3206344, "accepted_answer_id": 3206446, "answer_body": "<p>the ideal way is to</p>\n\n<pre><code>{{ something|safe }}\n</code></pre>\n\n<p>than completely turning off auto escaping. </p>\n"}, {"title": "Get raw POST body in Python Flask regardless of Content-Type header", "question_body": "<p>Previously, I asked <a href=\"https://stackoverflow.com/q/10434599\">How to get data received in Flask request</a> because <code>request.data</code> was empty. The answer explained that <code>request.data</code> is the raw post body, but will be empty if form data is parsed.  How can I get the raw post body unconditionally?</p>\n\n<pre><code>@app.route('/', methods=['POST'])\ndef parse_request():\n    data = request.data  # empty in some cases\n    # always need raw data here, not parsed form data\n</code></pre>\n", "link": "https://stackoverflow.com/questions/10999990/get-raw-post-body-in-python-flask-regardless-of-content-type-header", "question_id": 10999990, "accepted_answer_id": 23898949, "answer_body": "<p>Use <a href=\"http://werkzeug.pocoo.org/docs/wrappers/#werkzeug.wrappers.BaseRequest.get_data\" rel=\"noreferrer\"><code>request.get_data()</code></a> to get the raw data, regardless of content type. The data is cached and you can subsequently access <code>request.data</code>, <code>request.json</code>, <code>request.form</code> at will.</p>\n\n<p>If you access <code>request.data</code> first, it will call <code>get_data</code> with an argument to parse form data first. If the request has a form content type (<code>multipart/form-data</code>, <code>application/x-www-form-urlencoded</code>, or <code>application/x-url-encoded</code>) then the raw data will be consumed. <code>request.data</code> and <code>request.json</code> will appear empty in this case.</p>\n"}, {"title": "Get list of all routes defined in the Flask app", "question_body": "<p>I have a complex Flask-based web app.  There are lots of separate files with view functions.  Their URLs are defined with the <code>@app.route('/...')</code> decorator.  Is there a way to get a list of all the routes that have been declared throughout my app?  Perhaps there is some method I can call on the <code>app</code> object?</p>\n", "link": "https://stackoverflow.com/questions/13317536/get-list-of-all-routes-defined-in-the-flask-app", "question_id": 13317536, "accepted_answer_id": 13318415, "answer_body": "<p>All the routes for an application are stored on <a href=\"http://flask.pocoo.org/docs/api/#flask.Flask.url_map\" rel=\"noreferrer\"><code>app.url_map</code></a> which is an instance of <a href=\"http://werkzeug.pocoo.org/docs/routing/#werkzeug.routing.Map\" rel=\"noreferrer\"><code>werkzeug.routing.Map</code></a>.  You can iterate over the <a href=\"http://werkzeug.pocoo.org/docs/routing/#werkzeug.routing.Rule\" rel=\"noreferrer\"><code>Rule</code></a> instances by using the <a href=\"http://werkzeug.pocoo.org/docs/routing/#werkzeug.routing.Map.iter_rules\" rel=\"noreferrer\"><code>iter_rules</code></a> method:</p>\n\n<pre><code>from flask import Flask, url_for\n\napp = Flask(__name__)\n\ndef has_no_empty_params(rule):\n    defaults = rule.defaults if rule.defaults is not None else ()\n    arguments = rule.arguments if rule.arguments is not None else ()\n    return len(defaults) &gt;= len(arguments)\n\n\n@app.route(\"/site-map\")\ndef site_map():\n    links = []\n    for rule in app.url_map.iter_rules():\n        # Filter out rules we can't navigate to in a browser\n        # and rules that require parameters\n        if \"GET\" in rule.methods and has_no_empty_params(rule):\n            url = url_for(rule.endpoint, **(rule.defaults or {}))\n            links.append((url, rule.endpoint))\n    # links is now a list of url, endpoint tuples\n</code></pre>\n\n<p>See <a href=\"https://stackoverflow.com/questions/13151161/display-links-to-new-webpages-created/13161594#13161594\">Display links to new webpages created</a> for a bit more information.</p>\n"}, {"title": "Return HTTP status code 201 in flask", "question_body": "<p>We're using Flask for one of our API's and I was just wondering if anyone knew how to return a HTTP response 201?</p>\n\n<p>For errors such as 404 we can call:</p>\n\n<pre><code>from flask import abort\nabort(404)\n</code></pre>\n\n<p>But for 201 I get</p>\n\n<blockquote>\n  <p>LookupError: no exception for 201</p>\n</blockquote>\n\n<p>Do I need to create my own exception like <a href=\"http://werkzeug.pocoo.org/docs/exceptions/#custom-errors\" rel=\"noreferrer\">this</a> in the docs?</p>\n", "link": "https://stackoverflow.com/questions/7824101/return-http-status-code-201-in-flask", "question_id": 7824101, "accepted_answer_id": 7824605, "answer_body": "<p>You can read about it <a href=\"http://flask.pocoo.org/docs/quickstart/#about-responses\">here.</a></p>\n\n<pre><code>return render_template('page.html'), 201\n</code></pre>\n"}, {"title": "Flask vs webapp2 for Google App Engine", "question_body": "<p>I'm starting new Google App Engine application and currently considering two frameworks: <a href=\"http://flask.pocoo.org/\" rel=\"noreferrer\">Flask</a> and <a href=\"http://webapp-improved.appspot.com/\" rel=\"noreferrer\">webapp2</a>. I'm rather satisfied with built-in webapp framework that I've used for my previous App Engine application, so I think webapp2 will be even better and I won't have any problems with it.</p>\n\n<p>However, there are a lot of good reviews of Flask, I really like its approach and all the things that I've read so far in the documentation and I want to try it out. But I'm a bit concerned about limitations that I can face down the road with Flask.</p>\n\n<p>So, the question is - <em>do you know any problems, performance issues, limitations (e.g. routing system, built-in authorization mechanism, etc.) that Flask could bring into Google App Engine application?</em> By \"problem\" I mean something that I can't work around in several lines of code (or any reasonable amount of code and efforts) or something that is completely impossible.</p>\n\n<p>And as a follow-up question: are there any killer-features in Flask that you think can blow my mind and make me use it despite any problems that I can face?</p>\n", "link": "https://stackoverflow.com/questions/6774371/flask-vs-webapp2-for-google-app-engine", "question_id": 6774371, "accepted_answer_id": 6786745, "answer_body": "<p><strong>Disclaimer:</strong> I'm the author of tipfy and webapp2.</p>\n\n<p>A big advantage of sticking with webapp (or its natural evolution, webapp2) is that you don't have to create your own versions for existing SDK handlers for your framework of your choice.</p>\n\n<p>For example, <a href=\"http://code.google.com/appengine/articles/deferred.html\" rel=\"noreferrer\">deferred</a> uses a webapp handler. To use it in a pure Flask view, using werkzeug.Request and werkzeug.Response, you'll need to implement deferred for it (like I did <a href=\"http://code.google.com/p/tipfy/source/browse/tipfy/appengine/taskqueue.py\" rel=\"noreferrer\">here</a> for tipfy).</p>\n\n<p>The same happens for other handlers: blobstore (Werkzeug still doesn't support range requests, so you'll need to use WebOb even if you create your own handler -- see <a href=\"http://code.google.com/p/tipfy/source/browse/tipfy/appengine/blobstore.py\" rel=\"noreferrer\">tipfy.appengine.blobstore</a>), mail, XMPP and so on, or others that are included in the SDK in the future.</p>\n\n<p>And the same happens for libraries created with App Engine in mind, like <a href=\"http://code.google.com/p/google-protorpc/\" rel=\"noreferrer\">ProtoRPC</a>, which is based on webapp and would need a port or adapter to work with other frameworks, if you don't want to mix webapp and your-framework-of-choice handlers in the same app.</p>\n\n<p>So, even if you choose a different framework, you'll end a) using webapp in some special cases or b) having to create and maintain your versions for specific SDK handlers or features, if you'll use them.</p>\n\n<p>I much prefer Werkzeug over WebOb, but after over one year porting and maintaining versions of the SDK handlers that work natively with tipfy, I realized that this is a lost cause -- to support GAE for the long term, best is to stay close to webapp/WebOb. It makes support for SDK libraries a breeze, maintenance becomes a lot easier, it is more future-proof as new libraries and SDK features will work out of the box and there's the benefit of a large community working around the same App Engine tools.</p>\n\n<p>A specific webapp2 defense is summarized <a href=\"http://news.ycombinator.com/item?id=2716101\" rel=\"noreferrer\">here</a>. Add to those that <a href=\"https://webapp2.readthedocs.io/en/latest/tutorials/quickstart.nogae.html\" rel=\"noreferrer\">webapp2 can be used outside of App Engine</a> and is <a href=\"https://webapp2.readthedocs.io/en/latest/guide/handlers.html#a-micro-framework-based-on-webapp2\" rel=\"noreferrer\">easy to be customized to look like popular micro-frameworks</a> and you have a good set of compelling reasons to go for it. Also, webapp2 has a big chance to be included in a future SDK release (this is extra-official, don't quote me :-) which will push it forward and bring new developers and contributions.</p>\n\n<p>That said, I'm a big fan of Werkzeug and the Pocoo guys and borrowed a lot from Flask and others (web.py, Tornado), but -- and, you know, I'm biased -- the above webapp2 benefits should be taken into account.</p>\n"}, {"title": "How to divide flask app into multiple py files?", "question_body": "<p>My flask application currently consists of a single <code>test.py</code> file with multiple routes and the <code>main()</code> route defined. Is there some way I could create a <code>test2.py</code> file that contains routes that were not handled in <code>test.py</code>?</p>\n\n<pre><code>@app.route('/somepath')\ndef somehandler():\n    # Handler code here\n</code></pre>\n\n<p>I am concerned that there are too many routes in <code>test.py</code> and would like to make it such that I can run <code>python test.py</code>, which will also pick up the routes on <code>test.py</code> as if it were part of the same file. What changes to I have to make in <code>test.py</code> and/or include in <code>test2.py</code> to get this to work?</p>\n", "link": "https://stackoverflow.com/questions/11994325/how-to-divide-flask-app-into-multiple-py-files", "question_id": 11994325, "accepted_answer_id": 11994728, "answer_body": "<p>You can use the usual Python package structure to divide your App into multiple modules, <a href=\"http://flask.pocoo.org/docs/patterns/packages/\">see the Flask docs.</a></p>\n\n<p>However,</p>\n\n<blockquote>\n  <p>Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications.</p>\n</blockquote>\n\n<p>You can create a sub-component of your app as a Blueprint in a separate file:</p>\n\n<pre><code>simple_page = Blueprint('simple_page', __name__, template_folder='templates')\n@simple_page.route('/&lt;page&gt;')\ndef show(page):\n    # stuff\n</code></pre>\n\n<p>And then use it in the main part:</p>\n\n<pre><code>from yourapplication.simple_page import simple_page\n\napp = Flask(__name__)\napp.register_blueprint(simple_page)\n</code></pre>\n\n<p>Blueprints can also bundle specific resources: templates or static files. Please refer to the <a href=\"http://flask.pocoo.org/docs/blueprints/#blueprints\">Flask docs</a> for all the details.</p>\n"}, {"title": "ImportError: No Module Named bs4 (BeautifulSoup)", "question_body": "<p>I'm working in Python and using Flask. When I run my main Python file on my computer, it works perfectly, but when I activate venv and run the Flask Python file in the terminal, it says that my main Python file has \"No Module Named bs4.\" Any comments or advice is greatly appreciated.</p>\n", "link": "https://stackoverflow.com/questions/11783875/importerror-no-module-named-bs4-beautifulsoup", "question_id": 11783875, "accepted_answer_id": 11784778, "answer_body": "<p>Activate the virtualenv, and then install BeautifulSoup4:</p>\n\n<pre><code>$ pip install BeautifulSoup4\n</code></pre>\n\n<p>When you installed <code>bs4</code> with <code>easy_install</code>, you installed it system-wide. So your system python can import it, but not your virtualenv python.\nIf you do not need <code>bs4</code> to be installed in your system python path, uninstall it and keep it in your virtualenv.</p>\n\n<p>For more information about virtualenvs, read <a href=\"http://iamzed.com/2009/05/07/a-primer-on-virtualenv/\" rel=\"noreferrer\">this</a> </p>\n"}]