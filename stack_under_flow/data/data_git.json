[{"title": "How do I undo the most recent local commits in Git?", "question_body": "<p>I accidentally committed the wrong files to <a href=\"https://en.wikipedia.org/wiki/Git\" rel=\"noreferrer\">Git</a>, but I haven't pushed the commit to the server yet.</p>\n\n<p><strong>How can I undo those commits from the local repository?</strong> </p>\n", "link": "https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git", "question_id": 927358, "accepted_answer_id": 927386, "answer_body": "<h3>Undo a commit and redo</h3>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ git commit -m \"Something terribly misguided\"             # (1)\n$ git reset HEAD~                                          # (2)\n&lt;&lt; edit files as necessary &gt;&gt;                              # (3)\n$ git add ...                                              # (4)\n$ git commit -c ORIG_HEAD                                  # (5)\n</code></pre>\n\n<ol>\n<li>This is what you want to undo.</li>\n<li>This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in <code>git status</code>, so you'll need to add them again before committing). If you <em>only</em> want to <em>add</em> more changes to the previous commit, or change the commit message<sup>1</sup>, you could use <code>git reset --soft HEAD~</code> instead, which is like <code>git reset HEAD~</code> (where <code>HEAD~</code> is the same as <code>HEAD~1</code>) but leaves your existing changes staged.</li>\n<li>Make corrections to working tree files.</li>\n<li><code>git add</code> anything that you want to include in your new commit.</li>\n<li>Commit the changes, reusing the old commit message. <code>reset</code> copied the old head to <code>.git/ORIG_HEAD</code>; <code>commit</code> with <code>-c ORIG_HEAD</code> will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the <code>-C</code> option.</li>\n</ol>\n\n<p>Beware however that if you have added any new changes to the index, using <code>commit --amend</code> will add them to your previous commit.</p>\n\n<p>If the code is already pushed to your server and you have permissions to overwrite history (rebase) then:</p>\n\n<pre><code>git push origin master --force\n</code></pre>\n\n<p>You can also look at this answer:  </p>\n\n<p><a href=\"https://stackoverflow.com/questions/34519665/how-to-move-head-back-to-a-previous-location-detached-head/34519716#34519716\">How to move HEAD back to a previous location? (Detached head) &amp; Undo commits</a></p>\n\n<p>The above answer will show you <code>git reflog</code> which is used to find out what is the SHA-1 which you wish to revert to. Once you found the point to which you wish to undo to use the sequence of commands as explained above.</p>\n\n<hr>\n\n<p><sup>1</sup> Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your <em>commit message</em>. The easier option is to <code>git reset</code> (to unstage any changes you've made since) and then <a href=\"https://stackoverflow.com/q/179123/1146608\"><code>git commit --amend</code></a>, which will open your default commit message editor pre-populated with the last commit message. </p>\n"}, {"title": "How do I delete a Git branch locally and remotely?", "question_body": "<p>I want to delete a branch both locally and remotely.</p>\n\n<h2>Failed Attempts to Delete Remote Branch</h2>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ git branch -d remotes/origin/bugfix\nerror: branch 'remotes/origin/bugfix' not found.\n\n$ git branch -d origin/bugfix\nerror: branch 'origin/bugfix' not found.\n\n$ git branch -rd origin/bugfix\nDeleted remote branch origin/bugfix (was 2a14ef7).\n\n$ git push\nEverything up-to-date\n\n$ git pull\nFrom github.com:gituser/gitproject\n* [new branch] bugfix -&gt; origin/bugfix\nAlready up-to-date.\n</code></pre>\n\n<p>What should I do differently to successfully delete the\n<code>remotes/origin/bugfix</code> branch both locally and remotely?</p>\n", "link": "https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely", "question_id": 2003505, "accepted_answer_id": 2003515, "answer_body": "<h1>Executive Summary</h1>\n\n<pre><code>$ git push --delete &lt;remote_name&gt; &lt;branch_name&gt;\n$ git branch -d &lt;branch_name&gt;\n</code></pre>\n\n<p>Note that in most cases the remote name is <code>origin</code>.</p>\n\n<h1>Delete Local Branch</h1>\n\n<p>To delete the <em>local</em> branch use one of the following:</p>\n\n<pre><code>$ git branch -d branch_name\n$ git branch -D branch_name\n</code></pre>\n\n<p><strong>Note:</strong> The <code>-d</code> option is an alias for <code>--delete</code>, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use <code>-D</code>, which is an alias for <code>--delete --force</code>, which deletes the branch \"irrespective of its merged status.\" [Source: <code>man git-branch</code>] </p>\n\n<h1>Delete Remote Branch [Updated on 8-Sep-2017]</h1>\n\n<p>As of <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.7.0.txt\" rel=\"noreferrer\">Git v1.7.0</a>, you can delete a <strong><em>remote</em></strong> branch using</p>\n\n<pre><code>$ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\n</code></pre>\n\n<p>which might be easier to remember than</p>\n\n<pre><code>$ git push &lt;remote_name&gt; :&lt;branch_name&gt;\n</code></pre>\n\n<p>which was added in <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.5.0.txt\" rel=\"noreferrer\">Git v1.5.0</a> \"to delete a remote branch or a tag.\"</p>\n\n<p>Starting on <a href=\"https://github.com/git/git/blob/master/Documentation/RelNotes/2.8.0.txt\" rel=\"noreferrer\">Git v2.8.0</a> you can also use <code>git push</code> with the <code>-d</code> option as an alias for <code>--delete</code>.</p>\n\n<p>Therefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.</p>\n\n<h2>Delete Remote Branch [Original Answer from 5-Jan-2010]</h2>\n\n<p>From Chapter 3 of <a href=\"http://git-scm.com/book/en/Git-Branching-Remote-Branches\" rel=\"noreferrer\"><em>Pro Git</em></a> by Scott Chacon:</p>\n\n<blockquote>\n  <h3>Deleting Remote Branches</h3>\n  \n  <p>Suppose you\u2019re done with a remote branch \u2014 say, you and your collaborators are finished with a feature and have merged it into your remote\u2019s master branch (or whatever branch your stable code-line is in). You can delete a remote branch using the rather obtuse syntax <code>git push [remotename] :[branch]</code>. If you want to delete your server-fix branch from the server, you run the following:</p>\n\n<pre><code>$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n</code></pre>\n  \n  <p>Boom. No more branch on your server. You may want to dog-ear this page, because you\u2019ll need that command, and you\u2019ll likely forget the syntax. A way to remember this command is by recalling the <code>git push [remotename] [localbranch]:[remotebranch]</code> syntax that we went over a bit earlier. If you leave off the <code>[localbranch]</code> portion, then you\u2019re basically saying, \u201cTake nothing on my side and make it be <code>[remotebranch]</code>.\u201d</p>\n</blockquote>\n\n<p>I issued <code>git push origin :bugfix</code> and it worked beautifully. Scott Chacon was right\u2014I will want to <a href=\"http://en.wiktionary.org/wiki/dogear#Verb\" rel=\"noreferrer\">dog ear</a> that page (or virtually dog ear by answering this on Stack&nbsp;Overflow).</p>\n\n<p>Then you should execute this on other machines</p>\n\n<pre><code>git fetch --all --prune\n</code></pre>\n\n<p>to propagate changes.</p>\n"}, {"title": "What is the difference between &#39;git pull&#39; and &#39;git fetch&#39;?", "question_body": "<blockquote>\n  <p><strong>Moderator Note:</strong> Given that this question has already had <em>sixty-seven answers</em> posted to it (some of them deleted), consider whether or not you are <strong><em>contributing anything new</em></strong> before posting another one.</p>\n</blockquote>\n\n<p>What are the differences between <code>git pull</code> and <code>git fetch</code>?</p>\n", "link": "https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch", "question_id": 292357, "accepted_answer_id": 292359, "answer_body": "<p>In the simplest terms, <code>git pull</code> does a <code>git fetch</code> followed by a <code>git merge</code>.</p>\n\n<p>You can do a <code>git fetch</code> at any time to update your remote-tracking branches under <code>refs/remotes/&lt;remote&gt;/</code>.</p>\n\n<p>This operation never changes any of your own local branches under <code>refs/heads</code>, and is safe to do without changing your working copy. I have even heard of people running <code>git fetch</code> periodically in a cron job in the background (although I wouldn't recommend doing this).</p>\n\n<p>A <code>git pull</code> is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.</p>\n\n<p>Git documentation \u2013 <a href=\"http://git-scm.com/docs/git-pull\" rel=\"noreferrer\"><strong>git pull</strong></a>:</p>\n\n<blockquote>\n  <p>In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.</p>\n</blockquote>\n"}, {"title": "How do I undo &#39;git add&#39; before commit?", "question_body": "<p>I mistakenly added files to git using the command:</p>\n\n<pre><code>git add myfile.txt\n</code></pre>\n\n<p>I have not yet run <code>git commit</code>. Is there a way to undo this, so these files won't be included in the commit?</p>\n", "link": "https://stackoverflow.com/questions/348170/how-do-i-undo-git-add-before-commit", "question_id": 348170, "accepted_answer_id": 348234, "answer_body": "<p>You can undo <code>git add</code> before commit with</p>\n\n<pre><code>git reset &lt;file&gt;\n</code></pre>\n\n<p>which will remove it from the current index (the \"about to be committed\" list) without changing anything else.</p>\n\n<p>You can use</p>\n\n<pre><code>git reset\n</code></pre>\n\n<p>without any file name to unstage all due changes. This can come in handy when there are too many files to be listed one by one in a reasonable amount of time.</p>\n\n<p>In old versions of Git, the above commands are equivalent to <code>git reset HEAD &lt;file&gt;</code> and <code>git reset HEAD</code> respectively, and will fail if <code>HEAD</code> is undefined (because you haven't yet made any commits in your repo) or ambiguous (because you created a branch called <code>HEAD</code>, which is a stupid thing that you shouldn't do). This <a href=\"https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/1.8.2.txt#n179\" rel=\"noreferrer\">was changed in Git 1.8.2</a>, though, so in modern versions of Git you can use the commands above even prior to making your first commit:</p>\n\n<blockquote>\n  <p>\"git reset\" (without options or parameters) used to error out when\n     you do not have any commits in your history, but it now gives you\n     an empty index (to match non-existent commit you are not even on).</p>\n</blockquote>\n"}, {"title": "How do I rename a local Git branch?", "question_body": "<p>I don't want to rename a remote branch, as described in <em><a href=\"https://stackoverflow.com/questions/1526794/rename-master-branch-for-both-local-and-remote-git-repositories?answertab=votes#tab-top\">Rename master branch for both local and remote Git repositories</a></em>.</p>\n\n<p>How can I rename a local branch which hasn't been pushed to a remote branch?</p>\n\n<p>In case you need to rename <strong>remote</strong> branch as well:<br>\n<em><a href=\"https://stackoverflow.com/questions/30590083/how-to-rename-a-remote-git-branch-name/30590238#30590238\">How do I rename both a Git local and remote branch name</a></em></p>\n", "link": "https://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch", "question_id": 6591213, "accepted_answer_id": 6591218, "answer_body": "<p>If you want to rename a branch while pointed to any branch, do:</p>\n\n<pre><code>git branch -m &lt;oldname&gt; &lt;newname&gt;\n</code></pre>\n\n<p>If you want to rename the current branch, you can do:</p>\n\n<pre><code>git branch -m &lt;newname&gt;\n</code></pre>\n\n<p>A way to remember this is <code>-m</code> is for \"move\" (or <code>mv</code>), which is how you rename files.</p>\n\n<p>If you are on Windows or another case-insensitive filesystem, and there are any capitalization change in the name, you need to use <code>-M</code>, otherwise, git will throw <em><strong>branch already exists</strong></em> error:</p>\n\n<pre><code>git branch -M &lt;newname&gt;\n</code></pre>\n"}, {"title": "How to modify existing, unpushed commit messages?", "question_body": "<p>I wrote the wrong thing in a commit message.</p>\n\n<p>How can I change the message? The commit has not been pushed yet.</p>\n", "link": "https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commit-messages", "question_id": 179123, "accepted_answer_id": 179147, "answer_body": "<h1>Amending the most recent commit message</h1>\n\n<pre class=\"lang-sh prettyprint-override\"><code>git commit --amend\n</code></pre>\n\n<p>will open your editor, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>git commit --amend -m \"New commit message\"\n</code></pre>\n\n<p>\u2026however, this can make multi-line commit messages or small corrections more cumbersome to enter.</p>\n\n<p>Make sure you don't have any working copy changes <em>staged</em> before doing this or they will get committed too. (<em>Unstaged</em> changes will not get committed.)</p>\n\n<h2>Changing the message of a commit that you've already pushed to your remote branch</h2>\n\n<p>If you've already pushed your commit up to your remote branch, then you'll <a href=\"https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message\">need to force push the commit</a> with: </p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>git push &lt;remote&gt; &lt;branch&gt; --force\n# Or\ngit push &lt;remote&gt; &lt;branch&gt; -f\n</code></pre>\n\n<p><strong>Warning: force-pushing will overwrite the remote branch with the state of your local one</strong>. If there are commits on the remote branch that you don't have in your local branch, you <em>will</em> lose those commits.</p>\n\n<p><strong>Warning: be cautious about amending commits that you have already shared with other people.</strong> Amending commits essentially <em>rewrites</em> them to have different <a href=\"http://en.wikipedia.org/wiki/SHA-1\" rel=\"noreferrer\">SHA</a> IDs, which poses a problem if other people have copies of the old commit that you've rewritten. Anyone who has a copy of the old commit will need to synchronize their work with your newly re-written commit, which can sometimes be difficult, so make sure you coordinate with others when attempting to rewrite shared commit history, or just avoid rewriting shared commits altogether.</p>\n\n<hr>\n\n<h3>Use interactive rebase</h3>\n\n<p>Another option is to use interactive rebase.<br>\nThis allows you to edit any message you want to update even if it's not the latest message.</p>\n\n<p>In order to do a git squash, follow these steps:</p>\n\n<pre><code>// X is the number of commits to the last commit you want to be able to edit\ngit rebase -i HEAD~X\n</code></pre>\n\n<p>Once you squash your commits - choose the <code>e/r</code> for editing the message</p>\n\n<p><a href=\"https://i.stack.imgur.com/LVcm9.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/LVcm9.png\" alt=\"enter image description here\"></a></p>\n\n<h3>Important note about Interactive rebase</h3>\n\n<p>When you use the <code>git rebase -i HEAD~X</code> there can be <strong>more</strong> than <code>X</code> commits. Git will \"collect\" all the commits in the last <code>X</code> commits and if there was a merge somewhere in between that range you will see all the commits as well so the outcome will be X+.</p>\n\n<h3>Good tip:</h3>\n\n<p>If you have to do it for more than a single branch and you might face conflicts when amending the content, set up <a href=\"https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944\"><code>git rerere</code></a> and let git resolve those conflicts automatically for you.</p>\n\n<hr>\n\n<h2>Documentation</h2>\n\n<ul>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-commit.html\" rel=\"noreferrer\">git-commit(1) Manual Page</a></p></li>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html\" rel=\"noreferrer\">git-rebase(1) Manual Page</a></p></li>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-push.html\" rel=\"noreferrer\">git-push(1) Manual Page</a></p></li>\n</ul>\n"}, {"title": "How do I revert a Git repository to a previous commit?", "question_body": "<p>How do I revert from my current state to a snapshot made on a certain commit?</p>\n\n<p>If I do <code>git log</code>, then I get the following output:</p>\n\n<pre><code>$ git log\ncommit a867b4af366350be2e7c21b8de9cc6504678a61b`\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 18:59:41 2010 -0400\n\nblah blah blah...\n\ncommit 25eee4caef46ae64aa08e8ab3f988bc917ee1ce4\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 05:13:39 2010 -0400\n\nmore blah blah blah...\n\ncommit 0766c053c0ea2035e90f504928f8df3c9363b8bd\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 00:55:06 2010 -0400\n\nAnd yet more blah blah...\n\ncommit 0d1d7fc32e5a947fbd92ee598033d85bfc445a50\nAuthor: Me &lt;me@me.com&gt;\nDate:   Wed Nov 3 23:56:08 2010 -0400\n\nYep, more blah blah.\n</code></pre>\n\n<p>How do revert to the commit from November 3, i.e. commit <code>0d1d7fc</code>?</p>\n", "link": "https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit", "question_id": 4114095, "accepted_answer_id": 4114122, "answer_body": "<p>This depends a lot on what you mean by \"revert\".</p>\n\n<h2>Temporarily switch to a different commit</h2>\n\n<p>If you want to temporarily go back to it, fool around, then come back to where you are, all you have to do is check out the desired commit:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code># This will detach your HEAD, that is, leave you with no branch checked out:\ngit checkout 0d1d7fc32\n</code></pre>\n\n<p>Or if you want to make commits while you're there, go ahead and make a new branch while you're at it:</p>\n\n<pre><code>git checkout -b old-state 0d1d7fc32\n</code></pre>\n\n<p>To go back to where you were, just check out the branch you were on again. (If you've made changes, as always when switching branches, you'll have to deal with them as appropriate. You could reset to throw them away; you could stash, checkout, stash pop to take them with you; you could commit them to a branch there if you want a branch there.)</p>\n\n<h2>Hard delete unpublished commits</h2>\n\n<p>If, on the other hand, you want to really get rid of everything you've done since then, there are two possibilities. One, if you haven't published any of these commits, simply reset:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code># This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.\n</code></pre>\n\n<p>If you mess up, you've already thrown away your local changes, but you can at least get back to where you were before by resetting again.</p>\n\n<h2>Undo published commits with new commits</h2>\n\n<p>On the other hand, if you've published the work, you probably don't want to reset the branch, since that's effectively rewriting history. In that case, you could indeed revert the commits. With Git, revert has a very specific meaning: create a commit with the reverse patch to cancel it out. This way you don't rewrite any history.</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code># This will create three separate revert commits:\ngit revert a867b4af 25eee4ca 0766c053\n\n# It also takes ranges. This will revert the last two commits:\ngit revert HEAD~2..HEAD\n\n#Similarly, you can revert a range of commits using commit hashes:\ngit revert a867b4af..0766c053 \n\n# Reverting a merge commit\ngit revert -m 1 &lt;merge_commit_sha&gt;\n\n# To get just one, you could use `rebase -i` to squash them afterwards\n# Or, you could do it manually (be sure to do this at top level of the repo)\n# get your index and work tree into the desired state, without changing HEAD:\ngit checkout 0d1d7fc32 .\n\n# Then commit. Be sure and write a good message describing what you just did\ngit commit\n</code></pre>\n\n<p>The <a href=\"http://schacon.github.com/git/git-revert.html\" rel=\"noreferrer\"><code>git-revert</code> manpage</a> actually covers a lot of this in its description. Another useful link is <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_undoing_merges\" rel=\"noreferrer\">this git-scm.com section discussing git-revert</a>.</p>\n\n<p>If you decide you didn't want to revert after all, you can revert the revert (as described here) or reset back to before the revert (see the previous section).</p>\n\n<p>You may also find this answer helpful in this case:<br>\n<a href=\"https://stackoverflow.com/questions/34519665/how-to-move-head-forward-checkout-revet-reflog-reset/34519716#34519716\">How to move HEAD back to a previous location? (Detached head)</a></p>\n"}, {"title": "How do I force &quot;git pull&quot; to overwrite local files?", "question_body": "<p>How do I force an overwrite of local files on a <code>git pull</code>?</p>\n\n<p>The scenario is following:</p>\n\n<ul>\n<li>A team member is modifying the templates for a website we are working on</li>\n<li>They are adding some images to the images directory (but forgets to add them under source control)</li>\n<li>They are sending the images by mail, later, to me</li>\n<li>I'm adding the images under the source control and pushing them to GitHub together with other changes</li>\n<li>They cannot pull updates from GitHub because Git doesn't want to overwrite their files.</li>\n</ul>\n\n<p>This is the error I'm getting:</p>\n\n<blockquote>\n  <p>error: Untracked working tree file 'public/images/icon.gif' would be overwritten by merge</p>\n</blockquote>\n\n<p>How do I force Git to overwrite them? The person is a designer - usually I resolve all the conflicts by hand, so the server has the most recent version that they just needs to update on their computer.</p>\n", "link": "https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files", "question_id": 1125968, "accepted_answer_id": 8888015, "answer_body": "<h2>Important: If you have any local changes, they will be lost. With or without <code>--hard</code> option, any local commits that haven't been pushed will be lost.<sup>[*]</sup></h2>\n\n<p>If you have any files that are <em>not</em> tracked by Git (e.g. uploaded user content), these files will not be affected.</p>\n\n<hr>\n\n<p>I think this is the right way:</p>\n\n<pre><code>git fetch --all\n</code></pre>\n\n<p>Then, you have two options:</p>\n\n<pre><code>git reset --hard origin/master\n</code></pre>\n\n<p>OR If you are on some other branch:</p>\n\n<pre><code>git reset --hard origin/&lt;branch_name&gt;\n</code></pre>\n\n<h3>Explanation:</h3>\n\n<p><code>git fetch</code> downloads the latest from remote without trying to merge or rebase anything.</p>\n\n<p>Then the <code>git reset</code> resets the master branch to what you just fetched. The <code>--hard</code> option changes all the files in your working tree to match the files in <code>origin/master</code></p>\n\n<hr>\n\n<h3>Maintain current local commits</h3>\n\n<p><sup>[*]</sup>: It's worth noting that it is possible to maintain current local commits by creating a branch from <code>master</code> before resetting:</p>\n\n<pre><code>git checkout master\ngit branch new-branch-to-save-current-commits\ngit fetch --all\ngit reset --hard origin/master\n</code></pre>\n\n<p>After this, all of the old commits will be kept in <code>new-branch-to-save-current-commits</code>. </p>\n\n<h3>Uncommitted changes</h3>\n\n<p>Uncommitted changes, however (even staged), will be lost. Make sure to stash and commit anything you need. For that you can run the following:</p>\n\n<pre><code>git stash\n</code></pre>\n\n<p>And then to reapply these uncommitted changes:</p>\n\n<pre><code>git stash pop\n</code></pre>\n"}, {"title": "How to remove local (untracked) files from the current Git working tree", "question_body": "<p>How do you delete untracked local files from your current working tree?</p>\n", "link": "https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree", "question_id": 61212, "accepted_answer_id": 64966, "answer_body": "<p>As per the Git Documentation <a href=\"https://git-scm.com/docs/git-clean\" rel=\"noreferrer\">git clean</a></p>\n\n<blockquote>\n  <p>Remove untracked files from the working tree</p>\n</blockquote>\n\n<hr>\n\n<p>Step 1 is to show what will be deleted by using the <code>-n</code> option:</p>\n\n<pre><code># Print out the list of files which will be removed (dry run)\ngit clean -n\n</code></pre>\n\n<p>Clean Step - <strong>beware: this will delete files</strong>:</p>\n\n<pre><code># Delete the files from the repository\ngit clean -f\n</code></pre>\n\n<ul>\n<li>To remove directories, run <code>git clean -f -d</code> or <code>git clean -fd</code></li>\n<li>To remove ignored files, run <code>git clean -f -X</code> or <code>git clean -fX</code></li>\n<li>To remove ignored and non-ignored files, run <code>git clean -f -x</code> or <code>git clean -fx</code></li>\n</ul>\n\n<p><strong>Note</strong> the case difference on the <code>X</code> for the two latter commands.</p>\n\n<p>If <code>clean.requireForce</code> is set to \"true\" (the default) in your configuration, one needs to specify <code>-f</code> otherwise nothing will actually happen.</p>\n\n<p>Again see the <a href=\"http://git-scm.com/docs/git-clean\" rel=\"noreferrer\"><code>git-clean</code></a> docs for more information.</p>\n\n<hr>\n\n<h1>Options</h1>\n\n<blockquote>\n  <p><strong><code>-f</code>, <code>--force</code></strong>  </p>\n  \n  <p>If the Git configuration variable clean.requireForce is not set to\n  false, git clean will refuse to run unless given <code>-f</code>, <code>-n</code> or <code>-i</code>.</p>\n  \n  <p><strong><code>-x</code></strong></p>\n  \n  <p>Don\u2019t use the standard ignore rules read from .gitignore (per\n  directory) and <code>$GIT_DIR/info/exclude</code>, but do still use the ignore\n  rules given with <code>-e</code> options. This allows removing all untracked files,\n  including build products. This can be used (possibly in conjunction\n  with git reset) to create a pristine working directory to test a clean\n  build.</p>\n  \n  <p><strong><code>-X</code></strong></p>\n  \n  <p>Remove only files ignored by Git. This may be useful to rebuild\n  everything from scratch, but keep manually created files.</p>\n  \n  <p><strong><code>-n</code>, <code>--dry-run</code></strong></p>\n  \n  <p>Don\u2019t actually remove anything, just show what would be done.</p>\n  \n  <p><strong><code>-d</code></strong></p>\n  \n  <p>Remove untracked directories in addition to untracked files. If an\n  untracked directory is managed by a different Git repository, it is\n  not removed by default. Use <code>-f</code> option twice if you really want to\n  remove such a directory.</p>\n</blockquote>\n"}, {"title": "How do I check out a remote Git branch?", "question_body": "<p>Somebody pushed a branch called <code>test</code> with <code>git push origin test</code> to a shared repository. I can see the branch with <code>git branch -r</code>.</p>\n\n<p>Now I'm trying to check out the remote <code>test</code> branch.</p>\n\n<p>I've tried:</p>\n\n<ul>\n<li><p><code>git checkout test</code> which does nothing</p></li>\n<li><p><code>git checkout origin/test</code> gives <code>* (no branch)</code>. Which is confusing. How can I be on \"no branch\"?</p></li>\n</ul>\n\n<p>How do I check out a remote Git branch?</p>\n", "link": "https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch", "question_id": 1783405, "accepted_answer_id": 1783426, "answer_body": "<h2>Update</h2>\n\n<p><a href=\"https://stackoverflow.com/a/1787014/456814\">Jakub's answer</a> actually improves on this. With Git versions &ge; 1.6.6, with only one remote, you can just do:</p>\n\n<pre><code>git fetch\ngit checkout test\n</code></pre>\n\n<p>As user masukomi points out in a comment, <code>git checkout test</code> will NOT work in modern git if you have multiple remotes. In this case use</p>\n\n<pre><code>git checkout -b test &lt;name of remote&gt;/test\n</code></pre>\n\n<p>or the shorthand</p>\n\n<pre><code>git checkout -t &lt;name of remote&gt;/test\n</code></pre>\n\n<h2>Old Answer</h2>\n\n<p>Before you can start working locally on a remote branch, you need to fetch it as called out in answers below. </p>\n\n<p>To fetch a branch, you simply need to:</p>\n\n<pre><code>git fetch origin\n</code></pre>\n\n<p>This will fetch all of the remote branches for you. You can see the branches available for checkout with:</p>\n\n<pre><code>git branch -v -a\n</code></pre>\n\n<p>With the remote branches in hand, you now  need to check out the branch you are interested in, giving you a local working copy:</p>\n\n<pre><code>git checkout -b test origin/test\n</code></pre>\n"}, {"title": "How to make Git &quot;forget&quot; about a file that was tracked but is now in .gitignore?", "question_body": "<p>There is a file that was being tracked by <code>git</code>, but now the file is on the <code>.gitignore</code> list.</p>\n\n<p>However, that file keeps showing up in <code>git status</code> after it's edited. How do you force <code>git</code> to completely forget about it?</p>\n", "link": "https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore", "question_id": 1274057, "accepted_answer_id": 1274447, "answer_body": "<p><code>.gitignore</code> will prevent untracked files from being added (without an <code>add -f</code>) to the set of files tracked by git, however git will continue to track any files that are already being tracked.</p>\n\n<p>To stop tracking a file you need to remove it from the index. This can be achieved with this command.</p>\n\n<pre><code>git rm --cached &lt;file&gt;\n</code></pre>\n\n<p>If you want to remove a whole folder, you need to remove all files in it recursively.</p>\n\n<pre><code>git rm -r --cached &lt;folder&gt;\n</code></pre>\n\n<p>The removal of the file from the head revision will happen on the next commit.</p>\n\n<p><strong>WARNING: While this will not remove the physical file from your local, it will remove the files from other developers machines on next <code>git pull</code>.</strong></p>\n"}, {"title": "Move the most recent commit(s) to a new branch with Git", "question_body": "<p>I'd like to move the last several commits I've committed to master to a new branch and take master back to before those commits were made. Unfortunately, my Git-fu is not strong enough yet, any help?</p>\n\n<p>I.e. How can I go from this</p>\n\n<pre><code>master A - B - C - D - E\n</code></pre>\n\n<p>to this?</p>\n\n<pre><code>newbranch     C - D - E\n             /\nmaster A - B \n</code></pre>\n", "link": "https://stackoverflow.com/questions/1628563/move-the-most-recent-commits-to-a-new-branch-with-git", "question_id": 1628563, "accepted_answer_id": 1628584, "answer_body": "<h2>Moving to an existing branch</h2>\n\n<p>If you want to move your commits to an <strong>existing branch</strong>, it will look like this:</p>\n\n\n\n<pre class=\"lang-sh prettyprint-override\"><code>git checkout existingbranch\ngit merge master         # Bring the commits here\ngit checkout master\ngit reset --keep HEAD~3  # Move master back by 3 commits.\ngit checkout existingbranch\n</code></pre>\n\n<p>The <code>--keep</code> option preserves any uncommitted changes that you might have in unrelated files, or aborts if those changes would have to be overwritten -- similarly to what <code>git checkout</code> does. If it aborts, <code>git stash</code> your changes and retry, or use <code>--hard</code> to lose the changes (even from files that didn't change between the commits!)</p>\n\n<h2>Moving to a new branch</h2>\n\n<p>This method works by creating a new branch with the first command (<code>git branch newbranch</code>) but not switching to it. Then we roll back the current branch (master) and switch to the new branch to continue working.</p>\n\n\n\n<pre class=\"lang-sh prettyprint-override\"><code>git branch newbranch      # Create a new branch, containing all current commits\ngit reset --keep HEAD~3   # Move master back by 3 commits (Make sure you know how many commits you need to go back)\ngit checkout newbranch    # Go to the new branch that still has the desired commits\n# Warning: after this it's not safe to do a rebase in newbranch without extra care.\n</code></pre>\n\n<p>But do make sure how many commits to go back. Alternatively, instead of <code>HEAD~3</code>, you can simply provide the hash of the commit (or the reference like <code>origin/master</code>) you want to revert back to, e.g:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>git reset --keep a1b2c3d4\n</code></pre>\n\n<p><strong>WARNING:</strong> With Git version 2.0 and later, if you later <code>git rebase</code> the new branch upon the original (<code>master</code>) branch, you may need an explicit <code>--no-fork-point</code> option during the rebase to avoid losing the commits you moved from the master branch.  Having <code>branch.autosetuprebase always</code> set makes this more likely.  See <a href=\"https://stackoverflow.com/a/36463546/1256452\">John Mellor's answer</a> for details.</p>\n"}, {"title": "How to resolve merge conflicts in Git", "question_body": "<p>How do I resolve merge conflicts in Git?</p>\n", "link": "https://stackoverflow.com/questions/161813/how-to-resolve-merge-conflicts-in-git", "question_id": 161813, "accepted_answer_id": 163659, "answer_body": "<p>Try: <code>git mergetool</code></p>\n\n<p>It opens a GUI that steps you through each conflict, and you get to choose how to merge.  Sometimes it requires a bit of hand editing afterwards, but usually it's enough by itself.  It is much better than doing the whole thing by hand certainly.</p>\n\n<p>As per @JoshGlover comment:</p>\n\n<p>The command doesn't necessarily open a GUI unless you install one. Running <code>git mergetool</code> for me resulted in <code>vimdiff</code> being used. You can install one of the following tools to use it instead: <code>meld</code>, <code>opendiff</code>, <code>kdiff3</code>, <code>tkdiff</code>, <code>xxdiff</code>, <code>tortoisemerge</code>, <code>gvimdiff</code>, <code>diffuse</code>, <code>ecmerge</code>, <code>p4merge</code>, <code>araxis</code>, <code>vimdiff</code>, <code>emerge</code>.</p>\n\n<p>Below is the sample procedure to use <code>vimdiff</code> for resolve merge conflicts. Based on <a href=\"http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/#fromHistor\" rel=\"noreferrer\">this link</a></p>\n\n<p><strong>Step 1</strong>: Run following commands in your terminal</p>\n\n<pre><code>git config merge.tool vimdiff\ngit config merge.conflictstyle diff3\ngit config mergetool.prompt false\n</code></pre>\n\n<p>This will set vimdiff as the default merge tool.</p>\n\n<p><strong>Step 2</strong>: Run following command in terminal</p>\n\n<pre><code>git mergetool\n</code></pre>\n\n<p><strong>Step 3</strong>: You will see a vimdiff display in following format </p>\n\n<pre><code>  \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n  \u2551       \u2551      \u2551        \u2551\n  \u2551 LOCAL \u2551 BASE \u2551 REMOTE \u2551\n  \u2551       \u2551      \u2551        \u2551\n  \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n  \u2551                       \u2551\n  \u2551        MERGED         \u2551\n  \u2551                       \u2551\n  \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>\n\n<p>These 4 views are </p>\n\n<blockquote>\n  <p>LOCAL \u2013 this is file from the current branch  </p>\n  \n  <p>BASE \u2013 common ancestor, how file looked before both changes </p>\n  \n  <p>REMOTE \u2013 file you are merging into your branch </p>\n  \n  <p>MERGED \u2013 merge result, this is what gets saved in the repo</p>\n</blockquote>\n\n<p>You can navigate among these views using <kbd>ctrl</kbd>+<kbd>w</kbd>. You can directly reach MERGED view using <kbd>ctrl</kbd>+<kbd>w</kbd> followed by <kbd>j</kbd>.</p>\n\n<p>More info about vimdiff navigation <a href=\"https://stackoverflow.com/questions/4556184/vim-move-window-left-right\">here</a> and <a href=\"https://stackoverflow.com/questions/27151456/how-do-i-jump-to-the-next-prev-diff-in-git-difftool\">here</a></p>\n\n<p><strong>Step 4</strong>. You could edit the MERGED view the following way </p>\n\n<p>If you want to get changes from REMOTE</p>\n\n<pre><code>:diffg RE  \n</code></pre>\n\n<p>If you want to get changes from BASE</p>\n\n<pre><code>:diffg BA  \n</code></pre>\n\n<p>If you want to get changes from LOCAL</p>\n\n<pre><code>:diffg LO \n</code></pre>\n\n<p><strong>Step 5</strong>. Save, Exit, Commit and Clean up</p>\n\n<p><code>:wqa</code> save and exit from vi</p>\n\n<p><code>git commit -m \"message\"</code></p>\n\n<p><code>git clean</code> Remove extra files (e.g. *.orig) created by diff tool.</p>\n"}, {"title": "How do I discard unstaged changes in Git?", "question_body": "<p>How do I discard changes in my working copy that are not in the index?</p>\n", "link": "https://stackoverflow.com/questions/52704/how-do-i-discard-unstaged-changes-in-git", "question_id": 52704, "accepted_answer_id": 52719, "answer_body": "<p>Another quicker way is:</p>\n\n<pre><code>git stash save --keep-index --include-untracked\n</code></pre>\n\n<p>You don't need to include <code>--include-untracked</code> if you don't want to be thorough about it.</p>\n\n<p>After that, you can drop that stash with a <code>git stash drop</code> command if you like.</p>\n"}, {"title": "How can I reset or revert a file to a specific revision?", "question_body": "<p>I have made some changes to a file which has been committed a few times as part of a group of files, but now want to reset/revert the changes on it back to a previous version. </p>\n\n<p>I have done a <code>git log</code> along with a <code>git diff</code> to find the revision I need, but just have no idea how to get the file back to its former state in the past.</p>\n", "link": "https://stackoverflow.com/questions/215718/how-can-i-reset-or-revert-a-file-to-a-specific-revision", "question_id": 215718, "accepted_answer_id": 215731, "answer_body": "<p>Assuming the hash of the commit you want is <code>c5f567</code>:</p>\n\n<pre><code>git checkout c5f567 -- file1/to/restore file2/to/restore\n</code></pre>\n\n<p>The <a href=\"https://git-scm.com/docs/git-checkout\" rel=\"noreferrer\">git checkout</a> man page gives more information.</p>\n\n<p>If you want to revert to the commit before <code>c5f567</code>, append <code>~1</code> (works with any number):</p>\n\n<pre><code>git checkout c5f567~1 -- file1/to/restore file2/to/restore\n</code></pre>\n\n<p>As a side note, I've always been uncomfortable with this command because it's used for both ordinary things (changing between branches) and unusual, destructive things (discarding changes in the working directory).</p>\n"}, {"title": "How do I push a new local branch to a remote Git repository and track it too?", "question_body": "<p>I want to be able to do the following:</p>\n\n<ol>\n<li><p>Create a local branch based on some other (remote or local) branch (via <code>git branch</code> or <code>git checkout -b</code>)</p></li>\n<li><p>Push the local branch\nto the remote repository (publish), but make it\ntrackable so <code>git pull</code> and <code>git push</code> will work immediately.</p></li>\n</ol>\n\n<p>How do I do that?</p>\n\n<p>I know about <code>--set-upstream</code> in Git 1.7, but that is a post-creation action. I want to find a way to make a similar change when pushing the branch to the remote repository.</p>\n", "link": "https://stackoverflow.com/questions/2765421/how-do-i-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too", "question_id": 2765421, "accepted_answer_id": 6232535, "answer_body": "<p>In Git 1.7.0 and later, you can checkout a new branch:</p>\n\n<pre><code>git checkout -b &lt;branch&gt;\n</code></pre>\n\n<p>Edit files, add and commit. Then <a href=\"https://git-scm.com/docs/git-push\" rel=\"noreferrer\">push with the <code>-u</code> (short for <code>--set-upstream</code>)</a> option:</p>\n\n<pre><code>git push -u origin &lt;branch&gt;\n</code></pre>\n\n<p>Git will set up the tracking information during the push.</p>\n"}, {"title": "How can I add an empty directory to a Git repository?", "question_body": "<p>How can I add an empty directory (that contains no files) to a Git repository?</p>\n", "link": "https://stackoverflow.com/questions/115983/how-can-i-add-an-empty-directory-to-a-git-repository", "question_id": 115983, "accepted_answer_id": 932982, "answer_body": "<p>Another way to make a directory stay (almost) empty (in the repository) is to create a <code>.gitignore</code> file inside that directory that contains these four lines:</p>\n\n<pre><code># Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n</code></pre>\n\n<p>Then you don't have to get the order right the way that you have to do in m104's <a href=\"https://stackoverflow.com/a/180917/32453\">solution</a>.</p>\n\n<p>This also gives the benefit that files in that directory won't show up as \"untracked\" when you do a git status.</p>\n\n<p>Making <a href=\"https://stackoverflow.com/users/554807/greenasjade\">@GreenAsJade</a>'s comment persistent:</p>\n\n<blockquote>\n  <p>I think it's worth noting that this solution does precisely what the question asked for, but is not perhaps what many people looking at this question will have been looking for. This solution guarantees that the directory remains empty. It says \"I truly never want files checked in here\". As opposed to \"I don't have any files to check in here, yet, but I need the directory here, files may be coming later\".</p>\n</blockquote>\n"}, {"title": "How to clone all remote branches in Git?", "question_body": "<p>I have a <code>master</code> and a <code>development</code> branch, both pushed to <a href=\"http://en.wikipedia.org/wiki/GitHub\" rel=\"noreferrer\">GitHub</a>. I've <code>clone</code>d, <code>pull</code>ed, and <code>fetch</code>ed, but I remain unable to get anything other than the <code>master</code> branch back.</p>\n\n<p>I'm sure I'm missing something obvious, but I have read the manual and I'm getting no joy at all.</p>\n", "link": "https://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-in-git", "question_id": 67699, "accepted_answer_id": 72156, "answer_body": "<p>First, clone a remote <a href=\"http://en.wikipedia.org/wiki/Git_%28software%29\" rel=\"noreferrer\">Git</a> repository and <a href=\"http://en.wikipedia.org/wiki/Cd_%28command%29\" rel=\"noreferrer\">cd</a> into it:</p>\n\n<pre><code>$ git clone git://example.com/myproject\n$ cd myproject\n</code></pre>\n\n<p>Next, look at the local branches in your repository:</p>\n\n<pre><code>$ git branch\n* master\n</code></pre>\n\n<p>But there are other branches hiding in your repository! You can see these using the <code>-a</code> flag:</p>\n\n<pre><code>$ git branch -a\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n</code></pre>\n\n<p>If you just want to take a quick peek at an upstream branch, you can check it out directly:</p>\n\n<pre><code>$ git checkout origin/experimental\n</code></pre>\n\n<p>But if you want to work on that branch, you'll need to create a local tracking branch which is done automatically by:</p>\n\n<pre><code>$ git checkout experimental\n</code></pre>\n\n<p>and you will see</p>\n\n<pre><code>Branch experimental set up to track remote branch experimental from origin.\nSwitched to a new branch 'experimental'\n</code></pre>\n\n<p>That last line throws some people: \"New branch\" - huh?\nWhat it really means is that the branch is taken from the index and created locally for you.  The <em>previous</em> line is actually more informative as it tells you that the branch is being set up to track the remote branch, which usually means the origin/branch_name branch </p>\n\n<p>Now, if you look at your local branches, this is what you'll see:</p>\n\n<pre><code>$ git branch\n* experimental\n  master\n</code></pre>\n\n<p>You can actually track more than one remote repository using <code>git remote</code>.</p>\n\n<pre><code>$ git remote add win32 git://example.com/users/joe/myproject-win32-port\n$ git branch -a\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n  remotes/win32/master\n  remotes/win32/new-widgets\n</code></pre>\n\n<p>At this point, things are getting pretty crazy, so run <code>gitk</code> to see what's going on:</p>\n\n<pre><code>$ gitk --all &amp;\n</code></pre>\n"}, {"title": "How can I determine the URL that a local Git repository was originally cloned from?", "question_body": "<p>I pulled a project from GitHub a few days ago. I've since discovered that there are several forks on GitHub, and I neglected to note which one I took originally. How can I determine which of those forks I pulled?</p>\n", "link": "https://stackoverflow.com/questions/4089430/how-can-i-determine-the-url-that-a-local-git-repository-was-originally-cloned-fr", "question_id": 4089430, "accepted_answer_id": 4089452, "answer_body": "<p>If you want only the remote URL, or if your are not connected to a network that can reach the remote repo:</p>\n\n<pre><code>git config --get remote.origin.url\n</code></pre>\n\n<p>If you require full output and you <em>are</em> on a network that can reach the remote repo where the origin resides :</p>\n\n<pre><code>git remote show origin\n</code></pre>\n\n<p>When using <code>git clone</code> (from GitHub, or any source repository for that matter) the default name for the source of the clone is \"origin\". Using <code>git remote show</code> will display the information about this remote name. The first few lines should show:</p>\n\n<pre><code>C:\\Users\\jaredpar\\VsVim&gt; git remote show origin\n* remote origin\n  Fetch URL: git@github.com:jaredpar/VsVim.git\n  Push  URL: git@github.com:jaredpar/VsVim.git\n  HEAD branch: master\n  Remote branches:\n</code></pre>\n\n<p>If you want to use the value in the script, you would use the first command listed in this answer.</p>\n"}, {"title": "Undo a Git merge that hasn&#39;t been pushed yet", "question_body": "<p>Within my master branch, I did a <code>git merge some-other-branch</code> locally, but never pushed the changes to origin master. I didn't mean to merge, so I'd like to undo it. When doing a <code>git status</code> after my merge, I was getting this message:</p>\n\n<pre><code># On branch master\n# Your branch is ahead of 'origin/master' by 4 commits.\n</code></pre>\n\n<p>Based upon some <a href=\"http://www.gitready.com/intermediate/2009/03/16/rolling-back-changes-with-revert.html\" rel=\"noreferrer\">instructions I found</a>, I tried running</p>\n\n<pre><code>git revert HEAD -m 1\n</code></pre>\n\n<p>but now I'm getting this message with <code>git status</code>:</p>\n\n<pre><code># On branch master\n# Your branch is ahead of 'origin/master' by 5 commits.\n</code></pre>\n\n<p>I don't want my branch to be ahead by any number of commits. How do I get back to that point?</p>\n", "link": "https://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet", "question_id": 2389361, "accepted_answer_id": 2389423, "answer_body": "<p>With <code>git reflog</code> check which commit is one prior the merge (<code>git reflog</code> will be a better option than <code>git log</code>). Then you can reset it using:</p>\n\n<pre><code>git reset --hard commit_sha\n</code></pre>\n\n<p>There's also another way:</p>\n\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n\n<p>It will get you back 1 commit.</p>\n\n<p><strong>Be aware that any modified and uncommitted/unstashed files will be reset to their unmodified state</strong>. To keep them either stash changes away or see <code>--merge</code> option below.  </p>\n\n<hr>\n\n<p>As @Velmont suggested below in his answer, in this direct case using:</p>\n\n<pre><code>git reset --hard ORIG_HEAD\n</code></pre>\n\n<p>might yield better results, as it should preserve your changes. <code>ORIG_HEAD</code> will point to a commit directly before merge has occurred, so you don't have to hunt for it yourself.</p>\n\n<hr>\n\n<p>A further tip is to use the <code>--merge</code> switch instead of <code>--hard</code> since it doesn't reset files unnecessarily:</p>\n\n<pre><code>git reset --merge ORIG_HEAD\n</code></pre>\n\n<blockquote>\n  <p>--merge</p>\n  \n  <p>Resets the index and updates the files in the working tree that are different between &lt;commit&gt; and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added). </p>\n</blockquote>\n"}, {"title": "How to change the URI (URL) for a remote Git repository?", "question_body": "<p>I have a repo (origin) on a USB key that I cloned on my hard drive (local). I moved \"origin\" to a NAS and successfully tested cloning it from here.</p>\n\n<p>I would like to know if I can change the URI of \"origin\" in the settings of \"local\" so it will now pull from the NAS, and not from the USB key.</p>\n\n<p>For now, I can see two solutions:</p>\n\n<ul>\n<li><p>push everything to the usb-orign, and copy it to the NAS again (implies a lot of work due to new commits to nas-origin);</p></li>\n<li><p>add a new remote to \"local\" and delete the old one (I fear I'll break my history).</p></li>\n</ul>\n", "link": "https://stackoverflow.com/questions/2432764/how-to-change-the-uri-url-for-a-remote-git-repository", "question_id": 2432764, "accepted_answer_id": 2432799, "answer_body": "<p>You can</p>\n\n<pre><code>git remote set-url origin new.git.url/here\n</code></pre>\n\n<p>(see <code>git help remote</code>) or you can just edit <code>.git/config</code> and change the URLs there. You're not in any danger of losing history unless you do something very silly (and if you're worried, just make a copy of your repo, since your repo <em>is</em> your history.)</p>\n"}, {"title": "Make an existing Git branch track a remote branch?", "question_body": "<p>I know how to make a new branch that tracks remote branches, but <strong>how do I make an existing branch track a remote branch?</strong></p>\n\n<p>I know I can just edit the <code>.git/config</code> file, but it seems there should be an easier way.</p>\n", "link": "https://stackoverflow.com/questions/520650/make-an-existing-git-branch-track-a-remote-branch", "question_id": 520650, "accepted_answer_id": 2286030, "answer_body": "<p>Given a branch <code>foo</code> and a remote <code>upstream</code>:</p>\n\n<p><strong>As of Git 1.8.0:</strong></p>\n\n<pre><code>git branch -u upstream/foo\n</code></pre>\n\n<p>Or, if local branch <code>foo</code> is not the current branch:</p>\n\n<pre><code>git branch -u upstream/foo foo\n</code></pre>\n\n<p>Or, if you like to type longer commands, these are equivalent to the above two:</p>\n\n<pre><code>git branch --set-upstream-to=upstream/foo\n\ngit branch --set-upstream-to=upstream/foo foo\n</code></pre>\n\n<p><strong>As of Git 1.7.0:</strong></p>\n\n<pre><code>git branch --set-upstream foo upstream/foo\n</code></pre>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n<li>All of the above commands will cause local branch <code>foo</code> to track remote branch <code>foo</code> from remote <code>upstream</code>.  </li>\n<li>The old (1.7.x) syntax is deprecated in favor of the new (1.8+) syntax.  The new syntax is intended to be more intuitive and easier to remember.</li>\n<li>Defining the upstream will fail with newly created remotes that have not been fetched. In that case run <code>git fetch upstream</code> beforehand.</li>\n</ul>\n\n<hr>\n\n<p>See also: <a href=\"https://stackoverflow.com/q/6089294/95706\">Why do I need to do `--set-upstream` all the time?</a></p>\n"}, {"title": "Reset local repository branch to be just like remote repository HEAD", "question_body": "<p>How do I reset my local branch to be just like the branch on the remote repository?</p>\n\n<p>I did:</p>\n\n<pre><code>git reset --hard HEAD\n</code></pre>\n\n<p>But when I run a <code>git status</code>,</p>\n\n<pre><code>On branch master\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n      modified:   java/com/mycompany/TestContacts.java\n      modified:   java/com/mycompany/TestParser.java\n</code></pre>\n\n<p>Can you please tell me why I have these 'modified'? I haven't touched these files? If I did, I want to remove those.</p>\n", "link": "https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head", "question_id": 1628088, "accepted_answer_id": 1628334, "answer_body": "<p>Setting your branch to exactly match the remote branch can be done in two steps:</p>\n\n<pre><code>git fetch origin\ngit reset --hard origin/master\n</code></pre>\n\n<p>If you want to save your current branch's state before doing this (just in case), you can do:</p>\n\n<pre><code>git commit -a -m \"Saving my work, just in case\"\ngit branch my-saved-work\n</code></pre>\n\n<p>Now your work is saved on the branch \"my-saved-work\" in case you decide you want it back (or want to look at it later or diff it against your updated branch).</p>\n\n<p>Note that the first example assumes that the remote repo's name is \"origin\" and that the branch named \"master\" in the remote repo matches the currently checked-out branch in your local repo.</p>\n\n<p>BTW, this situation that you're in looks an awful lot like a common case where a push has been done into the currently checked out branch of a non-bare repository. Did you recently push into your local repo? If not, then no worries -- something else must have caused these files to unexpectedly end up modified. Otherwise, you should be aware that it's not recommended to push into a non-bare repository (and not into the currently checked-out branch, in particular).</p>\n"}, {"title": "How do I remove a submodule?", "question_body": "<p>How do I remove a Git submodule?</p>\n\n<p>By the way, is there a reason I can't simply do \n<code>git submodule rm whatever</code> ?</p>\n", "link": "https://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule", "question_id": 1260748, "accepted_answer_id": 16162000, "answer_body": "<p>Since <a href=\"https://github.com/git/git/blob/v1.8.3-rc0/Documentation/RelNotes/1.8.3.txt#L135-L137\" rel=\"noreferrer\">git1.8.3 (April 22d, 2013)</a>:</p>\n\n<blockquote>\n  <p>There was no Porcelain way to say \"I no longer am interested in this submodule\", once you express your interest in a submodule with \"<code>submodule init</code>\".<br>\n  \"<strong><code>submodule deinit</code></strong>\" is the way to do so. </p>\n</blockquote>\n\n<p>The deletion process also uses <code>git rm</code> (since git1.8.5 October 2013).  </p>\n\n<h2>Summary</h2>\n\n<p>The 3-steps removal process would then be:</p>\n\n<pre><code>0. mv a/submodule a/submodule_tmp\n\n1. git submodule deinit -f -- a/submodule    \n2. rm -rf .git/modules/a/submodule\n3. git rm -f a/submodule\n# Note: a/submodule (no trailing slash)\n\n# or, if you want to leave it in your working tree and have done step 0\n3.   git rm --cached a/submodule\n3bis mv a/submodule_tmp a/submodule\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p><code>rm -rf</code>: This is mentioned in <a href=\"https://stackoverflow.com/users/2753241/daniel-schroeder\">Daniel Schroeder</a>'s <a href=\"https://stackoverflow.com/a/26505847/6309\">answer</a>, and summarized by <a href=\"https://stackoverflow.com/users/246776/eonil\">Eonil</a> in <a href=\"https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule/16162000?noredirect=1#comment41729982_16162000\">the comments</a>:</p>\n\n<blockquote>\n  <p>This leaves <code>.git/modules/&lt;path-to-submodule&gt;/</code> unchanged.<br>\n  So if you once delete a submodule with this method and re-add them again, it will not be possible because repository already been corrupted.</p>\n</blockquote>\n\n<hr>\n\n<p><code>git rm</code>: See <a href=\"https://github.com/git/git/commit/95c16418f0375e2fc325f32c3d7578fba9cfd7ef\" rel=\"noreferrer\">commit 95c16418</a>:</p>\n\n<blockquote>\n  <p>Currently using \"<code>git rm</code>\" on a submodule removes the submodule's work tree from that of the superproject and the gitlink from the index.<br>\n  But the submodule's section in <code>.gitmodules</code> is left untouched, which is a leftover of the now removed submodule and might irritate users (as opposed to the setting in <code>.git/config</code>, this must stay as a reminder that the user showed interest in this submodule so it will be repopulated later when an older commit is checked out).</p>\n  \n  <p>Let \"<code>git rm</code>\" help the user by not only removing the submodule from the work tree but by also removing the \"<code>submodule.&lt;submodule name&gt;</code>\" section from the <code>.gitmodules</code> file and stage both.</p>\n</blockquote>\n\n<hr>\n\n<p><code>git submodule deinit</code>: It stems from <a href=\"http://git.661346.n2.nabble.com/PATCH-v3-submodule-add-deinit-command-td7576946.html\" rel=\"noreferrer\">this patch</a>:</p>\n\n<blockquote>\n  <p>With \"<code>git submodule init</code>\" the user is able to tell git they care about one or more submodules and wants to have it populated on the next call to \"<code>git submodule update</code>\".<br>\n  But currently there is no easy way they can tell git they do not care about a submodule anymore and wants to get rid of the local work tree (unless the user knows a lot about submodule internals and removes the \"<code>submodule.$name.url</code>\" setting from <code>.git/config</code> together with the work tree himself).</p>\n  \n  <p>Help those users by providing a '<strong><code>deinit</code></strong>' command.<br>\n  This <strong>removes the whole <code>submodule.&lt;name&gt;</code> section from <code>.git/config</code> either for the given\n  submodule(s)</strong> (or for all those which have been initialized if '<code>.</code>' is given).<br>\n  Fail if the current work tree contains modifications unless forced.<br>\n  Complain when for a submodule given on the command line the url setting can't be found in <code>.git/config</code>, but nonetheless don't fail. </p>\n</blockquote>\n\n<p>This takes care if the (de)initialization steps (<code>.git/config</code> and <code>.git/modules/xxx</code>)</p>\n\n<p>Since git1.8.5, the <code>git rm</code> takes <em>also</em> care of the:</p>\n\n<ul>\n<li>'<code>add</code>' step which records the url of a submodule in the <code>.gitmodules</code> file: it is need to removed for you.</li>\n<li>the submodule <strong><a href=\"https://stackoverflow.com/questions/1992018/git-submodule-update-needed-only-initially/2227598#2227598\">special entry</a></strong> (as illustrated by <a href=\"https://stackoverflow.com/q/16574625/6309\">this question</a>): the git rm removes it from the index:<br>\n<code>git rm --cached path_to_submodule</code> (no trailing slash)<br>\nThat will remove that directory stored in the index with a special mode \"160000\", marking it as a submodule root directory.</li>\n</ul>\n\n<p>If you forget that last step, and try to add what was a submodule as a regular directory, you would get error message like:</p>\n\n<pre><code>git add mysubmodule/file.txt \nPath 'mysubmodule/file.txt' is in submodule 'mysubmodule'\n</code></pre>\n\n<hr>\n\n<p>Note: since Git 2.17 (Q2 2018), git submodule deinit is no longer a shell script.<br>\nIt is a call to a C function.</p>\n\n<p>See <a href=\"https://github.com/git/git/commit/2e612731b55f1a83fb5b7f4ecb9391f0cba63cb2\" rel=\"noreferrer\">commit 2e61273</a>, <a href=\"https://github.com/git/git/commit/13424764db3273091d136bd470cf14852255c98c\" rel=\"noreferrer\">commit 1342476</a> (14 Jan 2018) by <a href=\"https://github.com/pratham-pc\" rel=\"noreferrer\">Prathamesh Chavan (<code>pratham-pc</code>)</a>.<br>\n<sup>(Merged by <a href=\"https://github.com/gitster\" rel=\"noreferrer\">Junio C Hamano -- <code>gitster</code> --</a> in <a href=\"https://github.com/git/git/commit/ead8dbe2e14ee9a2a18ccd0ad7bca806e1be0d54\" rel=\"noreferrer\">commit ead8dbe</a>, 13 Feb 2018)</sup>  </p>\n\n<pre><code>git ${wt_prefix:+-C \"$wt_prefix\"} submodule--helper deinit \\\n  ${GIT_QUIET:+--quiet} \\\n  ${prefix:+--prefix \"$prefix\"} \\\n  ${force:+--force} \\\n  ${deinit_all:+--all} \"$@\"\n</code></pre>\n"}, {"title": "How do I update a GitHub forked repository?", "question_body": "<p>I recently forked a project and applied several fixes. I then created a pull request which was then accepted.</p>\n\n<p>A few days later another change was made by another contributor. So my fork doesn't contain that change. </p>\n\n<p>How can I get that change into my fork? Do I need to delete and re-create my fork when I have further changes to contribute? Or is there an update button?</p>\n", "link": "https://stackoverflow.com/questions/7244321/how-do-i-update-a-github-forked-repository", "question_id": 7244321, "accepted_answer_id": 7244456, "answer_body": "<p>In your local clone of your forked repository, you can add the original GitHub repository as a \"remote\".  (\"Remotes\" are like nicknames for the URLs of repositories - <code>origin</code> is one, for example.)  Then you can fetch all the branches from that upstream repository, and rebase your work to continue working on the upstream version.  In terms of commands that might look like:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code># Add the remote, call it \"upstream\":\n\ngit remote add upstream https://github.com/whoever/whatever.git\n\n# Fetch all the branches of that remote into remote-tracking branches,\n# such as upstream/master:\n\ngit fetch upstream\n\n# Make sure that you're on your master branch:\n\ngit checkout master\n\n# Rewrite your master branch so that any commits of yours that\n# aren't already in upstream/master are replayed on top of that\n# other branch:\n\ngit rebase upstream/master\n</code></pre>\n\n<p>If you don't want to rewrite the history of your master branch, (for example because other people may have cloned it) then you should replace the last command with <code>git merge upstream/master</code>.  However, for making further pull requests that are as clean as possible, it's probably better to rebase.</p>\n\n<hr>\n\n<p>If you've rebased your branch onto <code>upstream/master</code> you may need to force the push in order to push it to your own forked repository on GitHub.  You'd do that with:</p>\n\n<pre><code>git push -f origin master\n</code></pre>\n\n<p>You only need to use the <code>-f</code> the first time after you've rebased.</p>\n"}, {"title": "Squash my last X commits together using Git", "question_body": "<p>How can I squash my last X commits together into one commit using Git?</p>\n", "link": "https://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git", "question_id": 5189560, "accepted_answer_id": 5189600, "answer_body": "<p>Use <code>git rebase -i &lt;after-this-commit&gt;</code> and replace \"pick\" on the second and subsequent commits with \"squash\" or \"fixup\", as described in <a href=\"http://git-scm.com/docs/git-rebase#_interactive_mode\">the manual</a>.</p>\n\n<p>In this example, <code>&lt;after-this-commit&gt;</code> is either the SHA1 hash or the relative location from the HEAD of the current branch from which commits are analyzed for the rebase command. For example, if the user wishes to view 5 commits from the current HEAD in the past the command is <code>git rebase -i HEAD~5</code>. </p>\n"}, {"title": "How to delete a remote tag?", "question_body": "<p>How do you delete a Git tag that has already been pushed?</p>\n", "link": "https://stackoverflow.com/questions/5480258/how-to-delete-a-remote-tag", "question_id": 5480258, "accepted_answer_id": 5480292, "answer_body": "<p>You just need to push an 'empty' reference to the remote tag name:</p>\n\n<pre><code>git push origin :tagname\n</code></pre>\n\n<p>Or, more expressively, use the <code>--delete</code> option (or <code>-d</code> if your git version is older than 1.8.0):</p>\n\n<pre><code>git push --delete origin tagname\n</code></pre>\n\n<p>Note that git has tag namespace and branch namespace so you may use the same name for a branch and for a tag. If you want to make sure that you cannot accidentally remove the branch instead of the tag, you can specify full ref which will never delete a branch:</p>\n\n<pre><code>git push origin :refs/tags/tagname\n</code></pre>\n\n<p>If you also need to delete the local tag, use:</p>\n\n<pre><code>git tag --delete tagname\n</code></pre>\n\n<hr>\n\n<h3>Background</h3>\n\n<p>Pushing a branch, tag, or other ref to a remote repository involves specifying \"which repo, what source, what destination?\"</p>\n\n<pre><code>git push remote-repo source-ref:destination-ref\n</code></pre>\n\n<p>A real world example where you push your master branch to the origin's master branch is:</p>\n\n<pre><code>git push origin refs/heads/master:refs/heads/master\n</code></pre>\n\n<p>Which because of default paths, can be shortened to:</p>\n\n<pre><code>git push origin master:master\n</code></pre>\n\n<p>Tags work the same way:</p>\n\n<pre><code>git push origin refs/tags/release-1.0:refs/tags/release-1.0\n</code></pre>\n\n<p>Which can also be shortened to:</p>\n\n<pre><code>git push origin release-1.0:release-1.0\n</code></pre>\n\n<p>By omitting the source ref (the part before the colon), you push 'nothing' to the destination, deleting the ref on the remote end.</p>\n"}, {"title": "How do you create a remote Git branch?", "question_body": "<p>I created a local branch which I want to 'push' upstream. There is a similar question here on Stack Overflow on how to track a newly created remote branch. </p>\n\n<p>However, my workflow is slightly different. <strong>First</strong> I want to create a local branch, and I will only push it upstream when I'm satisfied and want to share my branch.</p>\n\n<ul>\n<li>How would I do that? (my google searches did not seem to come up with anything).</li>\n<li>How would I tell my colleagues to pull it from the upstream repository?</li>\n</ul>\n\n<p><strong>UPDATE With Git 2.0 there is a simpler answer</strong> I have written below: <a href=\"https://stackoverflow.com/a/27185855/109305\">https://stackoverflow.com/a/27185855/109305</a></p>\n", "link": "https://stackoverflow.com/questions/1519006/how-do-you-create-a-remote-git-branch", "question_id": 1519006, "accepted_answer_id": 27185855, "answer_body": "<h2>Simple Git 2.0+ solution:</h2>\n\n<p>As of <strong>Git 2.0 the behaviour has become simpler</strong>: </p>\n\n<p>You can configure git with <strong><code>push.default = current</code></strong> to make life easier:</p>\n\n<p>I added this so now I can just push a new branch upstream with</p>\n\n<pre><code>$ git push -u\n</code></pre>\n\n<p><code>-u</code> will track remote branch of same name. Now with this configuration you will auto-guess the remote reference to git push. From <a href=\"http://git-scm.com/docs/git-config\" rel=\"noreferrer\">git.config documentation</a>:</p>\n\n<blockquote>\n  <p><strong>push.default</strong> </p>\n  \n  <p>Defines the action git push should take if no refspec is explicitly given.</p>\n  \n  <p><strong><code>push.default = current</code></strong> - push the current branch to update a branch with the \n  same name on the receiving end. Works in both central and non-central workflows.</p>\n</blockquote>\n\n<p>For me, this is a good simplification of my day-to-day Git workflow. The configuration setting takes care of the 'usual' use case where you add a branch locally and want to create it remotely. Also, I can just as easily create local branches from remotes by just doing <code>git co remote_branch_name</code> (as opposed to using <code>--set-upstream-to</code> flag). </p>\n\n<p>I know this question and the accepted answers are rather old, but the behaviour has changed so that now configuration options exists to make your workflow simpler. </p>\n\n<p>To add to your global Git configuration, run this on the command line:</p>\n\n<pre><code>$ git config --global push.default current\n</code></pre>\n"}, {"title": "Delete commits from a branch in Git", "question_body": "<p>I would like to know how to delete a commit.</p>\n\n<p>By <code>delete</code>, I mean it is as if I didn't make that commit, and when I do a push in the future, my changes will not push to the remote branch.</p>\n\n<p>I read git help, and I think the command I should use is <code>git reset --hard HEAD</code>.  Is this correct?</p>\n", "link": "https://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git", "question_id": 1338728, "accepted_answer_id": 1338744, "answer_body": "<p><strong>Careful:</strong> <code>git reset --hard</code> <em>WILL DELETE YOUR WORKING DIRECTORY CHANGES</em>. Be sure to <strong>stash any local changes you want to keep</strong> before running this command.</p>\n\n<p>Assuming you are sitting on that commit, then this command will wack it...</p>\n\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n\n<p>The <code>HEAD~1</code> means the commit before head.</p>\n\n<p>Or, you could look at the output of <code>git log</code>, find the commit id of the commit you want to back up to, and then do this:</p>\n\n<pre><code>git reset --hard &lt;sha1-commit-id&gt;\n</code></pre>\n\n<hr/>\n\n<p>If you already pushed it, you will need to do a force push to get rid of it...</p>\n\n<pre><code>git push origin HEAD --force\n</code></pre>\n\n<p><strong>However</strong>, if others may have pulled it, then you would be better off starting a new branch.  Because when they pull, it will just merge it into their work, and you will get it pushed back up again.</p>\n\n<p>If you already pushed, it may be better to use <code>git revert</code>, to create a \"mirror image\" commit that will undo the changes.  However, both commits will be in the log.</p>\n\n<hr />\n\n<p>FYI -- <code>git reset --hard HEAD</code> is great if you want to get rid of WORK IN PROGRESS.  It will reset you back to the most recent commit, and erase all the changes in your working tree and index.</p>\n\n<hr />\n\n<p>Lastly, if you need to find a commit that you \"deleted\", it is typically present in <code>git reflog</code> unless you have garbage collected your repository.</p>\n"}, {"title": "Move existing, uncommitted work to a new branch in Git", "question_body": "<p>I started some work on a new feature and after coding for a bit, I decided this feature should be on its own branch. </p>\n\n<p>How do I move the existing uncommitted changes to a new branch and reset my current one?</p>\n\n<p>I want to reset my current branch while preserving existing work on the new feature.</p>\n", "link": "https://stackoverflow.com/questions/1394797/move-existing-uncommitted-work-to-a-new-branch-in-git", "question_id": 1394797, "accepted_answer_id": 1394804, "answer_body": "<p>Use the following:</p>\n\n<pre><code>git checkout -b &lt;new-branch&gt;\n</code></pre>\n\n<p>This will leave your current branch as is, create and checkout a new branch and keep all your changes. You can then make a commit with:</p>\n\n<pre><code>git add &lt;files&gt;\n</code></pre>\n\n<p>and commit to your new branch with: </p>\n\n<pre><code>git commit -m \"&lt;Brief description of this commit&gt;\"\n</code></pre>\n\n<p>The changes in the working directory and changes staged in index do not belong to any branch yet. This changes where those changes would end in.</p>\n\n<p>You don't <em>reset</em> your original branch, it stays as it is. The last commit on <code>&lt;old-branch&gt;</code> will still be the same. Therefore you <code>checkout -b</code> and then commit.</p>\n"}]